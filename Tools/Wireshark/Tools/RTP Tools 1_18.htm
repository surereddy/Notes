<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0049)http://www.cs.columbia.edu/irt/software/rtptools/ -->
<HTML><HEAD><TITLE>RTP Tools 1.18</TITLE>
<META http-equiv=Content-Type content="text/html; charset=gb2312">
<META content="Henning Schulzrinne" name=author>
<META content="RTP; rtptools; debugging" name=keywords>
<META content="MSHTML 6.00.2900.5764" name=GENERATOR></HEAD>
<BODY bgColor=#38b0de>
<H1>RTP Tools (Version 1.18)</H1><FONT color=red><BIG>The authors <B>cannot</B> 
provide support for compiling or running the rtptools. We will gladly accept bug 
fixes, but all other email regarding the rtptools will be ignored. </BIG></FONT>
<H2>Description</H2>
<P>The rtptools distribution consists of a number of small applications that can 
be used for processing <A href="http://new-www.cs.columbia.edu/~hgs/rtp">RTP</A> 
data. 
<DL>
  <DT><SAMP><A 
  href="http://www.cs.columbia.edu/irt/software/rtptools/#rtpplay">rtpplay</A></SAMP> 

  <DD>Play back RTP sessions recorded by <SAMP><A 
  href="http://www.cs.columbia.edu/irt/software/rtptools/#rtpdump">rtpdump</A></SAMP> 

  <DT><SAMP><A 
  href="http://www.cs.columbia.edu/irt/software/rtptools/#rtpsend">rtpsend</A></SAMP> 

  <DD>Generate RTP packets from textual description, generated by hand or 
  <SAMP><A 
  href="http://www.cs.columbia.edu/irt/software/rtptools/#rtpdump">rtpdump</A></SAMP> 

  <DT><SAMP><A 
  href="http://www.cs.columbia.edu/irt/software/rtptools/#rtpdump">rtpdump</A></SAMP> 

  <DD>Parse and print RTP packets, generating output files suitable for <SAMP><A 
  href="http://www.cs.columbia.edu/irt/software/rtptools/#rtpplay">rtpplay</A></SAMP> 
  and <SAMP><A 
  href="http://www.cs.columbia.edu/irt/software/rtptools/#rtpsend">rtpsend</A></SAMP> 

  <DT><SAMP><A 
  href="http://www.cs.columbia.edu/irt/software/rtptools/#rtptrans">rtptrans</A></SAMP> 

  <DD>RTP translator between unicast and multicast networks; also translates 
  between VAT and RTP formats. </DD></DL>
<H2><A name=installation>Installation</A></H2>
<P>Sources for a variety of platforms and binaries for Windows are available 
from <A 
href="http://www.cs.columbia.edu/IRT/software/rtptools/download">http://www.cs.columbia.edu/IRT/software/rtptools/download</A>. 

<P>The RTP tools should compile on any Posix-compliant platform supporting 
sockets, as well as Windows/NT/95/98/2000 (Win32). They have been tested on 
SunOS 4.1, SunOS 5.x (Solaris), Linux, NT 4.0, SGI Irix, and HP-UX. Edit the 
directories and libraries at the top of <SAMP>Makefile</SAMP> and type 
<KBD>make</KBD>. The compiler must support ANSI C: <SAMP>gcc</SAMP> does, Sun's 
old <SAMP>/usr/ucb/cc</SAMP> does not. 
<P><EM>Note</EM>: You must use the <CODE>sun4</CODE> architecture for SunOS 
4.1.x and <CODE>sun5</CODE> for SunOS 5.x (Solaris). You will get system call 
errors if you do not. 
<DL>
  <DT>For Unix systems, type 
  <DD><KBD>./configure; make</KBD> </DD></DL>
<DL>
  <DT>To install RTP tools on WIN32 machine, please follow the following steps: 
  <DD>*.dsp files are project files. *.dsw file and workspace file. <BR>User can 
  open the workspace file and use 'batch compile' to compile all the projects. 
  <OL>
    <LI>In Visual C++ 6.0, open workspace file rtptools.dsw. 
    <LI>In VC menu Build, use Batch Build to build all the tools. 
    <LI>All the rtptools will be created under "debug\" directory. 
</LI></OL></DD></DL>
<P>For quite a character, who desire to compile on Borland C++ Builder, please 
open dump_bcb.bpr, play_bcb.bpr, send_bcb.bpr and trans_bcb.bpr under bcb 
directory. Only pressing ctr-F9 needed for compilation, and the tool will be 
generated on the same directory. 
<H2><A name=usage>General Usage Hints</A></H2>
<P>Network addresses can be either multicast or unicast addresses, unless stated 
otherwise. They may be specified in dotted-decimal notation (e.g., 224.2.0.1) or 
as a host name (e.g., <SAMP>lupus.fokus.gmd.de</SAMP>). Port numbers must be 
given as decimal numbers in the range of 1 to 65535. Network addresses are 
specified as <VAR>destination/port/ttl</VAR>. The time-to-live (ttl) value is 
optional and only applies to multicast. 
<P>For all commands, the flag <SAMP>-h</SAMP> or <SAMP>-?</SAMP> will print a 
short usage summary. 
<P>Unless otherwise noted, input is taken from stdin, and output sent to stdout. 
The extension <CODE>.rtp</CODE> is suggested for files generated in 
<CODE>rtpdump -F dump</CODE> format. 
<H2><A name=rtpplay>rtpplay</A></H2><SAMP>rtpplay</SAMP> [-T] [-v] 
[<SAMP>-f</SAMP> <VAR>file</VAR>] [<SAMP>-p</SAMP> <VAR>profile</VAR>] 
[<SAMP>-s</SAMP> <VAR>sourceport</VAR>] [<SAMP>-b</SAMP> <VAR>begin</VAR>] 
[<SAMP>-e</SAMP> <VAR>end</VAR>] <VAR>destination/port</VAR>[<VAR>/ttl</VAR>] 
<P><SAMP>rtpplay</SAMP> reads RTP session data, recorded by <SAMP>rtpdump -F 
dump</SAMP> from either the <VAR>file</VAR> or stdin, if <VAR>file</VAR> is not 
specified, sending it to network address <VAR>destination</VAR> and port 
<VAR>port</VAR> with a time-to-live value of <VAR>ttl</VAR>. 
<P>If the flag <CODE>-T</CODE> is given, the timing between packets corresponds 
to the arrival timing rather than the RTP timestamps. Otherwise, for RTP data 
packets, the timing given by the RTP timestamps is used, smoothing interarrival 
jitter and restoring packet sequence. RTCP packets are still sent with their 
original timing. This may cause the relative order of RTP and RTCP packets to be 
changed. 
<P>The source port(localport) for outgoing packets can be set with the 
<SAMP>-s</SAMP> flag. A random port is chosen if this flag is not specified. 
<P>The whole file is played unless the <VAR>begin</VAR> or <VAR>end</VAR> times 
are specified. Times are measured in seconds and fractions from the beginning of 
the recording. 
<P>The RTP clock frequency is read from the <VAR>profile</VAR> file if given; 
the default profile (RFC 1890) is used if not. The profile file contains lines 
with two fields each: the first is the numeric payload type, the second the 
clock frequency. The values read from the profile file are silently ignored if 
the <CODE>-T</CODE> flag is used. 
<P>If you want to loop a particular file, it is easiest to put the 
<CODE>rtpplay</CODE> command in a shell script. 
<P>The <SAMP>-v</SAMP> flag has rtpplay display the packets generated on stdout. 

<P><CODE>rtpplay</CODE> uses the <CODE>hsearch (3C)</CODE> library, which may 
not be available on all operating systems. 
<H2><A name=rtpdump>rtpdump</A></H2><SAMP>rtpdump</SAMP> [<SAMP>-F</SAMP> 
<VAR>format</VAR>] [<SAMP>-t</SAMP> <VAR>duration</VAR>] [<SAMP>-x</SAMP> 
<VAR>bytes</VAR>] [<SAMP>-f</SAMP> <VAR>file</VAR>] [<SAMP>-o</SAMP> 
<VAR>outputfile</VAR>] <VAR>address/port</VAR> 
<P><SAMPLE>rtpdump</SAMP> listens on the <VAR>address</VAR> and <VAR>port</VAR> 
pair for RTP and RTCP packets and dumps a processed version to 
<VAR>outputfile</VAR> if specified or stdout otherwise. 
<P>If <VAR>file</VAR> is specified, the file is used instead of the network 
address. If no network address is given, file input is expected from stdin. The 
file must have been recorded using the rtpdump <CODE>dump</CODE> format. 
<P>The recording <VAR>duration</VAR> is measured in minutes. 
<P>From each packet, only the first <VAR>bytes</VAR> of the payload are dumped 
(only applicable for "dump" and "hex" formats). 
<P>Supported <VAR>formats</VAR> are: 
<P>
<TABLE border=1>
  <TBODY>
  <TR>
    <TH><SAMP>format</SAMP> 
    <TH>text/binary 
    <TH>description 
  <TR>
    <TD><SAMP>dump</SAMP> 
    <TD rowSpan=3>binary 
    <TD>dump in binary format, suitable for <A 
      href="http://www.cs.columbia.edu/irt/software/rtptools/#rtpplay">rtpplay</A>. 
      The format is as follows: The file starts with 
      <CENTER><CODE>#!rtpplay1.0</CODE> <VAR>address</VAR>/<VAR>port</VAR>\n 
      </CENTER>
      <P>The version number indicates the file format version, not the version 
      of RTP tools used to generate the file. The current file format version is 
      1.0. 
      <P>This is followed by one binary header (<TT>RD_hdr_t</TT>) and one 
      <TT>RD_packet_t</TT> structure for each received packet. All fields are in 
      network byte order. The RTP and RTCP packets are recorded as-is. <PRE>typedef struct {
  struct timeval start;  /* start of recording (GMT) */
  u_int32 source;        /* network source (multicast address) */
  u_int16 port;          /* UDP port */
} RD_hdr_t;

typedef struct {
  u_int16 length;    /* length of packet, including this header (may 
                        be smaller than plen if not whole packet recorded) */
  u_int16 plen;      /* actual header+payload length for RTP, 0 for RTCP */
  u_int32 offset;    /* milliseconds since the start of recording */
} RD_packet_t;
</PRE>
  <TR>
    <TD><SAMP>header</SAMP> 
    <TD>like "dump", but don't save audio/video payload 
  <TR>
    <TD><SAMP>payload</SAMP> 
    <TD>only audio/video payload 
  <TR>
    <TD><SAMP>ascii</SAMP> 
    <TD rowSpan=4>text 
    <TD>parsed packets (default), suitable for <CODE><A 
      href="http://www.cs.columbia.edu/irt/software/rtptools/#rtpsend">rtpsend</A></CODE>:<BR><PRE>844525628.240592 RTP len=176 from=131.136.234.103:46196 v=2 p=0 x=0
   cc=0 m=0 pt=5 (IDVI,1,8000) seq=28178 ts=954052737 ssrc=0x124e2b58
844525628.243123 RTCP len=128 from=139.88.27.43:53154 
 (RR ssrc=0x125bd36f p=0 count=1 len=7
(ssrc=bc64b658 fraction=0.503906 lost=4291428375 last_seq=308007791
  jit=17987961 lsr=2003335488 dlsr=825440558)
 )
 (SDES p=0 count=1 len=23
  (src=0x125bd36f CNAME="yywhy@139.88.27.43" NAME="Michael Baldizzi
  (NASA LeRC)" TOOL="vat-4.0a8" EMAIL="mbaldizzi@lerc.nasa.gov" )
 )
</PRE>
  <TR>
    <TD><SAMP>hex</SAMP> 
    <TD>like <SAMP>ascii</SAMP>, but with hex dump of payload 
  <TR>
    <TD><SAMP>rtcp</SAMP> 
    <TD>like <SAMP>ascii</SAMP>, but only RTCP packets 
  <TR>
    <TD><SAMP>short</SAMP> 
    <TD>RTP or vat data in tabular form: <VAR>[-]time ts [seq]</VAR>, where a 
      - indicates a set marker bit. The sequence number <VAR>seq</VAR> is only 
      used for RTP packets. <PRE>844525727.800600 954849217 30667
844525727.837188 954849537 30668
844525727.877249 954849857 30669
844525727.922518 954850177 30670
</PRE></TR></TBODY></TABLE>
<H2><A name=rtpsend>rtpsend</A></H2>
<P><VAR>rtpsend</VAR> sends an RTP packet stream with configurable parameters. 
This is intended to test RTP features. The RTP or RTCP headers are read from a 
file, generated by hand, a test program or <A 
href="http://www.cs.columbia.edu/irt/software/rtptools/#rtpdump">rtpdump</A> 
(format "ascii"). 
<P><SAMP>rtpsend [-a] [-l]</SAMP> [<SAMP>-s</SAMP> <VAR>sourceport</VAR>] 
[<SAMP>-f</SAMP> <VAR>file</VAR>] <VAR>destination/port</VAR>[<VAR>/ttl</VAR>] 
<P>Packets are sent with a time-to-live value <VAR>ttl</VAR>. 
<P>If data is read from a <VAR>file</VAR> instead of stdin, the 
<SAMP>-l</SAMP>(loop) flag resends the same sequence of packets again and again. 

<P>The source port(localport) for outgoing packets can be set with the 
<SAMP>-s</SAMP> flag. A random port is chosen if this flag is not specified. 
<P>If the <SAMP>-a</SAMP> flag is specified, <SAMP>rtpsend</SAMP> includes a 
router alert IP option in RTCP packets. This is used by the YESSIR resource 
reservation protoccol. 
<P>The file <VAR>file</VAR> contains the description of the packets to be sent. 
Within the file, each entry starts with a time value, in seconds, relative to 
the beginning of the trace. The time value must appear at the beginning of a 
line, without white space. Within an RTP or RTCP packet description, parameters 
may appear in any order, without white space around the equal sign. Lines are 
continued with initial white space on the next line. Comment lines start with #. 
Strings are enclosed in quotation marks. <PRE>&lt;<VAR>time</VAR>&gt; RTP 
   v=&lt;<VAR>version</VAR>&gt;
   p=&lt;<VAR>padding</VAR>&gt;
   x=&lt;<VAR>extension</VAR>&gt;
   m=&lt;<VAR>marker</VAR>&gt;
   pt=&lt;<VAR>payload type</VAR>&gt;
   ts=&lt;<VAR>time stamp</VAR>&gt;
   seq=&lt;<VAR>sequence number</VAR>&gt;
   ssrc=&lt;<VAR>SSRC</VAR>&gt;
   cc=&lt;<VAR>CSRC count</VAR>&gt;
   csrc=&lt;<VAR>CSRC</VAR>&gt;
   data=&lt;<VAR>hex payload</VAR>&gt;
   ext_type=&lt;<VAR>type of extension</VAR>&gt;
   ext_len=&lt;<VAR>length of extension header</VAR>&gt;
   ext_data=&lt;<VAR>hex extension data</VAR>&gt;
   len=&lt;<VAR>packet size in bytes(including header)</VAR>&gt;
&lt;<VAR>time</VAR>&gt; RTCP (SDES v=&lt;<VAR>version</VAR>&gt; 
              (src=&lt;source&gt; cname="..." name="...")
              (src=&lt;source&gt; ...)
            )
            (SR v=&lt;<VAR>version</VAR>&gt;
              ssrc=&lt;<VAR>SSRC of data source</VAR>&gt;
              p=&lt;<VAR>padding</VAR>&gt;
              count=&lt;<VAR>number of sources</VAR>&gt;
              len=&lt;<VAR>length</VAR>&gt;
              ntp=&lt;<VAR>NTP timestamp</VAR>&gt;
              psent=&lt;<VAR>packet sent</VAR>&gt;
              osent=&lt;<VAR>octets sent</VAR>&gt;
                (ssrc=&lt;<VAR>SSRC of source</VAR>&gt;
                 fraction=&lt;<VAR>loss fraction</VAR>&gt;
                 lost=&lt;<VAR>number lost</VAR>&gt;
                 last_seq=&lt;<VAR>last sequence number</VAR>&gt;
                 jit=&lt;<VAR>jitter</VAR>&gt;
                 lsr=&lt;<VAR>last SR received</VAR>&gt;
                 dlsr=&lt;<VAR>delay since last SR</VAR>&gt;
                ) 
            )
</PRE>
<H2><A name=rtptrans>rtptrans</A></H2><SAMP>rtptrans</SAMP> 
[<VAR>host</VAR>]/<VAR>port</VAR>[/<VAR>ttl</VAR>] 
[<VAR>host</VAR>]/<VAR>port</VAR>[/<VAR>ttl</VAR>] [...] 
<P>rtptrans RTP/RTCP packets arriving from one of the addresses to all other 
addresses. Addresses can be a multicast or unicast. TTL values for unicast 
addresses are ignored. (Actually, doesn't check whether packets are RTP or not.) 

<P>Additionally, the translator can translate VAT packets into RTP packets. VAT 
control packets are translated into RTCP SDES packets with a CNAME and a NAME 
entry. However, this is only intended to be used in the following configuration: 
VAT packets arriving on a multicast connection are translated into RTP and sent 
over a unicast link. RTP packets are not (yet) translated into VAT packets and 
and all packets arriving on unicast links are not changed at all. Therefore, 
currently mainly the following topology is supported: multicast VAT -&gt; 
translator -&gt; unicast RTP; and on the way back it should lokk like this 
multicast VAT &lt;- translator &lt;- unicast VAT. This means that the audio 
agent on the unicast link should be able use both VAT and RTP. 
<H2>Authors</H2>
<P>The rtptools were written by <A 
href="http://new-www.cs.columbia.edu/~hgs">Henning Schulzrinne</A>, with 
enhancements by <A href="http://new-www.cs.columbia.edu/~pingpan">Ping Pan</A> 
and <A href="mailto:at541@columbia.edu">Akira Tsukamoto</A>. rtptrans was 
written by <A href="mailto:sisalem@fokus.gmd.de">Dorgham Sisalem</A> and 
enhanced by <A href="mailto:casner@precept.com">Steve Casner</A>. 
<HR>
<A 
href="http://www.cs.columbia.edu/irt/software/rtptools/ChangeLog.html">Program 
history</A> 
<HR>
<SMALL>Last updated
<SCRIPT type=text/JavaScript>
document.write(document.lastModified)
</SCRIPT>
 by <A href="http://new-www.cs.columbia.edu/~hgs">Henning Schulzrinne</A> 
</SMALL></BODY></HTML>
