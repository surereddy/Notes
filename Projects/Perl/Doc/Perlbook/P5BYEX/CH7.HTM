<html>

<head>

<title>Chapter 7 -- Control Statements</title>



<meta>

</head>

<body TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">

<h1><font SIZE="6" COLOR="#FF0000">Chapter&nbsp;7</font></h1>

<h1><font SIZE="6" COLOR="#FF0000">Control Statements</font></h1>

<hr>

<p>

<center><b><font SIZE="5">CONTENTS</font></b></center>

<ul>

<li><a HREF="#DecisionStatements">

Decision Statements</a>

<ul>

<li><a HREF="#ExampleTheifStatement">

Example: The if Statement</a>

</ul>

<li><a HREF="#LoopStatements">

Loop Statements</a>

<ul>

<li><a HREF="#ExampleIWhileILoops">

Example: <i>While</i> Loops</a>

<li><a HREF="#ExampleIUntilILoops">

Example: <i>Until</i> Loops</a>

<li><a HREF="#ExampleIForILoops">

Example: <i>For</i> Loops</a>

<li><a HREF="#ExampleIForeachILoops">

Example: <i>Foreach</i> Loops</a>

</ul>

<li><a HREF="#JumpKeywords">

Jump Keywords</a>

<ul>

<li><a HREF="#ExampleTheIlastIKeyword">

Example: The <i>last</i> Keyword</a>

<li><a HREF="#ExampleTheInextIKeyword">

Example: The <i>next</i> Keyword</a>

<li><a HREF="#ExampleTheIredoIKeyword">

Example: The <i>redo</i> Keyword</a>

<li><a HREF="#ExampleTheIgotoIKeyword">

Example: The <i>goto</i> Keyword</a>

</ul>

<li><a HREF="#Summary">

Summary</a>

<li><a HREF="#ReviewQuestions">

Review Questions</a>

<li><a HREF="#ReviewExercises">

Review Exercises</a>

</ul>



<hr>

<p>

The last chapter, &quot;Statements,&quot; discussed no-action,

action, and modified statements. This chapter discusses three

more types of statements: decision statements, loop statements,

and jump statements.

<p>

You see how to use the <tt>if</tt>

statement to decide on one or more courses of actions. Loop statements

are used to repeat a series of statements until a given condition

is either true or false. And finally, we'll wrap up the chapter

by looking at jump statements, which let you control program flow

by moving directly to the beginning or the end of a statement

block.

<h2><a NAME="DecisionStatements"><font SIZE="5" COLOR="#FF0000">

Decision Statements</font></a></h2>

<p>

<i>Decision statements </i>use the <i>if </i>keyword to execute

a statement block based on the evaluation of an expression or

to choose between executing one of two statement blocks based

on the evaluation of an expression. They are used quite often.

For example, a program might need to run one code section if a

customer is female and another code section if the customer is

male.

<h3><a NAME="ExampleTheifStatement">

Example: The if Statement</a></h3>

<p>

The syntax for the <tt>if</tt> statement

is the following:

<blockquote>

<pre>

if (CONDITION) {

    # Code block executed

    # if condition is true.

} else {

    # Code block executed

    # if condition is false.

}

</pre>

</blockquote>

<p>

Sometimes you need to choose from multiple statement blocks, such

as when you need to execute a different statement block for each

month. You use the <tt>if...elsif</tt>

statement for this type of decision. The <tt>if...elsif</tt>

statement has this syntax:

<blockquote>

<pre>

if (CONDITION_ONE) {

    # Code block executed

    # if condition one is true.

} elsif (CONDITION_TWO) {

    # Code block executed

    # if condition two is true.

} else {

    # Code block executed

    # if all other conditions are false.

}

</pre>

</blockquote>

<p>

Conditional expressions can use any of the operators discussed

in <a HREF="ch4.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/ch4.htm">Chapter 4</a> &quot;Operators.&quot; Even assignment operators

can be used because the value of an assignment expression is the

value that is being assigned. That last senteNCe may be a bit

confusing, so let's look at an example.

<p>

<img SRC="pseudo.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/pseudo.gif" BORDER="1" ALIGN="RIGHT" WIDTH="31" HEIGHT="34"><p>

<blockquote>

<i>Assign </i><tt><i>$firstVar</i></tt><i>

a value of 10.<br>

Subtract five from </i><tt><i>$firstVar</i></tt><i>

and if the resulting value is true (for instaNCe, not zero), then

execute the statement block.</i>

</blockquote>

<blockquote>

<pre>

$firstVar = 10;

if ($firstVar -= 5) {

    print(&quot;firstVar = $firstVar\n&quot;);

}

</pre>

</blockquote>

<p>

This program displays:

<blockquote>

<pre>

firstVar = 5<br>



</pre>

</blockquote>

<p>

<center>

<table BORDERCOLOR="#000000" BORDER="1" WIDTH="80%">

<tr><td><b>Tip</b></td></tr>

<tr><td>

<blockquote>

If you're a C or C++ programmer, take heed: The curly braces around the statement block are <i>not</i> optional in Perl. Even one-line statement blocks must be surrounded by curly braces.

</blockquote>



</td></tr>

</table>

</center>

<p>

<p>

This example, in addition to demonstrating the use of assignment

operators inside conditional expressions, also shows that the

<tt>else</tt> part of the <tt>if</tt>

statement is optional. If the <tt>else</tt>

part was coded, then it would only be executed when $firstVar

starts out with a value of 5.

<p>

<img SRC="pseudo.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/pseudo.gif" BORDER="1" ALIGN="RIGHT" WIDTH="31" HEIGHT="34"><p>

<blockquote>

<i>Assign </i><tt><i>$firstVar</i></tt><i>

a value of 10.<br>

Subtract five from </i><tt><i>$firstVar</i></tt><i>

and if the resulting value is true (in other words, not zero),

then print </i><tt><i>$firstVar</i></tt><i>.

If not, print &quot;</i><tt><i>firstVar is

zero</i></tt><i>.&quot;</i>

</blockquote>

<blockquote>

<pre>

$firstVar = 5;

if ($firstVar -= 5) {

    print(&quot;firstVar = $firstVar\n&quot;);

} else {

    print(&quot;firstVar is zero\n&quot;);

}

</pre>

</blockquote>

<p>

This program displays:

<blockquote>

<pre>

firstVar is zero

</pre>

</blockquote>

<p>

This example shows the use of the <tt>else</tt>

clause of the <tt>if</tt> statement.

Because the value of <tt>$firstVar</tt>

minus 5 was zero, the statements in the <tt>else</tt>

clause were executed.

<p>

You also can use the <tt>if</tt> statement

to select among multiple statement blocks. The <tt>if...elsif</tt>

form of the statement is used for this purpose.

<p>

<img SRC="pseudo.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/pseudo.gif" BORDER="1" ALIGN="RIGHT" WIDTH="31" HEIGHT="34"><p>

<blockquote>

<i>Initialize </i><tt><i>$month</i></tt><i>

to 2.<br>

If the value of </i><tt><i>$month</i></tt><i>

is 1, then print January.<br>

If the value of </i><tt><i>$month</i></tt><i>

is 2, then print February.<br>

If the value of </i><tt><i>$month</i></tt><i>

is 3, then print March.<br>

For every other value of </i><tt><i>$month</i></tt><i>,

print a message.</i>

</blockquote>

<blockquote>

<pre>

$month = 2;



if ($month == 1) {

    print(&quot;January\n&quot;);

}

elsif ($month == 2) {

    print(&quot;February\n&quot;);

} 

elsif ($month == 3) {

    print(&quot;March\n&quot;);

}

else {

    print(&quot;Not one of the first three months\n&quot;);

}

</pre>

</blockquote>

<p>

This program displays:

<blockquote>

<pre>

February

</pre>

</blockquote>

<p>

The <tt>else</tt> clause at the end

of the <tt>elsif</tt> chain serves

to catch any unknown or unforeseen values and is a good place

to put error messages. Frequently, those error messages should

iNClude the errant value and be written to a log file so that

the errors can be evaluated. After evaluation, you can decide

if the program needs to be modified to handle that unforeseen

value using another <tt>elsif</tt>

clause.

<h2><a NAME="LoopStatements"><font SIZE="5" COLOR="#FF0000">

Loop Statements</font></a></h2>

<p>

A loop is used to repeat the execution of a statement block until

a certain condition is reached. A loop can be used to iterate

through an array looking for a value. Loops  also can be used

to count quantities. Actually, the number of uses for loops is

pretty much unlimited. There are three types of loops: while loops,

until loops, and for loops.

<h3><a NAME="ExampleIWhileILoops">

Example: <i>While</i> Loops</a></h3>

<p>

<tt><i>While</i></tt><i> </i>loops

are used to repeat a block of statements while some condition

is true. There are two forms of the loop: one where the condition

is checked before the statements are executed (the <tt>do..while</tt>

loop), and one in which the condition is checked after the statements

are executed (the <tt>while</tt> loop).

<p>

The <tt>do...while</tt> loop has this

syntax:

<blockquote>

<pre>

do {

    STATEMENTS

} while (CONDITION);

The while loop has this syntax:

while (CONDITION) {

    STATEMENTS

}

continue {

    STATEMENTS

}

</pre>

</blockquote>

<p>

The statements in the <tt>continue</tt>

block of the <tt>while</tt> loop are

executed just before the loop starts the next iteration. The <tt>continue</tt>

block  rarely is used. However, you can see it demonstrated in

the section, &quot;Example: Using the <tt>-n</tt>

and <tt>-p</tt> Options,&quot; in

<a HREF="ch17.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/ch17.htm">Chapter 17</a>, &quot;Using Command-Line Options.&quot;

<p>

Which type you use for any particular task is entirely dependent

on your needs at the time. The statement block of a <tt>do...while</tt>

loop always will be executed at least oNCe. This is because the

condition is checked after the statement block is executed rather

than before. Here is an example of the <tt>do...while</tt>

loop.

<p>

<img SRC="pseudo.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/pseudo.gif" BORDER="1" ALIGN="RIGHT" WIDTH="31" HEIGHT="34"><p>

<blockquote>

<i>Initialize </i><tt><i>$firstVar</i></tt><i>

to 10.<br>

Start the </i><tt><i>do...while</i></tt><i>

loop.<br>

Print the value of $firstVar.<br>

INCrement $firstVar.<br>

Check the </i><tt><i>while</i></tt><i>

condition; if true, jump back to the start of the statement block.

<br>

Print the value of </i><tt><i>$firstVar</i></tt><i>.</i>

</blockquote>

<blockquote>

<pre>

$firstVar = 10;

do {

    print(&quot;inside:  firstVar = $firstVar\n&quot;);

    $firstVar++;

} while ($firstVar &lt; 2);



print(&quot;outside: firstVar = $firstVar\n&quot;);

</pre>

</blockquote>

<p>

This program displays:

<blockquote>

<pre>

inside:  firstVar = 10

outside: firstVar = 11

</pre>

</blockquote>

<p>

This example shows that the statement block is executed even though

the condition <tt>$firstVar &lt; 2</tt>

is false when the loop starts. This ability occasionally comes

in handy while counting down-such as when printing pages of a

report.

<p>

<img SRC="pseudo.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/pseudo.gif" BORDER="1" ALIGN="RIGHT" WIDTH="31" HEIGHT="34"><p>

<blockquote>

<i>Initialize </i><tt><i>$numPages</i></tt><i>

to 10.<br>

Start the </i><tt><i>do...while</i></tt><i>

loop.<br>

Print a page.<br>

Decrement </i><tt><i>$numPages</i></tt><i>

and then loop if the condition is still true.</i>

</blockquote>

<blockquote>

<pre>

$numPages = 10;

do {

    printPage();

} while (--$numPages);

</pre>

</blockquote>

<p>

When this loop is done, all of the pages will have been displayed.

This type of loop would be used when you know that there always

will be pages to process. Notice that because the predecrement

operator is used, the <tt>$numPages</tt>

variable is decremented before the condition expression is evaluated.

<p>

If you need to ensure that the statement block does not get executed,

then you need to use the <tt>while</tt>

statement.

<p>

<img SRC="pseudo.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/pseudo.gif" BORDER="1" ALIGN="RIGHT" WIDTH="31" HEIGHT="34"><p>

<blockquote>

<i>Initialize </i><tt><i>$firstVar</i></tt><i>

to 10.<br>

Start the </i><tt><i>while</i></tt><i>

loop and test the condition. If false, don't execute the statement

block.<br>

Print the value of </i><tt><i>$firstVar</i></tt><i>.

<br>

INCrement </i><tt><i>$firstVar</i></tt><i>.

<br>

Jump back to the start of the statement block and test the condition

again.<br>

Print the value of </i><tt><i>$firstVar</i></tt><i>.</i>

</blockquote>

<blockquote>

<pre>

$firstVar = 10;

while ($firstVar &lt; 2) {

    print(&quot;inside:  firstVar = $firstVar\n&quot;);

    $firstVar++;

};

print(&quot;outside: firstVar = $firstVar\n&quot;);

</pre>

</blockquote>

<p>

This program displays:

<blockquote>

<pre>

outside: firstVar = 10

</pre>

</blockquote>

<p>

This example shows that the statement block is never evaluated

if the condition is false when the <tt>while</tt>

loop starts. Of course, it's more common to use <tt>while</tt>

loops that actually execute the statement block-like the following:

<p>

<img SRC="pseudo.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/pseudo.gif" BORDER="1" ALIGN="RIGHT" WIDTH="31" HEIGHT="34"><p>

<blockquote>

<i>Initialize </i><tt><i>$firstVar</i></tt><i>

to 10.<br>

Start the </i><tt><i>while</i></tt><i>

loop and test the condition.<br>

Print the value of </i><tt><i>$firstVar</i></tt><i>.

<br>

INCrement </i><tt><i>$firstVar</i></tt><i>.

<br>

Jump back to the start of the statement block and test the condition

again.<br>

Print the value of </i><tt><i>$firstVar</i></tt><i>.</i>

</blockquote>

<blockquote>

<pre>

$firstVar = 10;

while ($firstVar &lt; 12) {

    print(&quot;inside:  firstVar = $firstVar\n&quot;);

    $firstVar++;

};

print(&quot;outside: firstVar = $firstVar\n&quot;);

</pre>

</blockquote>

<p>

This program displays:

<blockquote>

<pre>

inside:  firstVar = 10

inside:  firstVar = 11

outside: firstVar = 12

</pre>

</blockquote>

<p>

It's important to note that the value of <tt>$firstVar</tt>

ends up as 12 and not 11 as you might expect upon casually looking

at the code. When <tt>$firstVar</tt>

is still 11, the condition is true, so the statement block is

executed again, thereby iNCrementing <tt>$firstVar</tt>

to 12. Then, the next time the condition is evaluated, it is false

and the loop ends with <tt>$firstVar</tt>

equal to 12.

<h3><a NAME="ExampleIUntilILoops">

Example: <i>Until</i> Loops</a></h3>

<p>

<tt><i>Until</i></tt> loops are used

to repeat a block of statements while some condition is false.

Like the previous <tt>while</tt> loop,

there are also two forms of the <tt>until</tt>

loop: one where the condition is checked before the statements

are executed (the <tt>do...until</tt>

loop), and one in which the condition is checked after the statements

are executed (the <tt>until</tt> loop).

<p>

The <tt>do...until</tt> loop has this

syntax:

<blockquote>

<pre>

do {

    STATEMENTS

} until (CONDITION);

The until loop has this syntax:



until (CONDITION) {

    STATEMENTS

}

</pre>

</blockquote>

<p>

Again, the loop type you use is dependent on your needs at the

time. Here is an example of the <tt>do...until</tt>

loop.

<p>

<img SRC="pseudo.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/pseudo.gif" BORDER="1" ALIGN="RIGHT" WIDTH="31" HEIGHT="34"><p>

<blockquote>

<i>Initialize </i><tt><i>$firstVar</i></tt><i>

to 10.<br>

Start the </i><tt><i>do..until</i></tt><i>

loop.<br>

Print the value of </i><tt><i>$firstVar</i></tt><i>.

<br>

INCrement </i><tt><i>$firstVar</i></tt><i>.

<br>

Check the </i><tt><i>until</i></tt><i>

condition; if false, jump back to the start of the statement block.

<br>

Print the value of </i><tt><i>$firstVar</i></tt><i>.</i>

</blockquote>

<blockquote>

<pre>

$firstVar = 10;

do {

    print(&quot;inside:  firstVar = $firstVar\n&quot;);

    $firstVar++;

} until ($firstVar &lt; 2);



print(&quot;outside: firstVar = $firstVar\n&quot;);

</pre>

</blockquote>

<p>

This program displays:

<blockquote>

<pre>

inside:  firstVar = 10

inside:  firstVar = 11

inside:  firstVar = 12

inside:  firstVar = 13

inside:  firstVar = 14

...

</pre>

</blockquote>

<p>

This loop continues forever because the condition can never be

true. <tt>$firstVar</tt> starts out

greater than 2 and is iNCremented inside the loop. Therefore,

this is an <i>endless </i>loop.<br>

<p>

<center>

<table BORDERCOLOR="#000000" BORDER="1" WIDTH="80%">

<tr><td><b>Tip</b></td></tr>

<tr><td>

<blockquote>

If you ever find it hard to understand a conditional expression in a loop statement, try the following: Wrap the entire condition expression inside paren-theses and add == 1 to the right-hand side. The above loop then becomes</blockquote>



</td></tr>

</table>

</center>

<p>

<blockquote>

<pre>

do {

    ...

} until (($firstVar &lt; 2) == 1);

</pre>

</blockquote>

<p>

This example shows that the statement block is executed even though

the condition <tt>$firstVar &lt; 2</tt>

is false when the loop starts. The next example shows the <tt>until</tt>

loop in action, which does not execute the statement block when

the conditional expression is false when the loop starts.

<p>

<img SRC="pseudo.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/pseudo.gif" BORDER="1" ALIGN="RIGHT" WIDTH="31" HEIGHT="34"><p>

<blockquote>

<i>Initialize </i><tt><i>$firstVar</i></tt><i>

to 10.<br>

Start the </i><tt><i>until</i></tt><i>

loop and test the condition. If true, don't execute the state-ment

block.<br>

print the value of </i><tt><i>$firstVar</i></tt><i>.

<br>

INCrement </i><tt><i>$firstVar</i></tt><i>.

<br>

Jump back to the start of the statement block and test the condition

again.<br>

Print the value of </i><tt><i>$firstVar</i></tt><i>.</i>

</blockquote>

<blockquote>

<pre>

$firstVar = 10;

until ($firstVar &lt; 20) {

    print(&quot;inside:  firstVar = $firstVar\n&quot;);

    $firstVar++;

};

print(&quot;outside: firstVar = $firstVar\n&quot;);

</pre>

</blockquote>

<p>

This program displays:

<blockquote>

<pre>

outside: firstVar = 10

</pre>

</blockquote>

<p>

This example shows that the statement block is never evaluated

if the condition is true when the <tt>until</tt>

loop starts. Here is another example of an <tt>until</tt>

loop that shows the statement block getting executed:

<p>

<img SRC="pseudo.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/pseudo.gif" BORDER="1" ALIGN="RIGHT" WIDTH="31" HEIGHT="34"><p>

<blockquote>

<i>Initialize </i><tt><i>$firstVar</i></tt><i>

to 10.<br>

Start the </i><tt><i>while</i></tt><i>

loop and test the condition.<br>

Print the value of </i><tt><i>$firstVar</i></tt><i>.

<br>

INCrement </i><tt><i>$firstVar</i></tt><i>.

<br>

Jump back to the start of the statement block and test the condition

again.<br>

Print the value of </i><tt><i>$firstVar</i></tt><i>.</i>

</blockquote>

<blockquote>

<pre>

$firstVar = 10;

until ($firstVar &gt; 12) {

    print(&quot;inside:  firstVar = $firstVar\n&quot;);

    $firstVar++;

};

print(&quot;outside: firstVar = $firstVar\n&quot;);

</pre>

</blockquote>

<p>

This program displays:

<blockquote>

<pre>

inside:  firstVar = 10

inside:  firstVar = 11

inside:  firstVar = 12

outside: firstVar = 13

</pre>

</blockquote>

<h3><a NAME="ExampleIForILoops">

Example: <i>For</i> Loops</a></h3>

<p>

One of the most common tasks in programming is looping a specific

number of times. Whether you need to execute a certain fuNCtion

for every customer in your database or print a page in a report,

the <tt><i>for</i></tt> loop can be

used. Its syntax is:

<blockquote>

<pre>

for (INITIALIZATION; CONDITION; INCREMENT/DECREMENT) {

    STATEMENTS

}

</pre>

</blockquote>

<p>

The <i>initialization</i> expression is executed first-before

the looping starts. It can be used to initialize any variables

that are used inside the loop. Of course, this could be done on

the line before the <tt>for</tt> loop.

However, iNCluding the initialization inside the <tt>for</tt>

statement aids in identifying the loop variables.

<p>

When initializing variables, be sure not to confuse the equality

operator (<tt>==</tt>) with the assignment

operator (<tt>=</tt>). The following

is an example of what this error could look like:

<blockquote>

<pre>

for ($index == 0; $index &lt; 0; $index++)

</pre>

</blockquote>

<p>

One of the equal signs should be removed. If you think you are

having a problem with programming the <tt>for</tt>

loop, make sure to check out the operators.

<p>

The <i>condition</i> expression is used to determine whether the

loop should continue or be ended. When the condition expression

evaluates to false, the loop will end.

<p>

The <i>iNCrement/decrement </i>expression is used to modify the

loop variables in some way each time the code block has been executed.

Here is an example of a basic <tt>for</tt>

loop:

<p>

<img SRC="pseudo.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/pseudo.gif" BORDER="1" ALIGN="RIGHT" WIDTH="31" HEIGHT="34"><p>

<blockquote>

<i>Start the for loop by initializing </i><tt><i>$firstVar</i></tt><i>

to zero. The </i><tt><i>$firstVar</i></tt><i>

variable will be iNCremented each time the statement block is

executed. The statement block will be executed as long as </i><tt><i>$firstVar</i></tt><i>

is less than 100.<br>

Print the value of </i><tt><i>$firstVar</i></tt><i>

each time through the loop.</i>

</blockquote>

<blockquote>

<pre>

for ($firstVar = 0; $firstVar &lt; 100; $firstVar++) {

    print(&quot;inside:  firstVar = $firstVar\n&quot;);

}

</pre>

</blockquote>

<p>

This program will display:

<blockquote>

<pre>

inside:  firstVar = 0

inside:  firstVar = 1

...

inside:  firstVar = 98

inside:  firstVar = 99

</pre>

</blockquote>

<p>

This program will display the numbers 0 through 99. When the loop

is over, <tt>$firstVar</tt> will be

equal to 100.

<p>

<tt>For</tt> loops also can be used

to count backwards.

<p>

<img SRC="pseudo.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/pseudo.gif" BORDER="1" ALIGN="RIGHT" WIDTH="31" HEIGHT="34"><p>

<blockquote>

<i>Start the </i><tt><i>for</i></tt><i>

loop by initializing </i><tt><i>$firstVar</i></tt><i>

to 100. The </i><tt><i>$firstVar</i></tt><i>

variable will be decremented each time the statement block is

executed. And the statement block will be executed as long as

</i><tt><i>$firstVar</i></tt><i> is

greater than 0.<br>

Print the value of </i><tt><i>$firstVar</i></tt><i>

each time through the loop.</i>

</blockquote>

<blockquote>

<pre>

for ($firstVar = 100; $firstVar &gt; 0; $firstVar--) {

    print(&quot;inside:  firstVar = $firstVar\n&quot;);

}

</pre>

</blockquote>

<p>

This program will display:

<blockquote>

<pre>

inside:  firstVar = 100

inside:  firstVar = 99

...

inside:  firstVar = 2

inside:  firstVar = 1

</pre>

</blockquote>

<p>

You can use the comma operator to evaluate two expressions at

oNCe in the initialization and the iNCrement/decrement expressions.

<p>

<img SRC="pseudo.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/pseudo.gif" BORDER="1" ALIGN="RIGHT" WIDTH="31" HEIGHT="34"><p>

<blockquote>

<i>Start the </i><tt><i>for</i></tt><i>

loop by initializing </i><tt><i>$firstVar</i></tt><i>

to 100 and </i><tt><i>$secondVar</i></tt><i>

to 0. The </i><tt><i>$firstVar</i></tt><i>

variable will be decremented and </i><tt><i>$secondVar</i></tt><i>

will be iNCremented each time the statement block is executed.

The statement block will be executed as long as </i><tt><i>$firstVar</i></tt><i>

is greater than 0.<br>

Print the value of </i><tt><i>$firstVar</i></tt><i>

and </i><tt><i>$secondVar</i></tt><i>

each time through the loop.</i>

</blockquote>

<blockquote>

<pre>

for ($firstVar = 100, $secondVar = 0;

     $firstVar &gt; 0;

     $firstVar--, $secondVar++) {



        print(&quot;inside:  firstVar = $firstVar  secondVar = $secondVar\n&quot;);



}

</pre>

</blockquote>

<p>

This program will display:

<blockquote>

<pre>

inside:  firstVar = 100  secondVar = 0

inside:  firstVar = 99  secondVar = 1

...

inside:  firstVar = 2  secondVar = 98

inside:  firstVar = 1  secondVar = 99<br>



</pre>

</blockquote>

<p>

<center>

<table BORDERCOLOR="#000000" BORDER="1" WIDTH="80%">

<tr><td><b>Note</b></td></tr>

<tr><td>

<blockquote>

The comma operator lets you use two expressions where Perl would normally let you have only one. The value of the statement becomes the value of the last expression evaluated.</blockquote>



</td></tr>

</table>

</center>

<p>

<p>

A more common use of the comma operator might be to initialize

some flag variables that you expect the loop to change. This next

example will read the first 50 lines of a file. If the end of

the file is reached before the last line is read, the <tt>$endOfFile</tt>

flag variable will be set to 1.

<p>

<img SRC="pseudo.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/pseudo.gif" BORDER="1" ALIGN="RIGHT" WIDTH="31" HEIGHT="34"><p>

<blockquote>

<i>Start the for loop by initializing the end of file flag variable

to zero to indicate false, then set </i><tt><i>$firstVar</i></tt><i>

to 0. The </i><tt><i>$firstVar</i></tt><i>

variable will be iNCremented each time the statement block is

executed. The statement block will be executed as long as </i><tt><i>$firstVar</i></tt><i>

is less than 50.<br>

Print the value of </i><tt><i>$firstVar</i></tt><i>

and </i><tt><i>$secondVar</i></tt><i>

each time through the loop.</i>

</blockquote>

<blockquote>

<pre>

for ($endOfFile = 0, $firstVar = 0; $firstVar &lt; 50; 

    $firstVar++, $secondVar++) {

    if (readLine() == 0)

        $endOfFile = 1;

}

</pre>

</blockquote>

<p>

If the <tt>$endOfFile</tt> variable

is 1 when the loop ends, then you know the file has less than

50 lines.

<h3><a NAME="ExampleIForeachILoops">

Example: <i>Foreach</i> Loops</a></h3>

<p>

Arrays are so useful that Perl provides a special form of the

<tt>for</tt> statement just for them.

The <tt><i>foreach</i></tt> statement

is used solely to iterate over the elements of an array. It is

very handy for finding the largest element, printing the elements,

or simply seeing if a given value is a member of an array.

<blockquote>

<pre>

foreach LOOP_VAR (ARRAY) {

    STATEMENTS

}

</pre>

</blockquote>

<p>

The loop variable is assigned the value of each array element,

in turn until the end of the array is reached. Let's see how to

use the <tt>foreach</tt> statement

to find the largest array element.

<p>

<img SRC="pseudo.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/pseudo.gif" BORDER="1" ALIGN="RIGHT" WIDTH="31" HEIGHT="34"><p>

<blockquote>

<i>Call the </i><tt><i>max()</i></tt><i>

fuNCtion twice with different parameters each time.<br>

Define the </i><tt><i>max()</i></tt><i>

fuNCtion.<br>

Create a local variable, </i><tt><i>$max</i></tt><i>,

then get the first element from the parameter array.<br>

Loop through the parameter array comparing each element to </i><tt><i>$max</i></tt><i>,if

the current element is greater than </i><tt><i>$max</i></tt><i>.

<br>

Return the value of </i><tt><i>$max</i></tt><i>.</i>

</blockquote>

<blockquote>

<pre>

print max(45..121, 12..23) . &quot;\n&quot;;

print max(23..34, 356..564) . &quot;\n&quot;;



sub max {

    my($max) = shift(@_);



    foreach $temp (@_) {

        $max = $temp if $temp &gt; $max;

    }

    return($max);

}

</pre>

</blockquote>

<p>

This program displays:

<blockquote>

<pre>

121

564

</pre>

</blockquote>

<p>

There are a couple of important things buried in this example.

One is the use of the <tt>shift()</tt>

fuNCtion to value a local variable <i>and </i>remove the first

element of the parameter array from the array at the same time.

If you use <tt>shift()</tt> all by

itself, the value of the first element is lost.

<p>

The other important thing is the use of $temp inside the <tt>foreach</tt>

loop. Some Perl programmers dislike using temporary variables

in this manner. Perl has an internal variable, <tt>$_</tt>,

that can be used instead. If no loop variable is specified, <tt>$_</tt>

will be assigned the value of each array element as the loop iterates.

<p>

<img SRC="pseudo.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/pseudo.gif" BORDER="1" ALIGN="RIGHT" WIDTH="31" HEIGHT="34"><p>

<blockquote>

<i>Print the return value from the </i><tt><i>max()</i></tt><i>

fuNCtion.<br>

</i>Define the <tt><i>max()</i></tt>

fuNCtion.<br>

<i>Create a local variable, </i><tt><i>$max</i></tt><i>,

then get the first element from the parameter array.<br>

Loop through the parameter array comparing each element to </i><tt><i>$max</i></tt><i>,

if the current element is greater than </i><tt><i>$max</i></tt><i>:

<br>

Return the value of </i><tt><i>$max</i></tt><i>.</i>

</blockquote>

<blockquote>

<pre>

print max(45..121, 12..23) . &quot;\n&quot;;

print max(23..34, 356..564) . &quot;\n&quot;;



sub max {

    my($max) = shift(@_);



    foreach (@_) {

        $max = $_ if $_ &gt; $max;

    }

    return($max);

}

</pre>

</blockquote>

<p>

The third item has nothing to do with the <tt>foreach</tt>

loop, at least not directly. But, this seems like a good time

to mention it. The statement inside the loop  also could be written

in the following way:

<blockquote>

<pre>

$max = $_ if $max &lt; $_;

</pre>

</blockquote>

<p>

with the sense of the operator reversed. However, notice that

it will take more effort to understand what the statement-as a

whole-is doing. The reader of your program knows that the fuNCtion

is looking for the greatest value in a list. If the less than

operator is used, it will contradict the stated purpose of your

fuNCtion-at least until the reader figures out the program logic.

Whenever possible, structure your program logic to agree with

the main premise of the fuNCtion.

<p>

Now for the fourth, and final, item regarding this small program.

Notice that the fuNCtion name and the local variable name are

the same except for the beginning dollar sign. This shows that

fuNCtion names and variable names use different namespaces.

<p>

Remember namespaces? They were mentioned in <a HREF="ch3.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/ch3.htm">Chapter 3</a> &quot;Variables.&quot;

<p>

Using the <tt>foreach</tt> statement

requires using a little bit of caution because the local variable

(either <tt>$_</tt> or the one you

specify) accesses the array elements using the call by refereNCe

scheme. When call by refereNCe is used, changing the value in

one place (such as inside the loop) also changes the value in

the main program.

<p>

<img SRC="pseudo.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/pseudo.gif" BORDER="1" ALIGN="RIGHT" WIDTH="31" HEIGHT="34"><p>

<blockquote>

<i>Create an array from 1 to 10 with 5 repeated.<br>

Print the array.<br>

Loop through the array replacing any elements equal to 5 with

&quot;</i><tt><i>**</i></tt><i>&quot;.

<br>

Print the array.</i>

</blockquote>

<blockquote>

<pre>

@array = (1..5, 5..10);

print(&quot;@array\n&quot;);



foreach (@array) {

    $_ = &quot;**&quot; if ($_ == 5);

}

print(&quot;@array\n&quot;);

</pre>

</blockquote>

<p>

This program displays:

<blockquote>

<pre>

1 2 3 4 5 5 6 7 8 9 10

1 2 3 4 ** ** 6 7 8 9 10<br>



</pre>

</blockquote>

<p>

<center>

<table BORDERCOLOR="#000000" BORDER="1" WIDTH="80%">

<tr><td><b>Caution</b></td></tr>

<tr><td>

<blockquote>

If you use the <tt>foreach</tt> loop to change the value of the array elements, be sure to comment your code to explain the situation and why this method was used.

</blockquote>



</td></tr>

</table>

</center>

<p>

<h2><a NAME="JumpKeywords"><font SIZE="5" COLOR="#FF0000">

Jump Keywords</font></a></h2>

<p>

Perl has four keywords that let you change the flow of your programs.

Table 7.1 lists the keywords along with a short description.<br>

<p>

<center><b>Table 7.1&nbsp;&nbsp;Perl's Jump Keywords</b></center>

<p>

<center>

<table BORDERCOLOR="#000000" BORDER="1" WIDTH="80%">

<tr><td WIDTH="91"><i>Keywords</i></td><td WIDTH="423"><i>Description</i>

</td></tr>

<tr><td WIDTH="91"><tt>last</tt></td>

<td WIDTH="423">Jumps out of the current statement block.</td></tr>

<tr><td WIDTH="91"><tt>next</tt></td>

<td WIDTH="423">Skips the rest of the statement block and continues with the next iteration of the loop.

</td></tr>

<tr><td WIDTH="91"><tt>redo</tt></td>

<td WIDTH="423">Restarts the statement block.</td></tr>

<tr><td WIDTH="91"><tt>goto</tt></td>

<td WIDTH="423">Jumps to a specified label.</td></tr>

</table>

</center>

<p>

<p>

Each of these keywords is described further in its own section,

which follows.

<h3><a NAME="ExampleTheIlastIKeyword">

Example: The <i>last</i> Keyword</a></h3>

<p>

The <tt>last</tt> keyword is used

to exit from a statement block. This ability is useful if you

are searching an array for a value. When the value is found, you

can stop the loop early.

<p>

<img SRC="pseudo.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/pseudo.gif" BORDER="1" ALIGN="RIGHT" WIDTH="31" HEIGHT="34"><p>

<blockquote>

<i>Create an array holding all 26 letters.<br>

Use a </i><tt><i>for</i></tt><i> loop

to iterate over the array. The index variable will start at zero

and iNCrement while it is less than the number of elements in

the array.<br>

Test the array element to see if it is equal to &quot;</i><tt><i>T</i></tt><i>.&quot;

Notice that the string equality operator is used. If the array

element is &quot;</i><tt><i>T</i></tt><i>,&quot;

then exit the loop.</i>

</blockquote>

<blockquote>

<pre>

@array = (&quot;A&quot;..&quot;Z&quot;);

for ($index = 0; $index &lt; @array; $index++) {

    if ($array[$index] eq &quot;T&quot;) {

        last;

    }

}

print(&quot;$index\n&quot;);

</pre>

</blockquote>

<p>

This program displays:

<blockquote>

<pre>

19

</pre>

</blockquote>

<p>

This loop is straightforward except for the way that it calculates

the number of elements in the array. Inside the conditional expression,

the @array variable is evaluated in an scalar context. The result

is the number of elements in the array.

<p>

When the <tt>last</tt> keyword is

executed, the conditional expression and theiNCrement/decrement

expression are not reevaluated, the statement block is left. Execution

begins again immediately after the ending curly brace.

<p>

You also can use a label with the last keyword to indicate which

loop to exit. A <i>label</i> is a name followed by a colon. Labels'

names usually use all capital letters, but Perl does not insist

on it. When you need to exist a nested loop, labels are a big

help. Let's look at this situation in two steps. Here is a basic

loop:

<p>

<img SRC="pseudo.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/pseudo.gif" BORDER="1" ALIGN="RIGHT" WIDTH="31" HEIGHT="34"><p>

<blockquote>

<i>Loop from 0 to 10 using </i><tt><i>$index</i></tt><i>

as the loop variable.<br>

If </i><tt><i>$index</i></tt><i> is

equal to 5 then exit the loop.<br>

Print the value of </i><tt><i>$index</i></tt><i>

while inside the loop.<br>

Print the value of </i><tt><i>$index</i></tt><i>

after the loop ends.</i>

</blockquote>

<blockquote>

<pre>

for ($index = 0; $index &lt; 10; $index++) {

    if ($index == 5) {

        last;

    }

    print(&quot;loop: index = $index\n&quot;);

}

print(&quot;index = $index\n&quot;);

</pre>

</blockquote>

<p>

This program displays:

<blockquote>

<pre>

loop: index = 0

loop: index = 1

loop: index = 2

loop: index = 3

loop: index = 4

index = 5

</pre>

</blockquote>

<p>

So far, pretty simple. The print statement inside the loop lets

us know that the <tt>$index</tt> variable

is being iNCremented. Now, let's add an inner loop to complicate

things.

<p>

<img SRC="pseudo.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/pseudo.gif" BORDER="1" ALIGN="RIGHT" WIDTH="31" HEIGHT="34"><p>

<blockquote>

<i>Specify a label called </i><tt><i>OUTER_LOOP</i></tt><i>.

<br>

Loop from 0 to 10 using </i><tt><i>$index</i></tt><i>

as the loop variable.<br>

If </i><tt><i>$index</i></tt><i> is

equal to 5, then exit the loop.<br>

Start an inner loop that repeats while </i><tt><i>$index</i></tt><i>

is less than 10.<br>

If </i><tt><i>$index</i></tt><i> is

4, then exit out of both inner and outer loops.<br>

INCrement </i><tt><i>$index</i></tt><i>.

<br>

Print the value of </i><tt><i>$index</i></tt><i>.</i>

</blockquote>

<blockquote>

<pre>

OUTER_LOOP:

    for ($index = 0; $index &lt; 10; $index++) {

        if ($index == 5) {

            last;

        }

        while ($index &lt; 10) {

            if ($index == 4) {

                last OUTER_LOOP;

            }

            print(&quot;inner: index = $index\n&quot;);

            $index++;

        }

       print(&quot;outer: index = $index\n&quot;);

}

print(&quot;index = $index\n&quot;);

</pre>

</blockquote>

<p>

This program displays:

<blockquote>

<pre>

inner: index = 0

inner: index = 1

inner: index = 2

inner: index = 3

index = 4

</pre>

</blockquote>

<p>

The inner <tt>while</tt> loop iNCrements

<tt>$index</tt> while it is less than

10. However, before it can reach 10 it must pass 4, which triggers

the <tt>if</tt> statement and exits

both loops. You can tell that the outer loop also was exited because

the outer print statement is never executed.

<h3><a NAME="ExampleTheInextIKeyword">

Example: The <i>next</i> Keyword</a></h3>

<p>

The <tt>next</tt> keyword lets you

skip the rest of the statement block and start the next iteration.

One use of this behavior could be to select specific array elements

for processing and ignoring the rest. For example:

<p>

<img SRC="pseudo.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/pseudo.gif" BORDER="1" ALIGN="RIGHT" WIDTH="31" HEIGHT="34"><p>

<blockquote>

<i>Create an array of 10 elements.<br>

Print the array.<br>

Iterate over the array.<br>

Ignore the third and fifth element.<br>

Change the current element to an asterisk.<br>

Print the array to verify that it has been changed.</i>

</blockquote>

<blockquote>

<pre>

@array = (0..9);

print(&quot;@array\n&quot;);

for ($index = 0; $index &lt; @array; $index++) {

    if ($index == 3 || $index == 5) {

        next;

    }

    $array[$index] = &quot;*&quot;;

}

print(&quot;@array\n&quot;);

</pre>

</blockquote>

<p>

This program displays:

<blockquote>

<pre>

0 1 2 3 4 5 6 7 8 9

* * * 3 * 5 * * * *

</pre>

</blockquote>

<p>

This example changes every array element, except the third and

fifth, to asterisks regardless of their former values. The next

keyword forces Perl to skip over the assignment statement and

go directly to the iNCrement/decrement expression. You also can

use the next keyword in nested loops.

<p>

<img SRC="pseudo.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/pseudo.gif" BORDER="1" ALIGN="RIGHT" WIDTH="31" HEIGHT="34"><p>

<blockquote>

<i>Define a label called </i><tt><i>OUTER_LOOP</i></tt><i>.

<br>

Start a for loop that iterates from 0 to 3 using </i><tt><i>$row</i></tt><i>

as the loop variable.<br>

Start a for loop that iterates from 0 to 3 using </i><tt><i>$col</i></tt><i>

as the loop variable.<br>

Display the values of </i><tt><i>$row</i></tt><i>

and </i><tt><i>$col</i></tt><i> and

mention that the code is inside the inner loop.<br>

If </i><tt><i>$col</i></tt><i> is

equal to 1, start the next iteration of loop near the label </i><tt><i>OUTER_LOOP</i></tt><i>.

<br>

Display the values of </i><tt><i>$row</i></tt><i>

and </i><tt><i>$col</i></tt><i> and

mention that the code is inside the outer loop.</i>

</blockquote>

<blockquote>

<pre>

OUTER_LOOP: for ($row = 0; $row &lt; 3; $row++) {

                for ($col = 0; $col &lt; 3; $col++) {

                    print(&quot;inner: $row,$col\n&quot;);

                    if ($col == 1) {

                        next OUTER_LOOP;

                    }

                }

                print(&quot;outer: $row,$col\n\n&quot;);

            }

</pre>

</blockquote>

<p>

This program displays:

<blockquote>

<pre>

inner: 0,0

inner: 0,1

inner: 1,0

inner: 1,1

inner: 2,0

inner: 2,1

</pre>

</blockquote>

<p>

You can see that the <tt>next</tt>

statement in the inner loop causes Perl to skip the <tt>print</tt>

statement in the outer loop whenever <tt>$col</tt>

is equal to 1.

<h3><a NAME="ExampleTheIredoIKeyword">

Example: The <i>redo</i> Keyword</a></h3>

<p>

The <tt>redo</tt> keyword causes Perl

to restart the current statement block. Neither the iNCrement/decrement

expression nor the conditional expression is evaluated before

restarting the block. This keyword is usually used when getting

input from outside the program, either from the keyboard or from

a file. It is essential that the conditions that caused the <tt>redo</tt>

statement to execute can be changed so that an endless loop does

not occur.

<p>

This example will demonstrate the <tt>redo</tt>

keyword with some keyboard input:

<p>

<img SRC="pseudo.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/pseudo.gif" BORDER="1" ALIGN="RIGHT" WIDTH="31" HEIGHT="34"><p>

<blockquote>

<i>Start a statement block.<br>

Print a prompt asking for a name.<br>

Read a string from the keyboard. Control is returned to the program

when the user of the program presses the Enter key.<br>

Remove the newline character from the end of the string.<br>

If the string has zero length, it means the user simply pressed

the Enter key without entering a name, so display an error message

and redo the statement block.<br>

Print a thank-you message with the name in uppercase characters.</i>

</blockquote>

<blockquote>

<pre>

print(&quot;What is your name? &quot;);

    $name = &lt;STDIN&gt;;

    chop($name);



    if (! length($name)) {

        print(&quot;Msg: Zero length input. Please try again\n&quot;);

        redo;

    }



    print(&quot;Thank you, &quot; . uc($name) . &quot;\n&quot;);

}<br>



</pre>

</blockquote>

<p>

<center>

<table BORDERCOLOR="#000000" BORDER="1" WIDTH="80%">

<tr><td><b>Tip</b></td></tr>

<tr><td>

<blockquote>

It's worth noting that the statement block in this example acts like a single-time loop construct. You can use any of the jump keywords inside the statement block.</blockquote>



</td></tr>

</table>

</center>

<p>

<p>

The <tt>redo</tt> statement helps

you to have more straightforward program flow. Without it, you

would need to use a <tt>do...until</tt>

loop. For example:

<p>

<img SRC="pseudo.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/pseudo.gif" BORDER="1" ALIGN="RIGHT" WIDTH="31" HEIGHT="34"><p>

<blockquote>

<i>Start a </i><tt><i>do...until</i></tt><i>

statement.<br>

Print a prompt asking for a name.<br>

Read a string from the keyboard. Control is returned to the program

when the user of the program presses the enter key.<br>

Remove the newline character from the end of the string.<br>

If the string has zero length, it means the user simply pressed

the Enter key without entering a name, so display an error message.

<br>

Evaluate the conditional expression. If true, then the user entered

a name and the loop can end.<br>

Print a thank you message with the name in uppercase characters.</i>

</blockquote>

<blockquote>

<pre>

do {

    print(&quot;What is your name? &quot;);

    $name = &lt;STDIN&gt;;

    chomp($name);



    if (! length($name)) {

        print(&quot;Msg: Zero length input. Please try again\n&quot;);

    }



} until (length($name));





print(&quot;Thank you, &quot; . uc($name) . &quot;\n&quot;);

</pre>

</blockquote>

<p>

The <tt>do...until</tt> loop is less

efficient because the length of <tt>$name</tt>

needs to be tested twice. Because Perl has so many ways to do

any given task, it pays to think about which method is more efficient

before implementing your ideas.

<h3><a NAME="ExampleTheIgotoIKeyword">

Example: The <i>goto</i> Keyword</a></h3>

<p>

The <tt>goto</tt> statement lets your

program jump directly to any label. However, because Perl also

provides the loop statements and other jump keywords, its use

is looked down on by most programmers. Using the <tt>goto</tt>

in your programs frequently causes your program logic to become

convoluted. If you write a program that you feel needs a <tt>goto</tt>

in order to run, then use it-but first, try to restructure the

program to avoid it.

<h2><a NAME="Summary"><font SIZE="5" COLOR="#FF0000">

Summary</font></a></h2>

<p>

This chapter was devoted to learning about three types of statements:

decision, loop, and jump. Decision statements use the <tt>if</tt>

keyword to execute a statement block depending on the evaluation

of conditional expressions. Loop statements also execute a statement

block based on a given condition, but they will repeatedly execute

the block until the condition is true or while the condition is

true. Jump statements are used to restart statement blocks, skip

to the next iteration in a loop, and exit loops prematurely.

<p>

The <tt>if</tt> statement can be used

with an <tt>else</tt> clause to choose

one of two statement blocks to execute. Or, you can use the <tt>elsif</tt>

clause to choose from among more than two statement blocks.

<p>

Both the <tt>while </tt>and <tt>until</tt>

loop statements have two forms. One form (the <tt>do...</tt>

form) executes a statement block and then tests a conditional

expression, and the other form tests the condition before executing

the statement block.

<p>

The <tt>for</tt> loops are the most

complicated type of loop because they involve three expressions

in addition to a statement block. There is an initialization expression,

a conditional expression, and an iNCrement/decrement expression.

The initialization expression is evaluated first, then the conditional

expression. If the conditional expression is false, the statement

block is executed. Next, the iNCrement/decrement expression is

evaluated and the loop starts again with the conditional expression.

<p>

<tt>Foreach</tt> loops are used to

iterate through an array. Each element in the array is assigned

to a local variable as the loop progresses through the array.

If you don't specify a local variable, Perl will use the <tt>$</tt>

special variable. You need to be careful when changing the value

of the local variable because it uses the call by refereNCe scheme.

Therefore, any change to the local variable will be reflected

in the value of the array element outside the <tt>foreach</tt>

loop.

<p>

The <tt>last</tt> keyword is used

to jump out of the current statement block. The <tt>next</tt>

keyword is used to skip the rest of the statement block and continue

to the next iteration of the loop. The <tt>redo</tt>

keyword is used to restart the statement block. And finally, the

<tt>goto</tt> keyword should not be

used because the other jump keywords are more descriptive. All

of the jump keywords can be used with labels so they can be used

inside nested loops.

<h2><a NAME="ReviewQuestions"><font SIZE="5" COLOR="#FF0000">

Review Questions</font></a></h2>

<p>

Answers to Review Questions are in Appendix A.

<ol>

<li>What are the four loop keywords?

<li>What are the four jump keywords?

<li>Which form of the <tt>until</tt>

statement is used when the statement block needs to be executed

at least oNCe?

<li>What will be displayed when this program executes?<br>

<br>

<tt>$firstVar = 5;<br>

{<br>

&nbsp;&nbsp;&nbsp;&nbsp;if ($firstVar &gt; 10) {<br>

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;last;

<br>

&nbsp;&nbsp;&nbsp;&nbsp;}<br>

&nbsp;&nbsp;&nbsp;&nbsp;$firstVar++;<br>

&nbsp;&nbsp;&nbsp;&nbsp;redo;<br>

}<br>

print(&quot;$firstVar\n&quot;);</tt>

<li>What is the default name of the local variable in the <tt>foreach</tt>

loop?

<li>How is the <tt>next</tt> keyword

different from the <tt>redo</tt> keyword?

<li>Why is the comma operator useful in the initialization expression

of a <tt>for</tt> loop?

<li>What is the <tt>shift()</tt> fuNCtion

used for?

</ol>

<h2><a NAME="ReviewExercises"><font SIZE="5" COLOR="#FF0000">

Review Exercises</font></a></h2>

<ol>

<li>Use the <tt>while</tt> loop in

a program to count from 1 to 100 in steps of 5.

<li>Use the <tt>for</tt> loop in a

program to print each number from 55 to 1.

<li>Use an <tt>until</tt> loop, the

<tt>next</tt> statement, and the modulus

operator to loop from 0 to 100 and print out &quot;AAA&quot; every

Sixteenth iteration.

<li>Use the <tt>foreach</tt> loop

to determine the smallest element in an array.

<li>Use a <tt>for</tt> loop to iterate

over an array and multiple each element by 3.

<li>Use a <tt>do..until</tt> loop

and the <tt>each()</tt> fuNCtion to

iterate over an associative array looking for an value equal to

&quot;AAA.&quot; When the element is found, the loop should be

ended.

</ol>

<hr>



<center><p><a HREF="ch6.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/ch6.htm"><img SRC="pc.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/pc.gif" BORDER="0" HEIGHT="88" WIDTH="140"></a>

<a HREF="#CONTENTS"><img SRC="cc.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/cc.gif" BORDER="0" HEIGHT="88" WIDTH="140"></a>

<a HREF="index-1.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/index-1.htm"><img SRC="hb.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/hb.gif" BORDER="0" HEIGHT="88" WIDTH="140"></a>

<a HREF="ch8.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/ch8.htm"><img SRC="nc.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/nc.gif" BORDER="0" HEIGHT="88" WIDTH="140"></a>

<hr WIDTH="100%"></p></center>

</body>

</html>

