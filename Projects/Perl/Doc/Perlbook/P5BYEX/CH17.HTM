<html>

<head>

<title>Chapter 17  -- Using Command-Line Options</title>



<meta>

</head>

<body TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">

<h1><font SIZE="6" COLOR="#FF0000">Chapter&nbsp;17</font></h1>

<h1><font SIZE="6" COLOR="#FF0000">Using Command-Line Options</font>

</h1>

<hr>

<p>

<center><b><font SIZE="5">CONTENTS</font></b></center>

<ul>

<li><a HREF="#HowAretheOptionsSpecified">

How Are the Options Specified?</a>

<li><a HREF="#WhatAretheOptions">

What Are the Options?</a>

<ul>

<li><a HREF="#ExampleUsingtheTTFONTSIZEFACECourierFONTTTFONTSIZEOptionFONT">

Example: Using the <tt>-0</tt>

Option</font></a>

<li><a HREF="#ExampleUsingtheTTFONTSIZEFACECouriernFONTTTFONTSIZEandFONTTTFONTSIZEFACECourierpFONTTTFONTSIZEOptionsFONT">

Example: Using the <tt>-n</tt>

and </font><tt>-p</tt>

Options</font></a>

<li><a HREF="#ExampleUsingtheTTFONTSIZEFACECourieriFONTTTFONTSIZEOptionFONT">

Example: Using the <tt>-i</tt>

Option</font></a>

<li><a HREF="#ExampleUsingtheTTFONTSIZEFACECouriersFONTTTFONTSIZEOptionFONT">

Example: Using the <tt>-s</tt>

Option</font></a>

</ul>

<li><a HREF="#Summary">

Summary</a>

<li><a HREF="#ReviewQuestions">

Review Questions</a>

<li><a HREF="#ReviewExercises">

Review Exercises</a>

</ul>



<hr>

<p>

Perl has a wide range of command-line options or switches that

you can use. The options are also called <i>switches</i> because

they can turn on or turn off different behaviors. A thorough knowledge

of the command line switches will enable you to create short one-time

programs to perform odd little tasks. For example, the <tt>-e</tt>

option lets you specify a line of code directly on the command

line instead of creating a script file. You use the <tt>-l</tt>

option to change the line endings in a text file.

<h2><a NAME="HowAretheOptionsSpecified"><font SIZE="5" COLOR="#FF0000">

How Are the Options Specified?</font></a></h2>

<p>

The most frequent way to specify command-line options is on the

command line. All of Perl's options are specified using a dash

and then a single character followed by arguments, if needed.

For example,

<blockquote>

<pre>

 perl -I/usr/~john/iNClude script.pl

</pre>

</blockquote>

<p>

You can combine options with no arguments with the following switch.

The following two command lines are equivalent.

<blockquote>

<pre>

perl -cI/usr/~john/iNClude script.pl

perl -c -I/usr/~john/iNClude script.pl

</pre>

</blockquote>

<p>

You can also specify command-line options inside your script file

using the #! line. Just place them following the directory or

executable name. If you are working on a UNIX system, you are

probably familiar with using the #! notation to tell the system

where to find the Perl executable. The various UNIX systems and

Windows can interpret the #! line in different ways. Therefore,

Perl starts parsing the #! switches immediately after the first

instaNCe of <tt>perl</tt> on the line.

For example, if you started your script with this line:

<blockquote>

<pre>

#!/bin/perl -w

</pre>

</blockquote>

<p>

Then Perl will run with the <tt>-w</tt>

option in effect.<br>

<p>

<center>

<table BORDERCOLOR="#000000" BORDER="1" WIDTH="80%">

<tr><td><b>Caution</b></td></tr>

<tr><td>

<blockquote>

Some UNIX systems will only read the first 32 characters of the #! line. So try to have your options either end before the 32<font SIZE="1">nd</font> position or start after the 32<font SIZE="1">nd</font> position. Placing the options after the 32<font SIZE="1">nd</font> position will help to make your scripts more portable because you will be bypassing one of the iNConsisteNCies of UNIX.

</blockquote>



</td></tr>

</table>

</center>

<p>

<h2><a NAME="WhatAretheOptions"><font SIZE="5" COLOR="#FF0000">

What Are the Options?</font></a></h2>

<p>

Table 17.1 provides a short description of each command-line option

used with Perl. After the table, examples of several options will

be shown.<br>

<p>

<center><b>Table 17.1&nbsp;&nbsp;Perl's Command-Line Options</b></center>

<p>

<center>

<table BORDERCOLOR="#000000" BORDER="1" WIDTH="80%">

<tr><td WIDTH="67"><center><i>Option</i></center></td><td COLSPAN="3" WIDTH="523"><i>Description</i>

</td></tr>

<tr><td WIDTH="67"><center><tt>-0</tt></center>

</td><td COLSPAN="3" WIDTH="523">Lets you specify the record separator (<tt>$/</tt>) as an octal number. For example, -0055 will cause records to end on a dash. If no number is specified, records will end on null characters. The special value of 00 will place 
Perl into paragraph mode. And 0777 will force Perl to read the whole file in one shot because 0777 is not a legal character value. See &quot;Example: Using the <tt>-0</tt> Option&quot; for more information.

</td></tr>

<tr><td WIDTH="67"><center><tt>-a</tt></center>

</td><td COLSPAN="3" WIDTH="523">This option <i>must</i> be used in conjuNCtion with either the <tt>-n</tt> or <tt>-p</tt> option. Using the <tt>-a</tt> option will automatically feed input lines to the <tt>split</tt> fuNCtion. The results of the split are 
placed into the <tt>@F</tt> variable. See &quot;Example: Using the <tt>-n</tt> and <tt>-p</tt> Options&quot; for more information.

</td></tr>

<tr><td WIDTH="67"><center><tt>-c</tt></center>

</td><td COLSPAN="3" WIDTH="523">This option lets you check the syntax of your script without fully executing it. The <tt>BEGIN</tt> blocks and <tt>use</tt> statements are still executed because they are needed by the compilation process.

</td></tr>

<tr><td WIDTH="67"><center><tt>-d</tt></center>

</td><td COLSPAN="3" WIDTH="523">This option lets you start the Perl debugger. See <a HREF="ch16.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/ch16.htm">Chapter 16</a>, &quot;Debugging Perl,&quot; for more information.

</td></tr>

<tr><td WIDTH="67"><center><tt>-D</tt></center>

</td><td COLSPAN="3" WIDTH="523">This option lets you turn on different behaviors related to the debugging process. The following table shows you the sub-options that can be used. Please note, however, that not all releases of Perl can use this feature. I 
know that the hip port of Perl for Win32 can't. If your version of Perl does not have this option, you will see the message <tt>Recompile perl with -DDEBUGGING to use -D switch</tt> when you try it. If you want to watch your script as it executes, use 
-D14. Following is a list of the other values that you can use. You can add the numbers together to specify more than one behavior (such as 8+4+2 = 14) or you can use the letters.

</td></tr>

<tr><td WIDTH="67"><center>&nbsp;</center></td><td WIDTH="78"><center>1</center>

</td><td WIDTH="75"><center>p</center></td><td WIDTH="370">Tokenizing and Parsing

</td></tr>

<tr><td WIDTH="67"><center>&nbsp;</center></td><td WIDTH="78"><center>2</center>

</td><td WIDTH="75"><center>s</center></td><td WIDTH="370">Stack Snapshots

</td></tr>

<tr><td WIDTH="67"><center>&nbsp;</center></td><td WIDTH="78"><center>4</center>

</td><td WIDTH="75"><center>l</center></td><td WIDTH="370">Label Stack Processing

</td></tr>

<tr><td WIDTH="67"><center>&nbsp;</center></td><td WIDTH="78"><center>8</center>

</td><td WIDTH="75"><center>t</center></td><td WIDTH="370">Trace Execution

</td></tr>

<tr><td WIDTH="67"><center>&nbsp;</center></td><td WIDTH="78"><center>16</center>

</td><td WIDTH="75"><center>o</center></td><td WIDTH="370">Operator Node Construction

</td></tr>

<tr><td WIDTH="67"><center>&nbsp;</center></td><td WIDTH="78"><center>32</center>

</td><td WIDTH="75"><center>c</center></td><td WIDTH="370">String/Numeric Conversions

</td></tr>

<tr><td WIDTH="67"><center>&nbsp;</center></td><td WIDTH="78"><center>64</center>

</td><td WIDTH="75"><center>P</center></td><td WIDTH="370">Print Preprocessor Command for -P

</td></tr>

<tr><td WIDTH="67"><center>&nbsp;</center></td><td WIDTH="78"><center>128</center>

</td><td WIDTH="75"><center>m</center></td><td WIDTH="370">Memory Allocation

</td></tr>

<tr><td WIDTH="67"><center>&nbsp;</center></td><td WIDTH="78"><center>256</center>

</td><td WIDTH="75"><center>f</center></td><td WIDTH="370">Format Processing

</td></tr>

<tr><td WIDTH="67"><center>&nbsp;</center></td><td WIDTH="78"><center>512</center>

</td><td WIDTH="75"><center>r</center></td><td WIDTH="370">Regular Expression Parsing

</td></tr>

<tr><td WIDTH="67"><center>&nbsp;</center></td><td WIDTH="78"><center>1024</center>

</td><td WIDTH="75"><center>x</center></td><td WIDTH="370">Syntax Tree Dump

</td></tr>

<tr><td WIDTH="67"><center>&nbsp;</center></td><td WIDTH="78"><center>2048</center>

</td><td WIDTH="75"><center>u</center></td><td WIDTH="370">Tainting Checks

</td></tr>

<tr><td WIDTH="67"><center>&nbsp;</center></td><td WIDTH="78"><center>4096</center>

</td><td WIDTH="75"><center>L</center></td><td WIDTH="370">Memory Leaks (not supported any more)

</td></tr>

<tr><td WIDTH="67"><center>&nbsp;</center></td><td WIDTH="78"><center>8192</center>

</td><td WIDTH="75"><center>H</center></td><td WIDTH="370">Hash Dump - usurps values(&nbsp;)

</td></tr>

<tr><td WIDTH="67"><center>&nbsp;</center></td><td WIDTH="78"><center>16384</center>

</td><td WIDTH="75"><center>X</center></td><td WIDTH="370">Scratchpad Allocation

</td></tr>

<tr><td WIDTH="67"><center>&nbsp;</center></td><td WIDTH="78"><center>32768</center>

</td><td WIDTH="75"><center>D</center></td><td WIDTH="370">Cleaning Up

</td></tr>

<tr><td WIDTH="67"><center><tt>-e</tt></center>

</td><td COLSPAN="3" WIDTH="523">The option lets you specify a single line of code on the command line. This line of code will be executed in lieu of a script file. You can use multiple <tt>-e</tt> options to create a multiple line program-although given the 
probability of a typing mistake, I'd create a script file instead. Semi-colons must be used to end Perl statements just like a normal script.

</td></tr>

<tr><td WIDTH="67"><center><tt>-F</tt></center>

</td><td COLSPAN="3" WIDTH="523">This option modifies the behavior of the <tt>-a</tt> option. It lets you change the regular expression that is used to split the input lines. For example, <tt>-F /:+/</tt> will split the input line whenever one or more colons 
are found. The slashes are optional; they simply delimit the pattern if they are there. I use them for their aesthetic value.

</td></tr>

<tr><td WIDTH="67"><center><tt>-I</tt></center>

</td><td COLSPAN="3" WIDTH="523">This option lets you edit files in-place. It is used in conjuNCtion with the <tt>-n</tt> or <tt>-p</tt> option. See &quot;Example: Using the <tt>-i</tt> option&quot; for more information.

</td></tr>

<tr><td WIDTH="67"><center><tt>-I</tt></center>

</td><td COLSPAN="3" WIDTH="523">This option is used in conjuNCtion with the <tt>-P</tt> option. It tells the C preprocessor where to look for iNClude files. The default search directories iNClude <tt>/usr/iNClude</tt> and <tt>/usr/lib/Perl</tt>.

</td></tr>

<tr><td WIDTH="67"><center><tt>-l</tt></center>

</td><td COLSPAN="3" WIDTH="523">This option turns on line-ending processing. It can be used to set the output line terminator variable (<tt>$/</tt>) by specifying an octal value. See &quot;Example: Using the <tt>-0 </tt>option&quot; for an example of using 
octal numbers. If no octal number is specified, the output line terminator is set equal to the input line terminator (such as <tt>$\ = $/;</tt>).

</td></tr>

<tr><td WIDTH="67"><center><tt>-n</tt></center>

</td><td COLSPAN="3" WIDTH="523">This option places a loop around your script. It will automatically read a line from the diamond operator and then execute the script. It is most often used with the <tt>-e </tt>option. See &quot;Examples: Using the 
<tt>-n</tt> and <tt>-p</tt> Options&quot; for more information.

</td></tr>

<tr><td WIDTH="67"><center><tt>-p</tt></center>

</td><td COLSPAN="3" WIDTH="523">This option places a loop around your script. It will automatically read a line from the diamond operator, execute the script, and then print $_. It is most often used with the <tt>-e</tt> option. See &quot;Examples: Using the 
<tt>-n </tt>and <tt>-p</tt> Options&quot; for more information.

</td></tr>

<tr><td WIDTH="67"><center><tt>-P</tt></center>

</td><td COLSPAN="3" WIDTH="523">This option will invoke the C preprocessor before compiling your script. This might be useful if you have some C programming experieNCe and would like to use the #iNClude and #define facility. The C preprocessor can also be 
used for conditional compilation. Use the <tt>-I</tt> option to tell Perl where to find iNClude files.

</td></tr>

<tr><td WIDTH="67"><center><tt>-s</tt></center>

</td><td COLSPAN="3" WIDTH="523">This option lets you define custom switches for your script. See &quot;Examples: Using the <tt>-s</tt> Option&quot; for more information.

</td></tr>

<tr><td WIDTH="67"><center><tt>-S</tt></center>

</td><td COLSPAN="3" WIDTH="523">This option makes Perl search for the script file using the PATH environment variable. It's mostly used with UNIX systems that don't support the #! Line. The docs/perlrun.htm documentation file that comes with your Perl 
distribution has more information about this option.

</td></tr>

<tr><td WIDTH="67"><center><tt>-T</tt></center>

</td><td COLSPAN="3" WIDTH="523">This UNIX-based option turns on taint checking. Normally, these checks are only done when running <tt>setuid</tt> or <tt>setgid</tt>. The docs/perlsec.htm documentation file that comes with your Perl distribution has more 
information about this option.

</td></tr>

<tr><td WIDTH="67"><center><tt>-u</tt></center>

</td><td COLSPAN="3" WIDTH="523">This UNIX-based option will cause Perl to dump core after compiling your script. See the Perl documentation that came with your Perl distribution for more information.

</td></tr>

<tr><td WIDTH="67"><center><tt>-U</tt></center>

</td><td COLSPAN="3" WIDTH="523">This UNIX-based option will let Perl do unsafe operations. Its use is beyond the scope of this book.

</td></tr>

<tr><td WIDTH="67"><center><tt>-v</tt></center>

</td><td COLSPAN="3" WIDTH="523">This option will display the version and patchlevel of your Perl executable.

</td></tr>

<tr><td WIDTH="67"><center><tt>-w</tt></center>

</td><td COLSPAN="3" WIDTH="523">This option prints warnings about unsafe programming practices. See <a HREF="ch16.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/ch16.htm">Chapter 16</a>, &quot;Debugging Perl,&quot; for more information.

</td></tr>

<tr><td WIDTH="67"><center><tt>-x</tt></center>

</td><td COLSPAN="3" WIDTH="523">This option will let you extract a Perl script from the middle of a file. This feature comes in handy when someone has sent you a script via e-mail. Perl will scan the input file looking for a #! line that contains the word 
<tt>perl</tt>. When it is found, it will execute the script until the __<tt>END</tt>__ token is found. If a directory name is specified after the <tt>-x</tt> option, Perl will switch to that directory before executing the script.

</td></tr>

</table>

</center>

<p>

<p>

As you can see, Perl has quite a few command-line options. Most

of them are designed so that you can do useful things without

needing to create a text file to hold the script. If you are a

system administrator then these options will make you more productive.

You'll be able to manipulate files and data quickly and accurately.

If you're looking to create applications or more complicated programs,

you won't need these options-except for <tt>-w</tt>

and <tt>-d</tt>.

<p>

The rest of the chapter is devoted to demonstrating the <tt>-0</tt>,

<tt>-n</tt>, <tt>-p</tt>,

<tt>-i</tt>, and <tt>-s</tt>

options.

<h3><a NAME="ExampleUsingtheTTFONTSIZEFACECourierFONTTTFONTSIZEOptionFONT">

Example: Using the <tt>-0</tt>

Option</font></a></h3>

<p>

The <tt>-0</tt> option will let you

change the record separator. This is useful if your records are

separated by something other than a newline. Let's use the example

of input records separated by a dash instead of a newline. First,

you need to find out the octal value of the dash character. The

easy way to do this is to covert from the decimal value, which

will be displayed if you run the following command line.

<blockquote>

<pre>

perl -e &quot;print ord('-');&quot;

</pre>

</blockquote>

<p>

This program will display <tt>45</tt>.

Converting 45<font SIZE="1">10</font> into octal results in 55<font SIZE="1">8</font>.

<p>

Next, you'll need an input file to practice with. Listing 17.1

shows a sample input file.

<hr>

<blockquote>

<b>Listing 17.1&nbsp;&nbsp;17LST01.DAT-Test Input File for the

</b><tt><b><font FACE="Courier">-0</font></b></tt><b> Option<br>

</b>

</blockquote>

<blockquote>

<pre>

Veterinarian-Orthopedist-Dentist-

</pre>

</blockquote>

<hr>

<p>

Listing 17.2 holds a program that reads the above data file using

the diamond operators. The program will use the dash character

as an end-of-line indicator.

<p>

<img SRC="pseudo.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/pseudo.gif" BORDER="1" ALIGN="RIGHT" WIDTH="31" HEIGHT="34"><p>

<blockquote>

<i>Set the record separator to be a dash using the #! switch setting

method.<br>

Open a file for input.<br>

Read all of the records into the </i><tt><i>@lines</i></tt><i>

array. One element in </i><tt><i>@lines</i></tt><i>

will be one record.<br>

Close the file.<br>

Iterate over the </i><tt><i>@lines</i></tt><i>

array and print each element.</i>

</blockquote>

<hr>

<blockquote>

<b>Listing 17.2&nbsp;&nbsp;17LST02.PL-Using the </b><tt><b><font FACE="Courier">-0</font></b></tt><b>

Option to Change the Record Separator<br>

</b>

</blockquote>

<blockquote>

<pre>

#!perl -0055



open(FILE, &quot;&lt;test.dat&quot;);

@lines = &lt;FILE&gt;;

close(FILE);



foreach (@lines) {

    print(&quot;$_\n&quot;);

}

</pre>

</blockquote>

<hr>

<p>

<center>

<table BORDERCOLOR="#000000" BORDER="1" WIDTH="80%">

<tr><td><b>Tip</b></td></tr>

<tr><td>

<blockquote>

Instead of using the command-line option, you could also say <tt>$/ = &quot;-&quot;;</tt>. Using the command line is a better option if the line ending changes from input file to input file.

</blockquote>



</td></tr>

</table>

</center>

<p>

<p>

This program will display:

<blockquote>

<pre>

Veterinarian-

Orthopedist-

Dentist-

</pre>

</blockquote>

<p>

Notice that the end-of-line indicator is left as part of the record.

This behavior also happens when the newline is used as the end-of-line

indicator. You can use <tt>chop()</tt>

or <tt>chomp()</tt> to remove the

dash, if needed.

<h3><a NAME="ExampleUsingtheTTFONTSIZEFACECouriernFONTTTFONTSIZEandFONTTTFONTSIZEFACECourierpFONTTTFONTSIZEOptionsFONT">

Example: Using the <tt>-n</tt>

and </font><tt>-p</tt>

Options</font></a></h3>

<p>

The <tt>-n</tt> and <tt>-p</tt>

options wrap your script inside loops. Before looking at specific

examples, let's see what the loops look like and how they are

changed by the <tt>-a</tt> and <tt>-F</tt>

options.

<p>

The <tt>-n</tt> option causes Perl

to execute your script inside the following loop:

<blockquote>

<pre>

while (&lt;&gt;) {

    # your script

}

</pre>

</blockquote>

<p>

The <tt>-p</tt> option uses the same

loop, but adds a <tt>continue</tt>

block so that <tt>$_</tt> will be

printed every time through the loop. If both <tt>-n</tt>

and <tt>-p</tt> are specified on the

command line, the <tt>-p</tt> option

will take precedeNCe. The loop looks like this:

<blockquote>

<pre>

while (&lt;&gt;) {

    # your script

} continue {

    print;

}

</pre>

</blockquote>

<p>

The <tt>-a</tt> option adds a <tt>split()</tt>

fuNCtion call to the beginning of each iteration of the loop so

that the loop looks like this:

<blockquote>

<pre>

while (&lt;&gt;) {

    @F = split(/ /);

    # your script

}

</pre>

</blockquote>

<p>

The <tt>-F</tt> option lets you split

on something besides the space character. If you used <tt>-F/</tt>i<tt>+/</tt>

on the command line, the loop would look like this:

<blockquote>

<pre>

while (&lt;&gt;) {

    @F = split(/i+/);

    # your script

}

</pre>

</blockquote>

<p>

You can use <tt>BEGIN</tt> and <tt>END</tt>

blocks if you need to specify some initialization or cleanup code.

The initialization section might be used to create objects or

to open log files. The cleanup section can be used to display

statistics or close files. For example,

<blockquote>

<pre>

BEGIN {

    # initialization section

    $count = 0;

}



while (&lt;&gt;) {

    # your script

}



END {

    # cleanup section

    print(&quot;The count was $count.\n&quot;);

}

</pre>

</blockquote>

<p>

Next, you'll see some examples of these options in action. Let's

start with a command line that simply displays each line of the

input file-like the <tt>type</tt>

command in DOS and UNIX.

<blockquote>

<pre>

perl -p -e &quot;1;&quot; test.dat

</pre>

</blockquote>

<p>

This command line is equivalent to:

<blockquote>

<pre>

while (&lt;&gt;) {

    1;

} continue {

    print;

}<br>



</pre>

</blockquote>

<p>

<center>

<table BORDERCOLOR="#000000" BORDER="1" WIDTH="80%">

<tr><td><b>Note</b></td></tr>

<tr><td>

<blockquote>

The <tt>1;</tt> statement was used to give Perl something to process. Otherwise, Perl would not have had any statements to execute.

</blockquote>



</td></tr>

</table>

</center>

<p>

<p>

And will display:

<blockquote>

<pre>

David Veterinarian

John Orthopedist

Jeff Dentist

</pre>

</blockquote>

<p>

How about just printing the first word of each line? You could

use this com-<br>

mand line:

<blockquote>

<pre>

perl -p -e &quot;s/\s*(\w+).*/$1/;&quot; test.dat

</pre>

</blockquote>

<p>

which is equivalent to:

<blockquote>

<pre>

while (&lt;&gt;) {

    s/\s*(\w+).*/$1/;

} continue {

    print;

}

</pre>

</blockquote>

<p>

And will display:

<blockquote>

<pre>

David

John

Jeff

</pre>

</blockquote>

<p>

If you have data files that store information in columns, you

can pull out the second column of information like this:

<blockquote>

<pre>

perl -p -e &quot;s/\s*.+\s(.+)\s*/$1\n/;&quot; test.dat

</pre>

</blockquote>

<p>

which will display:

<blockquote>

<pre>

Veterinarian

Orthopedist

Dentist

</pre>

</blockquote>

<p>

You can use the <tt>-a</tt> option

to get access to information stored in columns. For example, you

could also display the second column like this:

<blockquote>

<pre>

perl -p -a -e &quot;$_ = \&quot;$F[1]\n\&quot;;&quot; test.dat

</pre>

</blockquote>

<p>

which is equivalent to

<blockquote>

<pre>

 while (&lt;&gt;) {

    @F = split(/ /);

    $_ = \&quot;$F[1]\n\&quot;;

} continue {

    print;

}

</pre>

</blockquote>

<p>

Notice that you need to escape the double-quotes in the above

command line. If you don't do this you will get an error message.

<h3><a NAME="ExampleUsingtheTTFONTSIZEFACECourieriFONTTTFONTSIZEOptionFONT">

Example: Using the <tt>-i</tt>

Option</font></a></h3>

<p>

The <tt>-i</tt> option lets you modify

files in-place. This means that Perl will automatically rename

the input file and open the output file using the original name.

You can force Perl to create a backup file by specifying a file

extension for the backup file immediately after the <tt>-i</tt>.

For example, <tt>-i.bak</tt>. If no

extension is specified, no backup file will be kept.

<p>

One of the more popular uses for the <tt>-i</tt>

option is to change sequeNCes of characters. This kind of change

normally requires 10 or more lines of code. However, using command-line

options you can do it like this:

<blockquote>

<pre>

perl -p -i.bak -e &quot;s/harry/tom/g;&quot; test.dat

</pre>

</blockquote>

<p>

This command-line will change all occurreNCes of &quot;harry&quot;

to &quot;tom&quot; in the <tt>test.dat</tt>

file.

<h3><a NAME="ExampleUsingtheTTFONTSIZEFACECouriersFONTTTFONTSIZEOptionFONT">

Example: Using the <tt>-s</tt>

Option</font></a></h3>

<p>

The <tt>-s</tt> option lets you create

your own custom switches. Custom switches are placed after the

script name but before any filename arguments. Any custom switches

are removed from the <tt>@ARGV</tt>

array. Then a scalar variable is named after the switch is created

and initialized to 1. For example, let's say that you want to

use a switch called <tt>-useTR</tt>

in a script like the one in Listing 17.3.

<hr>

<blockquote>

<b>Listing 17.3&nbsp;&nbsp;17LST03.PL-Checking for the </b><tt><b><font FACE="Courier">useTR</font></b></tt><b>

Switch<br>

</b>

</blockquote>

<blockquote>

<pre>

if ($useTR) {

    # do TR processing.

    print &quot;useTR=$useTR\n&quot;;

}

</pre>

</blockquote>

<hr>

<p>

You might execute this program using this following command line:

<blockquote>

<pre>

perl -s -w 17lst03.pl -useTR

</pre>

</blockquote>

<p>

and it would display:

<blockquote>

<pre>

useTR=1

</pre>

</blockquote>

<h2><a NAME="Summary"><font SIZE="5" COLOR="#FF0000">

Summary</font></a></h2>

<p>

This chapter covered the different command-line options that you

can use with Perl. The options can also be referred to as switches

because they turn different behaviors on and off.

<p>

The switches can be specified on the command line or using the

#! line inside your script. If you use the #! line, try to place

the options after the 32<font SIZE="1">nd</font> position to avoid

iNConsistent handling by different versions of UNIX.

<p>

The <tt>-n</tt> option is used to

place your script inside of an input loop. The <tt>-p</tt>

option uses the same loop, but also prints the <tt>$_</tt>

variable after each pass through the loop. The <tt>-a</tt>

and <tt>-F</tt> options are used when

you want the input lines to be split into the <tt>@F</tt>

array.

<p>

Another very useful option is <tt>-i</tt>,

which lets you edit files in-place. This option is good when you

are doing a lot of text file manipulation.

<p>

The next chapter, &quot;Using Internet Protocols,&quot; introduces

you to some of the different standards used on the Internet. These

standards let you do activities like read mail, send mail, and

transfer files.

<h2><a NAME="ReviewQuestions"><font SIZE="5" COLOR="#FF0000">

Review Questions</font></a></h2>

<p>

Answers to Review Questions are in Appendix A.

<ol>

<li>What is a command-line option?

<li>What are the two places that the switches can be specified?

<li>What switch should always be used?

<li>Which switch lets you read records that end with the ~ character

instead of the newline?

<li>What two options can be used with the <tt>-n</tt>

option?

<li>How can you execute a script that someone sent you via e-mail?

<li>What happens if you specify both the <tt>-v</tt>

and the <tt>-c</tt> options?

</ol>

<h2><a NAME="ReviewExercises"><font SIZE="5" COLOR="#FF0000">

Review Exercises</font></a></h2>

<ol>

<li>Use the <tt>-v</tt> option to

see the patchlevel of your version of Perl.

<li>Use the chomp or chop fuNCtion to remove the dash from the

end of the records printed by the program in Listing 17.2.

<li>Write a program that uses the <tt>-p</tt>

option to display the third column.

<li>Modify the program written in Exercise 3 to use a <tt>BEGIN</tt>

block to ask the user which column to display.

<li>Create a sample e-mail message that contains a Perl script.

Use the <tt>-x</tt> option to execute

it.

<li>Modify the e-mail message written for Exercise 5 to display

any text that appears after the <tt>__END__</tt>

token. Hint: Use the DATA file handle.

</ol>

<hr>



<center><p><a HREF="ch16.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/ch16.htm"><img SRC="pc.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/pc.gif" BORDER="0" HEIGHT="88" WIDTH="140"></a>

<a HREF="#CONTENTS"><img SRC="cc.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/cc.gif" BORDER="0" HEIGHT="88" WIDTH="140"></a>

<a HREF="index-1.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/index-1.htm"><img SRC="hb.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/hb.gif" BORDER="0" HEIGHT="88" WIDTH="140"></a>

<a HREF="ch18.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/ch18.htm"><img SRC="nc.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/nc.gif" BORDER="0" HEIGHT="88" WIDTH="140"></a>

<hr WIDTH="100%"></p></center>

</body>

</html>

