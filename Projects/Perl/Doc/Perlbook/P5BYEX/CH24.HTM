<HTML>

<HEAD>

<TITLE>Appendix B -- Glossary</TITLE>



<META>

</HEAD>

<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">

<H1><FONT SIZE=6 COLOR=#FF0000>Appendix&nbsp;B</FONT></H1>

<H1><FONT SIZE=6 COLOR=#FF0000>Glossary</FONT></H1>

<HR>

<P>

<CENTER><B><FONT SIZE=5>CONTENTS</FONT></B></CENTER>

<UL>

<LI><A HREF="#Abstraction">

Abstraction</A>

<LI><A HREF="#Alternation">

Alternation</A>

<LI><A HREF="#AlternativeQuotes">

Alternative Quotes</A>

<LI><A HREF="#ANChor">

ANChor</A>

<LI><A HREF="#AnonymousFuNCtionsandVariables">

Anonymous FuNCtions and Variables</A>

<LI><A HREF="#ANSI">

ANSI</A>

<LI><A HREF="#Argument">

Argument</A>

<LI><A HREF="#Array">

Array</A>

<LI><A HREF="#ArrayContext">

Array Context</A>

<LI><A HREF="#ArrayRange">

Array Range</A>

<LI><A HREF="#ArraySlice">

Array Slice</A>

<LI><A HREF="#ArraySplice">

Array Splice</A>

<LI><A HREF="#ASCII">

ASCII</A>

<LI><A HREF="#Assignment">

Assignment</A>

<LI><A HREF="#AssociativeArray">

Associative Array</A>

<LI><A HREF="#Associativitylefttorightamprighttoleft">

Associativity (left-to-right &amp; right-to-left)</A>

<LI><A HREF="#awk">

awk</A>

<LI><A HREF="#Backtracking">

Backtracking</A>

<LI><A HREF="#BinaryMode">

Binary Mode</A>

<LI><A HREF="#BitwiseOperations">

Bitwise Operations</A>

<LI><A HREF="#Block">

Block</A>

<LI><A HREF="#CallbyRefereNCe">

Call by RefereNCe</A>

<LI><A HREF="#CallbyValue">

Call by Value</A>

<LI><A HREF="#CharacterClasses">

Character Classes</A>

<LI><A HREF="#ChildProcess">

Child Process</A>

<LI><A HREF="#Class">

Class</A>

<LI><A HREF="#ClientServer">

Client/Server</A>

<LI><A HREF="#CommandLineOptions">

Command-Line Options</A>

<LI><A HREF="#Compiler">

Compiler</A>

<LI><A HREF="#CompileTimeError">

Compile-Time Error</A>

<LI><A HREF="#CoNCatenation">

CoNCatenation</A>

<LI><A HREF="#Constant">

Constant</A>

<LI><A HREF="#Constructor">

Constructor</A>

<LI><A HREF="#ContextArrayampScalar">

Context (Array &amp; Scalar)</A>

<LI><A HREF="#ControlCharacters">

Control Characters</A>

<LI><A HREF="#CR">

CR</A>

<LI><A HREF="#Database">

Database</A>

<LI><A HREF="#DataType">

Data Type</A>

<LI><A HREF="#Debugger">

Debugger</A>

<LI><A HREF="#Declaration">

Declaration</A>

<LI><A HREF="#Deconstructor">

Deconstructor</A>

<LI><A HREF="#Defined">

Defined</A>

<LI><A HREF="#Delimiter">

Delimiter</A>

<LI><A HREF="#DerefereNCe">

DerefereNCe</A>

<LI><A HREF="#DetailLine">

Detail Line</A>

<LI><A HREF="#DiamondOperator">

Diamond Operator</A>

<LI><A HREF="#Directory">

Directory</A>

<LI><A HREF="#DottedDecimalAddress">

Dotted Decimal Address</A>

<LI><A HREF="#EmptyStringsArraysListsandHashes">

Empty Strings, Arrays, Lists, and Hashes</A>

<LI><A HREF="#ENCapsulation">

ENCapsulation</A>

<LI><A HREF="#ENCryption">

ENCryption</A>

<LI><A HREF="#EndlessLoop">

Endless Loop</A>

<LI><A HREF="#EnvironmentVariables">

Environment Variables</A>

<LI><A HREF="#EOF">

EOF</A>

<LI><A HREF="#EscapeSequeNCe">

Escape SequeNCe</A>

<LI><A HREF="#Expression">

Expression</A>

<LI><A HREF="#FF">

FF</A>

<LI><A HREF="#Field">

Field</A>

<LI><A HREF="#Filehandle">

Filehandle</A>

<LI><A HREF="#Footer">

Footer</A>

<LI><A HREF="#Formats">

Formats</A>

<LI><A HREF="#ftp">

ftp</A>

<LI><A HREF="#FuNCtion">

FuNCtion</A>

<LI><A HREF="#Globbing">

Globbing</A>

<LI><A HREF="#GreedyRegularExpressions">

Greedy Regular Expressions</A>

<LI><A HREF="#Grep">

Grep</A>

<LI><A HREF="#Hash">

Hash</A>

<LI><A HREF="#Header">

Header</A>

<LI><A HREF="#HereDocuments">

Here Documents</A>

<LI><A HREF="#Hexadecimal">

Hexadecimal</A>

<LI><A HREF="#InfiniteLoop">

Infinite Loop</A>

<LI><A HREF="#InheritaNCe">

InheritaNCe</A>

<LI><A HREF="#Initialization">

Initialization</A>

<LI><A HREF="#Interpolation">

Interpolation</A>

<LI><A HREF="#Interpreter">

Interpreter</A>

<LI><A HREF="#InterprocessCommunication">

Inter-process Communication</A>

<LI><A HREF="#IO">

I/O</A>

<LI><A HREF="#IPC">

IPC</A>

<LI><A HREF="#KeyValuePair">

Key-Value Pair</A>

<LI><A HREF="#Label">

Label</A>

<LI><A HREF="#LF">

LF</A>

<LI><A HREF="#Library">

Library</A>

<LI><A HREF="#List">

List</A>

<LI><A HREF="#Literal">

Literal</A>

<LI><A HREF="#Loop">

Loop</A>

<LI><A HREF="#MetaCharacters">

Meta Characters</A>

<LI><A HREF="#Module">

Module</A>

<LI><A HREF="#Namespace">

Namespace</A>

<LI><A HREF="#Object">

Object</A>

<LI><A HREF="#Octal">

Octal</A>

<LI><A HREF="#Operator">

Operator</A>

<LI><A HREF="#Parameter">

Parameter</A>

<LI><A HREF="#Polymorphism">

Polymorphism</A>

<LI><A HREF="#Port">

Port</A>

<LI><A HREF="#PrecedeNCe">

PrecedeNCe</A>

<LI><A HREF="#Procedure">

Procedure</A>

<LI><A HREF="#Protocol">

Protocol</A>

<LI><A HREF="#Range">

Range</A>

<LI><A HREF="#Record">

Record</A>

<LI><A HREF="#RefereNCe">

RefereNCe</A>

<LI><A HREF="#RegularExpression">

Regular Expression</A>

<LI><A HREF="#ReturnValue">

Return Value</A>

<LI><A HREF="#RunTimeError">

Run-Time Error</A>

<LI><A HREF="#Scalar">

Scalar</A>

<LI><A HREF="#ScalarContext">

Scalar Context</A>

<LI><A HREF="#Scope">

Scope</A>

<LI><A HREF="#ShortCircuitOperators">

Short-Circuit Operators</A>

<LI><A HREF="#Signals">

Signals</A>

<LI><A HREF="#Slice">

Slice</A>

<LI><A HREF="#Socket">

Socket</A>

<LI><A HREF="#Splice">

Splice</A>

<LI><A HREF="#Stack">

Stack</A>

<LI><A HREF="#Statement">

Statement</A>

<LI><A HREF="#STDERRSTDINandSTDOUT">

STDERR, STDIN, and STDOUT</A>

<LI><A HREF="#Subroutine">

Subroutine</A>

<LI><A HREF="#TextMode">

Text Mode</A>

<LI><A HREF="#UndefinedValue">

Undefined Value</A>

<LI><A HREF="#Variable">

Variable</A>

<LI><A HREF="#Whitespace">

Whitespace</A>

</UL>



<HR>

<H2><A NAME="Abstraction"><FONT SIZE=5 COLOR=#FF0000>

Abstraction</FONT></A></H2>

<P>

The priNCiple of abstraction means that information can be accessed

in a way that isolates how data is stored from how it is accessed

and used.

<BLOCKQUOTE>

See also <I>Classes</I>, <I>ENCapsulation</I>, <I>InheritaNCe</I>,

and <I>Polymorphism</I>.

</BLOCKQUOTE>

<H2><A NAME="Alternation"><FONT SIZE=5 COLOR=#FF0000>

Alternation</FONT></A></H2>

<P>

Alternation is the term used when a regular expression pattern

chooses between two or more choices. For example, <TT>m/one|two|three/</TT>

will match if the string in <TT>$_</TT>

contains any one of the three character sequeNCes: <TT>one</TT>,

<TT>two</TT>, or <TT>three</TT>.

<BLOCKQUOTE>

See also <I>Regular Expression</I>.

</BLOCKQUOTE>

<H2><A NAME="AlternativeQuotes"><FONT SIZE=5 COLOR=#FF0000>

Alternative Quotes</FONT></A></H2>

<P>

Perl has three distiNCtive types of quotes: single-quotes ('),

double-quotes (&quot;), and back-quotes (`). If you'd like to

be a bit more explicit in quoting, you can use the alternates

that are also provided: q(&nbsp;) for single-quotes, qq(&nbsp;)

for double-quotes, and qx(&nbsp;) for back-quotes. For example,

<TT>q(This)</TT> is equivalent to

<TT>'This'</TT>. Perl also has an

alternative mechanism that can be used to quote a lot of small

single words. For example, <TT>qw(one, two,

three)</TT> is equivalent to <TT>('one',

'two', 'three')</TT>.

<H2><A NAME="ANChor"><FONT SIZE=5 COLOR=#FF0000>

ANChor</FONT></A></H2>

<P>

See <I>Pattern ANChor</I>.

<H2><A NAME="AnonymousFuNCtionsandVariables"><FONT SIZE=5 COLOR=#FF0000>

Anonymous FuNCtions and Variables</FONT></A></H2>

<P>

It is often very useful to create a fuNCtion or variable without

identifying names; these programming elements are called anonymous.

You allude to them using refereNCes. For example, if you initialize

<TT>$foo</TT> using <TT>$foo

= { 'John' =&gt; 10, 'Karen' =&gt; 20}</TT>, then <TT>$foo</TT>

becomes a refereNCe to the anonymous hash. You access the hash

entries by derefereNCing <TT>$foo</TT>.

For example, <TT>@{$foo}{'John'}</TT>

is equal to <TT>10</TT>.

<BLOCKQUOTE>

See also <I>RefereNCe </I>and <I>DerefereNCe</I>.

</BLOCKQUOTE>

<H2><A NAME="ANSI"><FONT SIZE=5 COLOR=#FF0000>

ANSI</FONT></A></H2>

<P>

ANSI refers to the American National Standards Institute. ANSI

serves to administer and coordinate the U.S. private sector voluntary

standardization system. Founded in 1918 by five engineering societies

and three government ageNCies, the Institute remains a private,

nonprofit, membership organization supported by a diverse constitueNCy

of private and public sector organizations. Its home page is <B>http://www.ansi.org/home.html</B>

and you can find many refereNCes to the different standards there.

The American National Standards Institute is located at 11 West

42<FONT SIZE=1>nd</FONT> Street, New York, NY 10036 (Telephone:

(212) 642-4900; Telefax: (212) 398-0023).

<BLOCKQUOTE>

See <I>ASCII</I>.

</BLOCKQUOTE>

<H2><A NAME="Argument"><FONT SIZE=5 COLOR=#FF0000>

Argument</FONT></A></H2>

<BLOCKQUOTE>

See <I>Parameter</I>.

</BLOCKQUOTE>

<H2><A NAME="Array"><FONT SIZE=5 COLOR=#FF0000>

Array</FONT></A></H2>

<P>

An array is a collection of values stored as a unit. I think of

an array in the same way that I think of a list because both are

composed of many things. An array can be composed of numbers,

strings, hashes, or even other arrays. A basic array assignment

looks like this: <TT>@array = (1, 2, 'Three',

4);</TT>.

<H2><A NAME="ArrayContext"><FONT SIZE=5 COLOR=#FF0000>

Array Context</FONT></A></H2>

<P>

See <I>Context </I>(<I>Array &amp; Scalar</I>).

<H2><A NAME="ArrayRange"><FONT SIZE=5 COLOR=#FF0000>

Array Range</FONT></A></H2>

<P>

A range is a shorthand method for generating consecutive elements

of an array. For example, <TT>@array = (1..6)</TT>

is equivalent to <TT>@array = (1, 2, 3, 4,

5, 6)</TT>. You can also create letter ranges-Perl will

automatically generate the missing letters. For example, <TT>@array

= ('AA'..'AD')</TT> is equivalent to <TT>@array

= ('AA', 'AB', 'AC', 'AD')</TT>.

<H2><A NAME="ArraySlice"><FONT SIZE=5 COLOR=#FF0000>

Array Slice</FONT></A></H2>

<P>

A slice is a shorthand method for specifying specific elements

of an array. Instead of specifying one index inside the square

brackets, you can specify multiple indexes. You can either assign

the result of a slice of another array variable or assign new

values to the specified elements. For example, <TT>@array[0,

6]</TT> refers to the 1<FONT SIZE=1>st</FONT> and 7<FONT SIZE=1>th</FONT>

elements in the array. <TT>@array[0..4]</TT>

refers to the elements from 0 to 4-five in all. Slice assignments

look like this: <TT>@array[0..2] = @foo;</TT>

or <TT>@array[0..2] = ('one', $two, 'three');</TT>.

<H2><A NAME="ArraySplice"><FONT SIZE=5 COLOR=#FF0000>

Array Splice</FONT></A></H2>

<P>

A splice is a way to modify an array variable to add, delete,

or replace elements. See the description of the <TT>splice()</TT>

fuNCtion in Appendix C, &quot;FuNCtion List.&quot;

<H2><A NAME="ASCII"><FONT SIZE=5 COLOR=#FF0000>

ASCII</FONT></A></H2>

<P>

ASCII is a bit-mapped character set standard for interchanging

text eNCoded with 7-bits in an 8-bit byte. The ASCII standard

was created by the American National Standards Institute (ANSI).

Each character maps directly to a number from 0 to 127. For example,

the letter &quot;A&quot; is numbered 65 and &quot;a&quot; is numbered

97. Generally, these numbers are displayed in hexadecimal format.

For example, the letter &quot;A&quot; is 0x41 and &quot;a&quot;

is 0x61. While ASCII is satisfactory for displaying the English

language, it is not considered adequate for non-English languages

because the 128 character choice is too limiting. For instaNCe,

many European langugaes use accented characters which ASCII can't

easily handle.

<BLOCKQUOTE>

See also <I>ANSI</I>.

</BLOCKQUOTE>

<H2><A NAME="Assignment"><FONT SIZE=5 COLOR=#FF0000>

Assignment</FONT></A></H2>

<P>

An assignment statement stores a value into a variable. For example,

<TT>$foo = 4</TT> stores the value

of <TT>4</TT> into the <TT>$foo</TT>

variable. The left side of the statement must be a value-something

that ultimately will resolve to a memory location where the storage

will take place.

<H2><A NAME="AssociativeArray"><FONT SIZE=5 COLOR=#FF0000>

Associative Array</FONT></A></H2>

<P>

An associative array-also called a hash-uses strings as indexes

instead of numbers; for example, <TT>$hash{'david'}</TT>

or <TT>$hash{'Larry Wall'}</TT>. Note

that hashes use curly brackets around the index while arrays use

square brackets.

<H2><A NAME="Associativitylefttorightamprighttoleft"><FONT SIZE=5 COLOR=#FF0000>

Associativity (left-to-right &amp; right-to-left)</FONT></A></H2>

<P>

Every Perl operator and fuNCtion has a tendeNCy to favor its left

or right when looking for operands. If the operator looks left

first-like the string coNCatenation operator-then it has left-associativity.

If it looks right first-like the minus sign-then it has right-associativity.

<H2><A NAME="awk"><FONT SIZE=5 COLOR=#FF0000>

awk</FONT></A></H2>

<P>

<TT>awk</TT> is a UNIX-based utility

that scans input lines for a specific pattern. Perl has most,

if not all, of the abilities of <TT>awk</TT>.

<BLOCKQUOTE>

See also <I>Pattern</I>.

</BLOCKQUOTE>

<H2><A NAME="Backtracking"><FONT SIZE=5 COLOR=#FF0000>

Backtracking</FONT></A></H2>

<P>

Backtracking happens when the internal routines that perform pattern

matching head down the wrong path when looking for a pattern.

SiNCe the current path-the set of characters being searched-is

wrong, a new path needs to be found. Because this process is internal

to Perl, you don't need to worry about the details. If you want

to know more, please see the documentation that came with your

Perl distribution.

<BLOCKQUOTE>

See also <I>Regular Expression</I>.

</BLOCKQUOTE>

<H2><A NAME="BinaryMode"><FONT SIZE=5 COLOR=#FF0000>

Binary Mode</FONT></A></H2>

<P>

When using files, you can use either binary mode or text mode.

Binary mode means that Perl will not change your input or output

in any way. By the way, this is my preferred mode of operation.

Text mode-only available on some operating systems like Windows

95 and Windows NT-will convert newline/carriage return character

pairs into a single newline. It will also interpret any byte that

has a value of 26 as the end-of-file marker.

<H2><A NAME="BitwiseOperations"><FONT SIZE=5 COLOR=#FF0000>

Bitwise Operations</FONT></A></H2>

<P>

Bitwise operators view values at the bit level. Usually, Perl

looks at the entire value. However, bitwise operators will see

a value of 15 as a series of ones and zeros.<BR>

<A HREF="ch4.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/ch4.htm" >Chapter 4</A> &quot;Operators,&quot; talks about bitwise operators

and how they can be used.

<H2><A NAME="Block"><FONT SIZE=5 COLOR=#FF0000>

Block</FONT></A></H2>

<P>

A block of code is a series of statements surrounded by curly

braces. Code blocks can be viewed as single-pass loops. Using

the <TT>my()</TT> fuNCtion inside

a code block will create a variable local to that block.

<BLOCKQUOTE>

See also <I>Scope</I>.

</BLOCKQUOTE>

<H2><A NAME="CallbyRefereNCe"><FONT SIZE=5 COLOR=#FF0000>

Call by RefereNCe</FONT></A></H2>

<P>

Many fuNCtions need information before they can do their work.

This information is given to fuNCtions in the form of parameters.

For example, in the fuNCtion call <TT>foo('one',

'two')</TT>, the strings <TT>'one'</TT>

and <TT>'two'</TT> are parameters.

When parameters are passed to the fuNCtion by refereNCe, the fuNCtion

can modify the parameters and the change can be seen by the calling

fuNCtion or program. For example, <TT>foo(\$result)</TT>

passes a refereNCe to the <TT>$result</TT>

variable into the <TT>foo()</TT> fuNCtion.

Inside the fuNCtion, the refereNCe can be derefereNCed to get

at and modify the value of <TT>$result</TT>.

<BLOCKQUOTE>

See also <I>Call by Value</I>.

</BLOCKQUOTE>

<H2><A NAME="CallbyValue"><FONT SIZE=5 COLOR=#FF0000>

Call by Value</FONT></A></H2>

<P>

Many fuNCtions need information before they can do their work.

This information is given to fuNCtions in the form of parameters.

For example, in the fuNCtion call <TT>foo('one',

'two')</TT>, the strings <TT>'one'</TT>

and <TT>'two'</TT> are parameters.

When parameters are passed to the fuNCtion by value, changes to

the value inside the fuNCtion are not seen outside the fuNCtion.

<BLOCKQUOTE>

See also <I>Call by RefereNCe</I>.

</BLOCKQUOTE>

<H2><A NAME="CharacterClasses"><FONT SIZE=5 COLOR=#FF0000>

Character Classes</FONT></A></H2>

<P>

A character class-used in pattern matching-defines a type of character.

The character class [0123456789] defines the class of decimal

digits. And [0-9a-f] defines the class of hexadecimal digits.

<A HREF="ch10.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/ch10.htm" >Chapter 10</A>, &quot;Regular Expressions,&quot; discusses character

class in detail.

<BLOCKQUOTE>

See <I>Regular Expression</I>.

</BLOCKQUOTE>

<H2><A NAME="ChildProcess"><FONT SIZE=5 COLOR=#FF0000>

Child Process</FONT></A></H2>

<P>

Some operating systems-such as UNIX-let your program create clones

of itself using the <TT>fork()</TT>

fuNCtion. These clones are called child processes or subprocesses.

Child processes are frequently used by server processes. For example,

you might fork a process (create a child process) to handle multiple

request on a single socket.

<H2><A NAME="Class"><FONT SIZE=5 COLOR=#FF0000>

Class</FONT></A></H2>

<P>

A class is a combination of variables and fuNCtions designed to

emulate an object. An object can be anything you want it to be-a

pen, an ATM machine, a car, whatever. The class's variables (also

called properties) and fuNCtions (also called methods) are the

computer's way of modeling the object. See <A HREF="ch14.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/ch14.htm" >Chapter 14</A>, &quot;What

Are Objects?&quot; for more information.

<BLOCKQUOTE>

See also <I>ENCapsulation</I>, <I>InheritaNCe</I>, and <I>Polymorphism</I>.

</BLOCKQUOTE>

<H2><A NAME="ClientServer"><FONT SIZE=5 COLOR=#FF0000>

Client/Server</FONT></A></H2>

<P>

Client/Server is a buzzword that is past its prime. Use object-oriented

or rad, instead. Seriously though, C/S refers to the coNCept of

splitting the workload for a given task. Typically, the work is

broken into user-interface tasks (like presenting information

and inputting information) and back-end tasks (querying databases,

printing reports, and sorting information). A standard C/S Internet

application would use a web browser for the client and a cgi-enabled

Web server as the server.

<H2><A NAME="CommandLineOptions"><FONT SIZE=5 COLOR=#FF0000>

Command-Line Options</FONT></A></H2>

<P>

Perl has several options you can control when invoking your Perl

script. They are called command-line options because you add them

to the command that invokes Perl. For example, in the command

<TT>perl -w test.pl</TT>, the <TT>-w</TT>

is a command-line option which causes Perl to display messages

about questionable code. <A HREF="ch17.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/ch17.htm" >Chapter 17</A>, &quot;Using Command-Line

Options,&quot; has a description of all of the available options.

<H2><A NAME="Compiler"><FONT SIZE=5 COLOR=#FF0000>

Compiler</FONT></A></H2>

<P>

A compiler reads your program code and converts it into another

form-typically, a language that your CPU can directly understand.

The secondary form is sometimes written to disk in the form of

an executable file; however, this is not always the case. In fact,

Perl does not currently create executable files-although some

people are researching this topic.

<BLOCKQUOTE>

See also <I>Interpreter</I>.

</BLOCKQUOTE>

<H2><A NAME="CompileTimeError"><FONT SIZE=5 COLOR=#FF0000>

Compile-Time Error</FONT></A></H2>

<P>

The errors caught during the compilation phase are called compile-time

errors. When the compiler converts a program to an internal format,

it checks for syntax errors and, if the <TT>-w</TT>

option is turned on, questionable coding practices.

<H2><A NAME="CoNCatenation"><FONT SIZE=5 COLOR=#FF0000>

CoNCatenation</FONT></A></H2>

<P>

CoNCatenation consists of taking two things and sticking them

together. The operation is frequently used with strings. In fact,

Perl has its own coNCatenation operator-the period; for example,

<TT>'one' . 'two'</TT> is equivalent

to <TT>'onetwo'</TT>.

<H2><A NAME="Constant"><FONT SIZE=5 COLOR=#FF0000>

Constant</FONT></A></H2>

<P>

In programming circles, a constant is a value that doesn't change.

Constants are very similar to variables because both use a name

to refer to a memory location that holds a value. The exception

is that, with constants, that value can't change; with variables,

it can. Normally, trying to change a constant would generate a

compile-time error. Unfortunately, Perl does not have true constants,

but you can emulate them by initializing a variable and then never

assigning a second value to it. Some programmers like to emulate

constants by using a fuNCtion to return a value. This works, but

it is very, very slow.

<H2><A NAME="Constructor"><FONT SIZE=5 COLOR=#FF0000>

Constructor</FONT></A></H2>

<P>

Classes use constructor fuNCtions to create an object. This is

usually done by creating an anonymous hash and storing the classes

properties inside the hash as entries. Most constructor fuNCtions

are named <TT>new()</TT>.

<BLOCKQUOTE>

See also <I>Classes</I> and <I>Deconstructor</I>.

</BLOCKQUOTE>

<H2><A NAME="ContextArrayampScalar"><FONT SIZE=5 COLOR=#FF0000>

Context (Array &amp; Scalar)</FONT></A></H2>

<P>

Sometimes you can control the type of value-either array or scalar-that

is returned from a fuNCtion. If you place parentheses around the

fuNCtion call, the return value will be placed in an array (of

course, it might only be a one-element array). FuNCtion calls

that are themselves parameters to another fuNCtion are usually

evaluated in an array context also. You can use the scalar() fuNCtion

to create a scalar context. This is valuable when determining

the size of an array. For example, scalar(@array) will return

the number of elements in @array.<BR>

<p>

<CENTER>

<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>

<TR><TD><B>Note</B></TD></TR>

<TR><TD>

<BLOCKQUOTE>

FuNCtions can use the <TT>wantarray()</TT> fuNCtion to determine their own calling context. Appendix C, &quot;FuNCtion List,&quot; has an example that uses the <TT>wantarray()</TT> fuNCtion.

</BLOCKQUOTE>



</TD></TR>

</TABLE>

</CENTER>

<P>

<H2><A NAME="ControlCharacters"><FONT SIZE=5 COLOR=#FF0000>

Control Characters</FONT></A></H2>

<P>

Control characters are characters that control devices-like the

display. For example, displaying the value 7 usually causes a

beep to sound. The control values map directly onto the English

alphabet. Therefore, a value of 7 is Control G-also written as

Ctrl+G or ^G.

<H2><A NAME="CR"><FONT SIZE=5 COLOR=#FF0000>

CR</FONT></A></H2>

<P>

CR is the abbreviation for carriage return. A CR is represented

by \r in strings. The carriage return can also be referred to

as Ctrl+J, ^J, 0x0a, or as an ASCII value of 10.

<BLOCKQUOTE>

See also <I>ASCII </I>and <I>Control Characters</I>.

</BLOCKQUOTE>

<H2><A NAME="Database"><FONT SIZE=5 COLOR=#FF0000>

Database</FONT></A></H2>

<P>

A database is a grouping of related information. For example,

your book collection might be one database and your stamp collection

might be another. Each book or stamp would typically have its

own record that contains information specific to that particular

item. Records are broken into fields of information. For example,

a book's title and the author's name might be fields in the records

of the book collection.

<H2><A NAME="DataType"><FONT SIZE=5 COLOR=#FF0000>

Data Type</FONT></A></H2>

<P>

The data type is simply the type of information that a variable

holds. Perl has four main data types: scalars, arrays, associative

arrays or hashes, and refereNCes.

<BLOCKQUOTE>

See also <I>Scalars, Arrays, Hashes.</I>

</BLOCKQUOTE>

<H2><A NAME="Debugger"><FONT SIZE=5 COLOR=#FF0000>

Debugger</FONT></A></H2>

<P>

Perl has a feature that lets you step line-by-line through your

programs. This feature is called a debugger because it is generally

used to find logic errors or bugs in your programs. <A HREF="ch16.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/ch16.htm" >Chapter 16</A>,

&quot;Debugging Perl,&quot; shows how to use the debugger.

<H2><A NAME="Declaration"><FONT SIZE=5 COLOR=#FF0000>

Declaration</FONT></A></H2>

<P>

A declaration tells Perl that you want to use a variable. Most

languages require you to declare the variables that you intend

to use. This enables the compiler to perform some optimizations

and perhaps see if you use a variable iNCorrectly. Perl does not

require and does not have any declaration statement-the closest

thing is the <TT>my()</TT> fuNCtion.

<H2><A NAME="Deconstructor"><FONT SIZE=5 COLOR=#FF0000>

Deconstructor</FONT></A></H2>

<P>

Deconstructor fuNCtions are used by classes to clean up after

you are done with an object. You might need to close a socket

or file, or to write some log messages. All deconstructor fuNCtions

are named <TT>DESTROY()</TT>.

<BLOCKQUOTE>

See also <I>Classes </I>and <I>Constructor</I>.

</BLOCKQUOTE>

<H2><A NAME="Defined"><FONT SIZE=5 COLOR=#FF0000>

Defined</FONT></A></H2>

<P>

A defined variable is one that has been initialized with a value.

<H2><A NAME="Delimiter"><FONT SIZE=5 COLOR=#FF0000>

Delimiter</FONT></A></H2>

<P>

A delimiter is used to tell when one thing ends and another begins.

Delimiters are widely used in text-based databases to separate

one field from another. For example, in the string <TT>&quot;one:two:three&quot;</TT>

the colon is the delimiter. You can break a string into components

based on a delimiter using the <TT>split()</TT>

fuNCtion; you can put the string back together again using the

<TT>join()</TT> fuNCtion.

<H2><A NAME="DerefereNCe"><FONT SIZE=5 COLOR=#FF0000>

DerefereNCe</FONT></A></H2>

<P>

A refereNCe is a scalar that points to a value. The act of derefereNCing

means to follow the link to arrive at the value. For example,

you can create a refereNCe with the following <TT>$foo

= \10;</TT>. This makes <TT>$foo</TT>

a refereNCe to an anonymous literal value of 10. Printing <TT>$foo</TT>

prints the value of the refereNCe. To get at the value, you need

to derefereNCe $foo like this <TT>${$foo}</TT>.

The symbol in front of the curly brace depends on the type of

refereNCe. Use $ for scalars, @ for arrays, and % for hashes.

<BLOCKQUOTE>

See also <I>RefereNCe</I>.

</BLOCKQUOTE>

<H2><A NAME="DetailLine"><FONT SIZE=5 COLOR=#FF0000>

Detail Line</FONT></A></H2>

<P>

You use detail lines to display information about individual items

in reports. Reports can also have header, footer, subtotal, and

total lines. <A HREF="ch11.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/ch11.htm" >Chapter 11</A>, &quot;Creating Reports,&quot; has examples

of how to prepare reports.

<H2><A NAME="DiamondOperator"><FONT SIZE=5 COLOR=#FF0000>

Diamond Operator</FONT></A></H2>

<P>

The diamond operator (<TT>&lt;&gt;</TT>)

is used to read a line of input from a file. Some operating systems,

like UNIX, can use the diamond operator to read from sockets.

<A HREF="ch9.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/ch9.htm" >Chapter 9</A> &quot;Using Files,&quot; has examples that use the

diamond operator.

<H2><A NAME="Directory"><FONT SIZE=5 COLOR=#FF0000>

Directory</FONT></A></H2>

<P>

Directories are used by operating systems and users to group files

in a hierarchical or tree fashion. See your system's documentation

for more information.

<H2><A NAME="DottedDecimalAddress"><FONT SIZE=5 COLOR=#FF0000>

Dotted Decimal Address</FONT></A></H2>

<P>

All Internet servers have an Internet Protocol (IP) address that

consists of four numbers connected by dots. For example, 207.3.100.98

is the IP address of my personal server. Please don't try connecting

to it though; my IP address changes every day.

<H2><A NAME="EmptyStringsArraysListsandHashes"><FONT SIZE=5 COLOR=#FF0000>

Empty Strings, Arrays, Lists, and Hashes</FONT></A></H2>

<P>

Empty strings have no characters and have a length and value of

zero. They are literally represented by <TT>&quot;&quot;</TT>.

Empty arrays have no elements and are literally represented by

(&nbsp;). Empty hashes have no entries and are literally represented

by {&nbsp;}. If you have a variable that contains a large string,

you can free up or release memory by assigning the empty string

to it. You can use the same technique to release memory used by

arrays and hashes.

<H2><A NAME="ENCapsulation"><FONT SIZE=5 COLOR=#FF0000>

ENCapsulation</FONT></A></H2>

<P>

ENCapsulation means that the information about an object (its

properties) and fuNCtions that manipulate that information (its

methods) are stored together.

<BLOCKQUOTE>

See also <I>Abstraction</I>, <I>Classes</I>, <I>InheritaNCe</I>,

and <I>Polymorphism</I>.

</BLOCKQUOTE>

<H2><A NAME="ENCryption"><FONT SIZE=5 COLOR=#FF0000>

ENCryption</FONT></A></H2>

<P>

ENCryption is the act of changing plain text into text which is

not readable. ENCryption enables you to store text while ensuring

that it is safe from prying eyes.

<H2><A NAME="EndlessLoop"><FONT SIZE=5 COLOR=#FF0000>

Endless Loop</FONT></A></H2>

<BLOCKQUOTE>

See <I>Infinite Loop</I>.

</BLOCKQUOTE>

<H2><A NAME="EnvironmentVariables"><FONT SIZE=5 COLOR=#FF0000>

Environment Variables</FONT></A></H2>

<P>

Environment variables are stored by the operating system. You

can change and/or add environment variables on a per-process basis.

Any changes made to environment variables will be passed on to

child processes, but, when your process ends, the changes go away.

<H2><A NAME="EOF"><FONT SIZE=5 COLOR=#FF0000>

EOF</FONT></A></H2>

<P>

EOF stands for end-of-file. UNIX uses a character value of 4 to

represent the end-of-file, and DOS/Windows uses a value of 26.

These end-of-file values are ignored in binary mode.

<BLOCKQUOTE>

See also <I>Binary Mode</I>.

</BLOCKQUOTE>

<H2><A NAME="EscapeSequeNCe"><FONT SIZE=5 COLOR=#FF0000>

Escape SequeNCe</FONT></A></H2>

<P>

In Perl, some letters and characters can have more than one meaning

depending on the situation in which they are used. The period

could mean to match any character in a regular expression or it

could simply be needed to represent a period. You can force Perl

to use a literal context by placing a slash (\) in front of the

character to create an escape sequeNCe. For example, <TT>\.</TT>

means that a regular period should be matched in a regular expression

pattern. This simple definition is complicated by the fact that

some escape sequeNCes have meanings all their own. For example,

<TT>\t</TT> indicates the tab character.<B>

</B>See Table 2.1 in <A HREF="ch2.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/ch2.htm" >Chapter 2</A> &quot;Numeric and String Literals,&quot;

for a list of all of the special escape sequeNCes.

<H2><A NAME="Expression"><FONT SIZE=5 COLOR=#FF0000>

Expression</FONT></A></H2>

<P>

An expression is one or more operands connected by one or more

operators. The operands can be either literal values, variables,

or fuNCtions. For example, <TT>$foo</TT>

is an expression. <TT>$foo + (34 * bar())</TT>

is also an expression. Expressions can be arbitrarily complex.

<BLOCKQUOTE>

See also <I>Statement</I>.

</BLOCKQUOTE>

<H2><A NAME="FF"><FONT SIZE=5 COLOR=#FF0000>

FF</FONT></A></H2>

<P>

FF is the abbreviation for form feed or page eject. This character

is typically sent to a printer to force a page ejection. An FF

is represented by \f in strings. The form feed can also be referred

to as Ctrl+L, ^L, 0x0b, or as an ASCII value of 12.

<BLOCKQUOTE>

See also <I>ASCII </I>and  <I>Control Characters</I>.

</BLOCKQUOTE>

<H2><A NAME="Field"><FONT SIZE=5 COLOR=#FF0000>

Field</FONT></A></H2>

<BLOCKQUOTE>

See <I>Database</I>.

</BLOCKQUOTE>

<H2><A NAME="Filehandle"><FONT SIZE=5 COLOR=#FF0000>

Filehandle</FONT></A></H2>

<P>

You use a filehandle to let your program access files. It is essentially

a pointer to an internal data structure maintained by the operating

system. Perl naming conventions indicate that all filehandles

should have names that use all capitals.

<H2><A NAME="Footer"><FONT SIZE=5 COLOR=#FF0000>

Footer</FONT></A></H2>

<P>

You use footer lines to display information at the bottom of the

page in reports. Reports can also have header, detail-line, subtotal,

and total lines. See <A HREF="ch11.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/ch11.htm" >Chapter 11</A>, &quot;Creating Reports,&quot;

for more information.

<H2><A NAME="Formats"><FONT SIZE=5 COLOR=#FF0000>

Formats</FONT></A></H2>

<P>

You use formats to control a report's appearaNCe. You can specify

both the static text and the variables that will be displayed

in the report. <A HREF="ch11.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/ch11.htm" >Chapter 11</A>, &quot;Creating Reports,&quot; shows

you how to create reports.

<H2><A NAME="ftp"><FONT SIZE=5 COLOR=#FF0000>

ftp</FONT></A></H2>

<P>

ftp is an abbreviation for File Transfer Protocol. This protocol

is used on the Internet to transfer files between two computers.

<H2><A NAME="FuNCtion"><FONT SIZE=5 COLOR=#FF0000>

FuNCtion</FONT></A></H2>

<BLOCKQUOTE>

See <I>Procedure</I>.

</BLOCKQUOTE>

<H2><A NAME="Globbing"><FONT SIZE=5 COLOR=#FF0000>

Globbing</FONT></A></H2>

<P>

You use globbing (what a funny word!) to expand a file specification

into a list of matching files. For example, *.pl might be matched

by <TT>test.pl</TT> and <TT>foo.pl</TT>.

Use the <TT>glob()</TT> fuNCtion to

do your globbing.

<H2><A NAME="GreedyRegularExpressions"><FONT SIZE=5 COLOR=#FF0000>

Greedy Regular Expressions</FONT></A></H2>

<P>

Regular expressions are normally greedy-they try to find the longest

sequeNCe of characters that match a given pattern. For example,

if you use <TT>&quot;qqBqqBqqB&quot;</TT>

as your search space and <TT>/(qqB)+/</TT>

as your pattern, there are three matching possibilities. They

are <TT>&quot;qqB&quot;</TT>, <TT>&quot;qqBqqB&quot;</TT>,

and <TT>&quot;qqBqqBqqB&quot;</TT>.

Perl will find the longest matching string, so <TT>$&amp;</TT>

will be equal to <TT>&quot;qqBqqBqqB&quot;</TT>.

You can reverse this behavior by adding a <TT>?</TT>

to the pattern. For example, <TT>/(qqB)+?/</TT>

will match <TT>&quot;qqB&quot;</TT>.

Don't use the <TT>*</TT> meta-character

with the <TT>?</TT> meta-character

because it will always match the empty string.

<BLOCKQUOTE>

See also <I>Regular Expression</I>.

</BLOCKQUOTE>

<H2><A NAME="Grep"><FONT SIZE=5 COLOR=#FF0000>

Grep</FONT></A></H2>

<P>

You use this utility to search files for patterns.

<H2><A NAME="Hash"><FONT SIZE=5 COLOR=#FF0000>

Hash</FONT></A></H2>

<BLOCKQUOTE>

See <I>Associative Array</I>.

</BLOCKQUOTE>

<H2><A NAME="Header"><FONT SIZE=5 COLOR=#FF0000>

Header</FONT></A></H2>

<P>

Header lines are used to display information at the top of a report's

page. Reports can also have footer, detail-line, subtotal, and

total lines. <A HREF="ch11.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/ch11.htm" >Chapter 11</A>, &quot;Creating Reports,&quot; shows you

how to create headers for your reports.

<H2><A NAME="HereDocuments"><FONT SIZE=5 COLOR=#FF0000>

Here Documents</FONT></A></H2>

<P>

You use a here document to specify input to a variable or fuNCtion.

It is typically used with the <TT>print()</TT>

fuNCtion. An example will explain better than words:<BR>

<BLOCKQUOTE>

<PRE>

print &lt;&lt;&quot;_END_&quot;;

This is the first line of output.

The value of \$foo is $foo.

This is the third line of output.

_END_



print(&quot;This is the fourth line of output\n&quot;);

</PRE>

</BLOCKQUOTE>

<P>

The syntax for here documents is both freeform and rigid. The

ending label must be immediately to the right of the &lt;&lt;

symbol and must be eNClosed in quotes. The ending label-after

the document-must be by itself on a line and at the beginning

of the line.

<BLOCKQUOTE>

Here, documents are useful if you need to output a lot of lines

at one time.

</BLOCKQUOTE>

<H2><A NAME="Hexadecimal"><FONT SIZE=5 COLOR=#FF0000>

Hexadecimal</FONT></A></H2>

<P>

Hexadecimal refers to numbers using base 16.

<H2><A NAME="InfiniteLoop"><FONT SIZE=5 COLOR=#FF0000>

Infinite Loop</FONT></A></H2>

<BLOCKQUOTE>

See <I>Endless Loop</I>.

</BLOCKQUOTE>

<H2><A NAME="InheritaNCe"><FONT SIZE=5 COLOR=#FF0000>

InheritaNCe</FONT></A></H2>

<P>

This is an object-oriented term that means that one object inherits

properties and methods from another object in a parent-child relationship.

<BLOCKQUOTE>

See also <I>Abstraction</I>, <I>Classes</I>, <I>ENCapsulation</I>,

and<I> Polymorphism</I>.

</BLOCKQUOTE>

<H2><A NAME="Initialization"><FONT SIZE=5 COLOR=#FF0000>

Initialization</FONT></A></H2>

<P>

Initialization is the act of assigning a value to a variable for

the first time or it can also be a series of actions taken to

create a situation. For example, the initialization phase of a

socket program would iNClude getting the protocol and port number,

determining the remote server's address, and creating and binding

a socket.

<H2><A NAME="Interpolation"><FONT SIZE=5 COLOR=#FF0000>

Interpolation</FONT></A></H2>

<P>

Interpolation means the replacement of a variable name with its

value. For example, if <TT>$foo</TT>

equals <TT>&quot;dinner&quot;</TT>

then <TT>&quot;big $foo&quot;</TT>

is equal to <TT>&quot;big dinner&quot;</TT>.

<H2><A NAME="Interpreter"><FONT SIZE=5 COLOR=#FF0000>

Interpreter</FONT></A></H2>

<P>

An interpreter executes your program without first creating an

executable file. It interprets your program into the language

of the CPU, on-the-fly. Compilers and interpreters do a lot of

the same work. However, siNCe interpreters can't create executable

files, the source code must always be available to users.

<BLOCKQUOTE>

See also <I>Compiler</I>.

</BLOCKQUOTE>

<H2><A NAME="InterprocessCommunication"><FONT SIZE=5 COLOR=#FF0000>

Inter-process Communication</FONT></A></H2>

<P>

You use inter-process communication, or IPC, when two or more

processes need to communicate. The communication can take place

using databases, shared memory, semaphores, or sockets.

<H2><A NAME="IO"><FONT SIZE=5 COLOR=#FF0000>

I/O</FONT></A></H2>

<P>

I/O is an abbreviation for Input/Output.

<H2><A NAME="IPC"><FONT SIZE=5 COLOR=#FF0000>

IPC</FONT></A></H2>

<BLOCKQUOTE>

See <I>Inter-process Communication</I>.

</BLOCKQUOTE>

<H2><A NAME="KeyValuePair"><FONT SIZE=5 COLOR=#FF0000>

Key-Value Pair</FONT></A></H2>

<P>

Each entry in a hash is a key-value pair. The key is used as the

index to retrieve the value.

<H2><A NAME="Label"><FONT SIZE=5 COLOR=#FF0000>

Label</FONT></A></H2>

<P>

You use labels to mark locations in your program to which you

need to return. Typically, you label the outer loop in a nested

series of loops so that you can jump out of the inner loops if

needed.

<H2><A NAME="LF"><FONT SIZE=5 COLOR=#FF0000>

LF</FONT></A></H2>

<P>

LF is the abbreviation for linefeed or newline. An LF is represented

by \n in strings. The linefeed can also be referred to as Ctrl+M,

^M, 0x0d, or as an ASCII value of 13.

<BLOCKQUOTE>

See also <I>ASCII</I> and <I>Control Characters</I>.

</BLOCKQUOTE>

<H2><A NAME="Library"><FONT SIZE=5 COLOR=#FF0000>

Library</FONT></A></H2>

<P>

A library is a file that groups related fuNCtions together. Libraries

are loaded into your program using the <TT>require</TT>

compiler directive. <A HREF="ch15.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/ch15.htm" >Chapter 15</A>, &quot;Perl Modules,&quot; talks

a little bit about libraries.

<H2><A NAME="List"><FONT SIZE=5 COLOR=#FF0000>

List</FONT></A></H2>

<P>

See <I>Array</I>.

<H2><A NAME="Literal"><FONT SIZE=5 COLOR=#FF0000>

Literal</FONT></A></H2>

<P>

A literal is a value that is represented &quot;as is&quot; in

your source code. There are four types of Perl literals: Number,

Strings, Arrays, and Hashes. <A HREF="ch2.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/ch2.htm" >Chapter 2</A> &quot;Numeric and String

Literals,&quot; shows many examples of literals.

<H2><A NAME="Loop"><FONT SIZE=5 COLOR=#FF0000>

Loop</FONT></A></H2>

<P>

A loop is a series of statements that are executed more than oNCe.

Each loop has a control mechanism to stop looping. <A HREF="ch7.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/ch7.htm" >Chapter 7</A>

&quot;Control Statements,&quot; discusses the different types

of looping and controls that are used.

<BLOCKQUOTE>

See also <I>Endless Loop</I>.

</BLOCKQUOTE>

<H2><A NAME="MetaCharacters"><FONT SIZE=5 COLOR=#FF0000>

Meta Characters</FONT></A></H2>

<P>

Meta characters are characters that have more than one meaning

inside regular expressions. <A HREF="ch10.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/ch10.htm" >Chapter 10</A>, &quot;Regular Expressions,&quot;

has an in-depth discussion of meta-characters.

<BLOCKQUOTE>

See also <I>Regular Expressions</I>.

</BLOCKQUOTE>

<H2><A NAME="Module"><FONT SIZE=5 COLOR=#FF0000>

Module</FONT></A></H2>

<P>

A module is a file that holds a related group of fuNCtions-such

as a library. However, modules are a bit more complex. Modules

can control which fuNCtion and variable names get exported from

the module namespace into the main namespace. See <A HREF="ch15.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/ch15.htm" >Chapter 15</A>,

&quot;Perl Modules,&quot; for more information.

<H2><A NAME="Namespace"><FONT SIZE=5 COLOR=#FF0000>

Namespace</FONT></A></H2>

<P>

Namespaces are used to segregate fuNCtion and variable names.

Each data type has its own namespace. This means that you can

use the same variable name for different data types. For example,

<TT>$foo</TT>, <TT>@foo</TT>,

and <TT>%foo</TT> are different data

types with the same name. You can create your own namespace with

the <TT>Package</TT> keyword. See

<A HREF="ch14.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/ch14.htm" >Chapter 14</A>, &quot;What Are Objects?&quot; for more information.

<H2><A NAME="Object"><FONT SIZE=5 COLOR=#FF0000>

Object</FONT></A></H2>

<BLOCKQUOTE>

See <I>Class</I>.

</BLOCKQUOTE>

<H2><A NAME="Octal"><FONT SIZE=5 COLOR=#FF0000>

Octal</FONT></A></H2>

<P>

Octal refers to numbers using base 8.

<H2><A NAME="Operator"><FONT SIZE=5 COLOR=#FF0000>

Operator</FONT></A></H2>

<P>

The operators in a computer language tell the computer what actions

to perform. For example, the plus sign (+) is an operator.

<H2><A NAME="Parameter"><FONT SIZE=5 COLOR=#FF0000>

Parameter</FONT></A></H2>

<P>

Some fuNCtions need outside information before they can perform

their tasks. The outside information is called a parameter. For

example, the <TT>print()</TT> fuNCtion

needs to know what it should print and where.

<H2><A NAME="Polymorphism"><FONT SIZE=5 COLOR=#FF0000>

Polymorphism</FONT></A></H2>

<P>

Polymorphism is a term from the object-oriented world. It means

that a child class can redefine a method already defined in the

parent class. <A HREF="ch14.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/ch14.htm" >Chapter 14</A>, &quot;What Are Objects?&quot; discusses

polymorphism.

<H2><A NAME="Port"><FONT SIZE=5 COLOR=#FF0000>

Port</FONT></A></H2>

<P>

A port is the address of a socket on an Internet server. In addition

to the server address, each socket also needs a port number. The

port number is added to the end of the server address to create

a full address. For example, www.locked.com:80 is a full Internet

address that specifies a port number of 80.

<H2><A NAME="PrecedeNCe"><FONT SIZE=5 COLOR=#FF0000>

PrecedeNCe</FONT></A></H2>

<P>

Every Perl operator and fuNCtion has an associated priority. This

priority or precedeNCe level tells Perl which operators should

be evaluated first. <A HREF="ch4.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/ch4.htm" >Chapter 4</A> &quot;Operators,&quot; lists all

of the operators and their priorities.

<H2><A NAME="Procedure"><FONT SIZE=5 COLOR=#FF0000>

Procedure</FONT></A></H2>

<P>

FuNCtions, procedures, routines, and subroutines are all basically

the same thing-a set of statements that are grouped together for

a common cause. If you like to be picky, fuNCtions are routines

that return values while subroutines don't return values. Procedure

is the generic name used to refer to both fuNCtions and subroutines.

<H2><A NAME="Protocol"><FONT SIZE=5 COLOR=#FF0000>

Protocol</FONT></A></H2>

<P>

A protocol is a set of agreed-upon commands and responses. The

Internet has a plethora of protocols that you can use. See Chapter

22, &quot;Internet Resources,&quot; for information about how

to find more information.

<H2><A NAME="Range"><FONT SIZE=5 COLOR=#FF0000>

Range</FONT></A></H2>

<BLOCKQUOTE>

See <I>Array Range</I>.

</BLOCKQUOTE>

<H2><A NAME="Record"><FONT SIZE=5 COLOR=#FF0000>

Record</FONT></A></H2>

<BLOCKQUOTE>

See <I>Database</I>.

</BLOCKQUOTE>

<H2><A NAME="RefereNCe"><FONT SIZE=5 COLOR=#FF0000>

RefereNCe</FONT></A></H2>

<P>

A refereNCe is a scalar value that points to a memory location

that holds some type of data. See <A HREF="ch8.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/ch8.htm" >Chapter 8</A> &quot;RefereNCes,&quot;

for more information.

<H2><A NAME="RegularExpression"><FONT SIZE=5 COLOR=#FF0000>

Regular Expression</FONT></A></H2>

<P>

A Regular Expression is used to find patterns in strings. See

<A HREF="ch10.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/ch10.htm" >Chapter 10</A>, &quot;Regular Expressions,&quot; for more information.

<H2><A NAME="ReturnValue"><FONT SIZE=5 COLOR=#FF0000>

Return Value</FONT></A></H2>

<P>

All Perl fuNCtions return a value when they are finished. The

return value is the value of the last executed statement or you

can use the <TT>return()</TT> to explicitly

state it. You may always choose to ignore the return value by

not assigning the fuNCtion call to a variable.

<H2><A NAME="RunTimeError"><FONT SIZE=5 COLOR=#FF0000>

Run-Time Error</FONT></A></H2>

<P>

Run-time errors happen while your program is executing. Run-time

errors are logic errors and therefore usually harder to track

down than compile-time errors.

<H2><A NAME="Scalar"><FONT SIZE=5 COLOR=#FF0000>

Scalar</FONT></A></H2>

<P>

A scalar variable can hold one string or number value at a time.

<A HREF="ch3.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/ch3.htm" >Chapter 3</A> &quot;Variables,&quot; shows you how scalars can be

used.

<H2><A NAME="ScalarContext"><FONT SIZE=5 COLOR=#FF0000>

Scalar Context</FONT></A></H2>

<BLOCKQUOTE>

See <I>Context (Array &amp; Scalar)</I>.

</BLOCKQUOTE>

<H2><A NAME="Scope"><FONT SIZE=5 COLOR=#FF0000>

Scope</FONT></A></H2>

<P>

Normal Perl variables can be used by any fuNCtion and therefore

are said to have a global visibility or scope. You can create

variables that are local to a particular fuNCtion or block of

code with the <TT>my()</TT> fuNCtion.

These variables have a local scope.

<H2><A NAME="ShortCircuitOperators"><FONT SIZE=5 COLOR=#FF0000>

Short-Circuit Operators</FONT></A></H2>

<P>

The <TT>&amp;&amp;</TT> and <TT>||</TT>

operators are considered short-circuit operators because the second

operand might not be evaluated. For example, in the statement

<TT>0 &amp;&amp; die();</TT> the <TT>die()</TT>

fuNCtion will not be executed. However, in the statement <TT>0

|| die();</TT> the <TT>die()</TT>

fuNCtion will be executed.

<H2><A NAME="Signals"><FONT SIZE=5 COLOR=#FF0000>

Signals</FONT></A></H2>

<P>

A signal is a message sent to your program by the operating system.

When a signal is received by your program, it interrupts the normal

flow of execution. If you don't have a signal handler fuNCtion

defined, default internal fuNCtions will be called. See Chapter

13, &quot;Handling Errors and Signals,&quot; for more information.

<H2><A NAME="Slice"><FONT SIZE=5 COLOR=#FF0000>

Slice</FONT></A></H2>

<BLOCKQUOTE>

See <I>Array Slice</I>.

</BLOCKQUOTE>

<H2><A NAME="Socket"><FONT SIZE=5 COLOR=#FF0000>

Socket</FONT></A></H2>

<P>

A socket is the end link of a connection between two computers.

The first step to using any of the Internet protocols is to create

a connection to another computer using the socket fuNCtions. Then,

you can send and receive information over the sockets. See Chapter

18, &quot;Using Internet Protocols,&quot; for more information.

<H2><A NAME="Splice"><FONT SIZE=5 COLOR=#FF0000>

Splice</FONT></A></H2>

<BLOCKQUOTE>

See <I>Array Splice</I>.

</BLOCKQUOTE>

<H2><A NAME="Stack"><FONT SIZE=5 COLOR=#FF0000>

Stack</FONT></A></H2>

<P>

A stack is a data structure that has the same properties as a

stack of potato chips in a Pringles can. Only the top chip is

accessible. And, therefore, two operations are possible: add a

chip or remove a chip. A stack works exactly the same way. You

can push a new item onto the stack or you can pop an item off

the stack.

<H2><A NAME="Statement"><FONT SIZE=5 COLOR=#FF0000>

Statement</FONT></A></H2>

<P>

A statement is an expression with a semicolon at the end. The

semicolon transforms an expression into an executable statement.

<H2><A NAME="STDERRSTDINandSTDOUT"><FONT SIZE=5 COLOR=#FF0000>

STDERR, STDIN, and STDOUT</FONT></A></H2>

<P>

<TT>STDERR</TT>, <TT>STDIN</TT>,

and <TT>STDOUT</TT> are predefined

filehandles that every program can use. You use <TT>STDERR</TT>

to display error messages, usually on the computer's monitor.

You use <TT>STDIN</TT> to get input,

usually from the keyboard. And you use <TT>STDOUT</TT>

to display messages, usually on the computer's monitor.

<H2><A NAME="Subroutine"><FONT SIZE=5 COLOR=#FF0000>

Subroutine</FONT></A></H2>

<BLOCKQUOTE>

See <I>Procedure</I>.

</BLOCKQUOTE>

<H2><A NAME="TextMode"><FONT SIZE=5 COLOR=#FF0000>

Text Mode</FONT></A></H2>

<P>

When using files, you can use either binary mode or text mode.

Binary mode means that Perl will not change your input or output

in any way. This is my preferred mode of operation, by the way.

Text mode-only available on some operating systems like Windows

95 and Windows NT-will convert newline/carriage return character

pairs into a single newline. It will also interpret any byte that

has a value of 26 as the end-of-file marker.

<H2><A NAME="UndefinedValue"><FONT SIZE=5 COLOR=#FF0000>

Undefined Value</FONT></A></H2>

<P>

The undefined value (<TT>undef</TT>)

can be returned by fuNCtions to indicate an error condition. It

is also the value returned when a nonexistent hash entry is accessed.

<H2><A NAME="Variable"><FONT SIZE=5 COLOR=#FF0000>

Variable</FONT></A></H2>

<P>

A variable is a changeable piece of information used in computer

programs. Typically, variables have a name and a data type. Perl

variables can be scalars, arrays, or hashes. Every variable has

a life-cycle. It gets created, used, and is then destroyed. Regular

Perl variables are created when they are initialized and destroyed

when the program ends. The <TT>my()</TT>

fuNCtion can create a variable that only exists inside a fuNCtion

or code block.

<H2><A NAME="Whitespace"><FONT SIZE=5 COLOR=#FF0000>

Whitespace</FONT></A></H2>

<P>

Whitespace is a term that refers to space, tab, and newline characters.

These characters create white space on a page when printed. You

can use the <TT>\s</TT> symbolic character

class in patterns to match whitespace characters.

<HR>



<CENTER><P><A HREF="ch23.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/ch23.htm"><IMG SRC="pc.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>

<A HREF="#CONTENTS"><IMG SRC="cc.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>

<A HREF="index-1.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/index-1.htm"><IMG SRC="hb.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>

<A HREF="ch25.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/ch25.htm"><IMG SRC="nc.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>

<HR WIDTH="100%"></P></CENTER>

</BODY>

</HTML>

