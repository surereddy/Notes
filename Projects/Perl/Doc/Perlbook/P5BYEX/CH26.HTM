<html>

<head>

<title>Appendix D -- Using the Registry</title>



<meta>

</head>

<body TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">

<h1><font SIZE="6" COLOR="#FF0000">Appendix&nbsp;D</font></h1>

<h1><font SIZE="6" COLOR="#FF0000">Using the Registry</font></h1>

<hr>

<p>

<center><b><font SIZE="5">CONTENTS</font></b></center>

<ul>

<li><a HREF="#RegistryFiles">

Registry Files</a>

<ul>

<li><a HREF="#HowtoBackUptheRegistry">

How to Back Up the Registry</a>

<li><a HREF="#HowtoRestoretheRegistry">

How to Restore the Registry</a>

</ul>

<li><a HREF="#UsingtheRegistry">

Using the Registry</a>

<ul>

<li><a HREF="#OpeninganExistingKey">

Opening an Existing Key</a>

<li><a HREF="#CreatingaNewKey">

Creating a New Key</a>

<li><a HREF="#FindingaKeysValue">

Finding a Key's Value</a>

<li><a HREF="#SettingaKeysNameValuePairs">

Setting a Key's Name-Value Pairs</a>

<li><a HREF="#GettingaListofSubkeys">

Getting a List of Subkeys</a>

<li><a HREF="#GettingaListofNameValuePairs">

Getting a List of Name-Value Pairs</a>

</ul>

<li><a HREF="#SomeCommonUsesfortheRegistry">

Some Common Uses for the Registry</a>

<ul>

<li><a HREF="#CreatingaFileAssociation">

Creating a File Association</a>

<li><a HREF="#SettingtheIconforaFileExtension">

Setting the Icon for a File Extension</a>

<li><a HREF="#EnablingthenewContextMenuOption">

Enabling the 'new' Context Menu Option</a>

</ul>

<li><a HREF="#Summary">

Summary</a>

</ul>



<hr>

<p>

In Windows 3.1, INI or initialization files were used to hold

information used to configure application programs. For example,

an INI file might have a list of the most recently used files

or hold the status of an option to save modified files. However,

INI files had several weaknesses:

<ul>

<li><b>UNCertain location</b>-INI files could be found in either

the <tt>\windows</tt> directory or

the application's directory.

<li><b>Size limitations</b>-INI files were limited to 64K bytes.

<li><b>Easy to modify</b>-INI files were simple text files. End-users

could modify them and create technical support problems.

<li><b>Hard to back up</b>-SiNCe INI files can be in any directory,

it was nearly impossible to back up and restore application configurations.

</ul>

<p>

These problems, and others, prompted Microsoft to design the Registry.

The <i>Registry</i> is a database that contains information about

your operating system, its applications and file associations.

An exhaustive list of the different types of information is too

long to reproduce here. Suffice to say that the Registry holds

both hardware and software information.<br>

<p>

<center>

<table BORDERCOLOR="#000000" BORDER="1" WIDTH="80%">

<tr><td><b>Caution</b></td></tr>

<tr><td>

<blockquote>

<tt><b><font FACE="Courier">Changing the Registry is dangerous!</font></b></tt> Make sure that your Registry is backed up and you can afford to totally wreck your test machine. I'm serious; don't mess with the Registry unless you can afford to take the 
time to back up your system.

</blockquote>



</td></tr>

</table>

</center>

<p>

<p>

There are several advantages to using the Registry:

<ul>

<li><b>Known location</b>-Any program can look into the Registry

to see if it has already been loaded. Or it can see if other programs

have been loaded.

<li><b>Hard to modify</b>-The normal computer user will not know

about the Registry so he or she won't try to change it which means

that configuration errors are less likely.

<li><b>Easy to back up</b>-Keeping all of the configuration information

in two files makes it very easy to back up the Registry. In fact,

Windows keeps several backups on its own. The Registry files are

discussed in the &quot;Registry Files&quot; section a bit later

in this chapter.

</ul>

<p>

Information in the Registry is stored in a <i>key-value format</i>.

This means that every value stored in the Registry has an associated

key. Similar to the lock on your front door. You can't unlock

the door without the correct key. Likewise, you can't retrieve

the stored value without the correct key. Each key can have both

subkeys andone or more sets of name-value pairs. In fact, you

might think of eachkey as an associative array. For example, there

is a key called <tt>HKEY_USERS\Default\Software\Microsoft\User

information</tt> that is interesting. This key has several

name-value pairs. Here is a small sampling of the name-value pairs

from the Registry on my system:<br>



<p>

<center>

<table BORDERCOLOR="#000000" BORDER="1" WIDTH="80%">

<tr><td WIDTH="163"><i>Name</i></td><td WIDTH="222"><i>Value</i></td>

</tr>

<tr><td WIDTH="163">Operating System</td><td WIDTH="222">Microsoft Windows 95

</td></tr>

<tr><td WIDTH="163">Processor</td><td WIDTH="222">Pentium</td></tr>

<tr><td WIDTH="163">Default Company</td><td WIDTH="222">Eclectic Consulting

</td></tr>

<tr><td WIDTH="163">Default First Name</td><td WIDTH="222">David</td>

</tr>

</table>

</center>

<p>

<p>

In addition to named values, there is an unnamed default value

that is referred to using an empty string as the name.<br>

<p>

<center>

<table BORDERCOLOR="#000000" BORDER="1" WIDTH="80%">

<tr><td><b>Note</b></td></tr>

<tr><td>

<blockquote>

The coNCept of a default name-value will become clear if you peek ahead to Figure 22.6 where you'll see a Registry key with several name-value keys defined.</blockquote>



</td></tr>

</table>

</center>

<p>

<p>

As you may guess from looking at the key just mentioned, all of

the information in the Registry is stored in a hierarchical or

tree format-similar to a directory structure. Each key can have

subkeys. There are three root or base keys:

<ul>

<li><tt>HKEY_DYN_DATA</tt>-The subkeys

under this Windows 95 specific key holds system information that

will last only as long as the computer is not shutdown or rebooted.

In other words, these keys are never written to the hard disk,

they exist only in RAM. There are two subkeys: <tt>PerfStats</tt>,

which holds network performaNCe statistics and <tt>Config

Manager</tt>, which keeps a list of all devices on the

computer.

<li><tt>HKEY_LOCAL_MACHINE</tt>-The

subkeys under this key hold information about the local computer

and its configuration. It is one of the most used root keys.

<li><tt>HKEY_USERS</tt>-The subkeys

under <tt>HKEY_USERS</tt> hold information

about all of the users who have logged into your system. The .Default

subtree stores information about the default users. Each individual

user will have a subtree of their own.

</ul>

<p>

Some of the Registry information is accessed so often that Microsoft

has provided three shortcut keys:

<ul>

<li><tt>HKEY_CLASSES_ROOT</tt>-This

key is identical to <tt>HKEY_LOCAL_MACHINE\SOFTWARE\

<br>

Classes</tt>. Changing Registry information in either location

changes both locations. Document types, document associations,

and OLE information are stored under this key.

<li><tt>HKEY_CURRENT_CONFIG</tt>-This

key is identical to <tt>HKEY_LOCAL_MACHINE\Config</tt>.

The hardware and system configuration information that is most

likely to change is stored under this key.

<li><tt>HKEY_CURRENT_USER</tt>-This

key is a shortcut to the selected user profile in <tt>HKEY_USERS</tt>.

It holds information about the configuration and prefereNCes for

the currently signed-on user.

</ul>

<p>

<p>

<center>

<table BORDERCOLOR="#000000" BORDER="1" WIDTH="80%">

<tr><td><b>Caution</b></td></tr>

<tr><td>

<blockquote>

Remember, <tt><b><font FACE="Courier">changing the Registry is dangerous!</font></b></tt> Make sure that your Registry is backed up before making changes.

</blockquote>



</td></tr>

</table>

</center>

<p>

<h2><a NAME="RegistryFiles"><font SIZE="5" COLOR="#FF0000">

Registry Files</font></a></h2>

<p>

There are two files associated with the Registry. The <tt>user.dat</tt>

file holds user-specific data, and the <tt>system.dat</tt>

file holds everything else. They are located in the <tt>\windows</tt>

directory and have their hidden, system, and read-only attributes

turned on. This means that if you run the <tt>dir</tt>

command while connected to those directories, you will not see

these files. When the system is booted, both files are read and

a single Registry is created in memory.

<p>

The <tt>user.da0</tt> and <tt>system.da0</tt>

files in the <tt>\windows</tt> directory

are copies of the Registry from a successful boot of the computer

system. If the Registry gets corrupted, Windows will try to fix

the problem by using these earlier versions.

<p>

You will also find a <tt>system.1st</tt>

file in the root directory of your boot drive (usually <tt>C:</tt>).

The file was created when you first installed Windows. If Windows

can't recover from a Registry failure using the DA0 files, you

can try using <tt>system.1st</tt>

file.

<h3><a NAME="HowtoBackUptheRegistry">

How to Back Up the Registry</a></h3>

<p>

You can manually back up the Registry by exporting the information

using the Windows regedit utility. This utility lets you export

all of the Registry information to a text file. Follow these steps

to perform the export:

<ol>

<li>From the Windows Start Button, select the <u>R</u>un... option.

<li>Type <b>regedit</b> into the Run dialog box. Figure D.1 shows

the dialog box.<br>

<br>

<a HREF="fd-1.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/fd-1.gif"><b>Figure D.1 : </b><i>Using the Run dialog box to start the regedit

utility</i>.</a>

<li>Click the OK button. The Registry Editor program will start,

as shown in Figure D.2.<br>

<br>

<a HREF="fd-2.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/fd-2.gif"><b>Figure D.2 : </b><i>The Registry Editor is used to view and

modify registry information</i>.</a>

<li>Choose <u>R</u>egistry, <u>E</u>xport Registry File. The dialog

box in Figure D.3 is shown.

<li>Type in a filename (for example, <tt>c:\backup.reg</tt>),

and then click the <u>S</u>ave button.<br>

<br>

<a HREF="fd-3.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/fd-3.gif"><b>Figure D.3 : </b><i>The Export Registry File dialog box</i>.</a>

</ol>

<p>

This procedure creates a text-based backup of the Registry. You

should copy this file onto a diskette or other data storage medium.

You will probably need to compress the resulting backup file siNCe

mine was over 1.8 million bytes in length-too long to place on

a diskette.

<p>

You can also boot your system into DOS mode and copy the <tt>\windows\user.dat</tt>

and <tt>\windows\system.dat</tt> files

either onto a diskette or into a directory other than <tt>\windows</tt>.

<h3><a NAME="HowtoRestoretheRegistry">

How to Restore the Registry</a></h3>

<p>

Now that you know how to back up the Registry by using the export

feature of the Registry Editor, let's look at restoring the Registry

using the import feature. Use this procedure to import the text-based

Registry file:

<ol>

<li>From the Windows Start Button, select the <u>R</u>un... option.

<li>Type <b>regedit</b> into the Run dialog box and click the

OK button.

<li>Choose <u>R</u>egistry, <u>I</u>mport Registry File. The dialog

box in Figure D.4 is shown.

<li>Enter the name of the text-based registry file (for example,

<tt>c:\backup.reg</tt>) and click

the <u>O</u>pen button.

<li>Reboot your system.<br>

<br>

<a HREF="fd-4.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/fd-4.gif"><b>Figure D.4 : </b><i>The Import Registry File dialog box lets

you select a file to restore from</i>.</a>

</ol>

<p>

If your system is still not working, and you have copied the two

Registry files and were created in the previous section, &quot;How

to Back Up the Registry,&quot; then you can try rebooting to DOS

and copy the two backup files directly into the <tt>\windows</tt>

directory. After copying the files, reboot your system.

<p>

If you are still having problems, consider re-installing Windows

or calling an expert for help.

<h2><a NAME="UsingtheRegistry"><font SIZE="5" COLOR="#FF0000">

Using the Registry</font></a></h2>

<p>

At this point, you have some background information about the

Registry, and you know how to make a Registry backup. Let's look

at how to use the Registry. To make Registry access as easy as

possible, I have created an object-oriented module, called <tt>DmmReg.pm</tt>,

for Registry access.<br>

<p>

<center>

<table BORDERCOLOR="#000000" BORDER="1" WIDTH="80%">

<tr><td><b>Note</b></td></tr>

<tr><td>

<blockquote>

The module was called <tt>DmmReg</tt> because there is already a module called <tt>Registry.pm</tt> iNCluded with Perl for Win32. However, that module has little documentation and I wanted to create something special for this book.

</blockquote>



</td></tr>

</table>

</center>

<p>

<p>

The <tt>DmmReg</tt> module was designed

to make Registry access as easy as possible. You do not need in-depth

knowledge of the Registry to use the methods. The examples in

this chapter show you how to open and create keys, read key values,

and list subkeys.<br>

<p>

<center>

<table BORDERCOLOR="#000000" BORDER="1" WIDTH="80%">

<tr><td><b>Tip</b></td></tr>

<tr><td>

<blockquote>

On the other hand, you might feel more comfortable changing the Registry if you know more. If so, read Que's <tt><i>Special Edition Using the Windows 95 Registry</i></tt> by Jerry Honeycutt.

</blockquote>



</td></tr>

</table>

</center>

<p>

<p>

All of the snippets of code that are discussed in the following

sections are collected into one script file called ELST01.PL on

the CD-ROM that accompanies this book. When creating your own

scripts you merely need to cut and paste the lines of code that

you're interested in. You won't need to hunt through four or five

files.

<p>

The next few sections discuss how to do specific Registry tasks

using the <tt>DmmReg</tt> module.

You see how to use the following methods:

<ul>

<li><tt>openKey()</tt>-This constructor

method will open an existing key. It returns the undefined value

if the requested key can't be found in the Registry.

<li><tt>createKey()</tt>-This is another

constructor method. It will create a new key and optionally assign

a value to the default name in one step.

<li><tt>getValue()</tt>-This method

lets you find the value half of a key's name-value pair.

<li><tt>setValue()</tt>-This method

lets you create or modify a key's name-value pair.

<li><tt>getKeys()</tt>-This method

returns an array that contains a list of subkeys for a given key.

<li><tt>getValues()</tt>-This method

returns a hash that contains name-value entries for a given key.

</ul>

<p>

<p>

<center>

<table BORDERCOLOR="#000000" BORDER="1" WIDTH="80%">

<tr><td><b>Tip</b></td></tr>

<tr><td>

<blockquote>

In order to avoid a bit of potential confusion, let me clarify one thing. The <tt>DmmReg</tt> module has <tt><i>two</i></tt> constructor fuNCtions: <tt>createKey()</tt> and <tt>openKey()</tt>. Both fuNCtions will return an object refereNCe. If you aren't 
sure what constructor fuNCtions are, see <a HREF="ch14.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/ch14.htm">Chapter 14</a>, &quot;What Are Objects?&quot;.

</blockquote>



</td></tr>

</table>

</center>

<p>

<h3><a NAME="OpeninganExistingKey">

Opening an Existing Key</a></h3>

<p>

To open an existing Registry key, you need only know the key's

name. For example, if you want to determine if a file association

exists for <tt>.pl</tt> files, check

for the existeNCe of the <tt>HKEY_CLASSES_ROOT\.pl</tt>

key like this:

<p>

<img SRC="pseudo.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/pseudo.gif" BORDER="1" ALIGN="RIGHT" WIDTH="31" HEIGHT="34"><p>

<blockquote>

<i>Specify that this script will use the <font FACE="MCPdigital-I">DmmReg</font>

module.<br>

Specify that strict variable checking should be done.<br>

Declare the <i><font FACE="MCPdigital-I">$handle </font>variable

to be local to the file.<br>

Create an object of type <i><font FACE="MCPdigital-I">HKEY_CLASSES_ROOT</font>

and open the subkey called <font FACE="MCPdigital-I">.pl.</font>

The <font FACE="MCPdigital-I">$handle</font> object will hold

the object refereNCe.<br>

Display a message indicating the existeNCe of the subkey.</i></i></i>

</blockquote>

<blockquote>

<pre>

use DmmReg;

use strict;



my($handle);



$handle = HKEY_CLASSES_ROOT-&gt;openKey('.pl');

print(&quot;There &quot; . 

     (defined($handle)? &quot;is an&quot; : &quot;is no&quot;) . 

    &quot; association for .pl files\.n&quot;);

</pre>

</blockquote>

<p>

If your system does not have any file associations defined for

Perl scripts, this program displays:

<blockquote>

<pre>

There is no association for .pl files.

</pre>

</blockquote>

<p>

The name of the root key is used as the class name and the subkey

name is passed as the only argument to the openKey method.

<p>

If you need to open a key that is deeper in the hierarchy, simply

add the braNChes to the argument of the openKey method.

<blockquote>

<pre>

$handle = HKEY_USERS-&gt;openKey('Default\Software\Microsoft\User

information'); 

</pre>

</blockquote>

<p>

You can also see from this second example that the <tt>DmmReg</tt>

module lets you create more than one type of object. Actually,

you can create a different object for each of the six root keys.

Each class has exactly the same methods and fuNCtionality.

<h3><a NAME="CreatingaNewKey">

Creating a New Key</a></h3>

<p>

Creating a new key is almost as simple as opening an existing

one. You specify the name of the new key, and you optionally specify

a value for the default name-value pair. For example, if you wanted

to create a Registry key that holds the name of the last data

file that your script opened you could do it like this:

<blockquote>

<pre>

$h = HKEY_LOCAL_MACHINE-&gt;createKey(

                             'SOFTWARE\A Perl Test Script\Last Data File', 

                             'C:\TEST.DAT');

</pre>

</blockquote>

<p>

The first argument is the name of the key and the second argument

is the data that will be assigned to the default name.<br>

<p>

<center>

<table BORDERCOLOR="#000000" BORDER="1" WIDTH="80%">

<tr><td><b>Note</b></td></tr>

<tr><td>

<blockquote>

The most confusing aspect of the Registry and its keys is that each key can have both subkeys and name-value pairs associated with it. The default name is represented by an empty string. The <tt>createKey()</tt> method lets you create a new key and assign 
a value to its default name in one step.

</blockquote>



</td></tr>

</table>

</center>

<p>

<p>

You can verify that the assignment worked by using the Registry

Editor. The new key and its default value is shown in Figure D.5.

Some programmers refer to this type of information as <i>persistent</i>

because the Registry key will be around even after your script

has ended. If the key specified as the parameter to the <tt>createKey()</tt>

method already exists, then that key will be opened.

<p>

<a HREF="fd-5.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/fd-5.gif"><b>Figure D.5 : </b><i>Creating persistent information in the Registry</i>.</a>

<p>

As with the <tt>openKey()</tt> method,

you can specify limited access rights when opening a key. You

can also tell Windows that the key should be kept in memory and

not written to disk-a volatile key. However, this level of detail

is more involved than this brief introducton can cover. Please

read <i>Special Edition Using the Windows 95 Registry</i> if you

need more advaNCed information.

<h3><a NAME="FindingaKeysValue">

Finding a Key's Value</a></h3>

<p>

You can find out a key's value by using the <tt>getValue()</tt>

method in the <tt>DmmReg</tt> module.

For example, to read the name of the data file that was written

in the last section, you do this:

<p>

<img SRC="pseudo.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/pseudo.gif" BORDER="1" ALIGN="RIGHT" WIDTH="31" HEIGHT="34"><p>

<blockquote>

<i>Specify that this script will use the <font FACE="MCPdigital-I">DmmReg

</font>module.<br>

Specify that strict variable checking should be done.<br>

Declare the <i><font FACE="MCPdigital-I">$handle </font>and <font FACE="MCPdigital-I">$keyName</font>

variables to be local to the file.<br>

Initialize <i><font FACE="MCPdigital-I">$keyName</font> to be

the name of the key we're interested in.<br>

Call the <i><font FACE="MCPdigital-I">openKey()</font> method,

<font FACE="MCPdigital-I">$handle</font> will hold the object

refereNCe.<br>

Call the <i><font FACE="MCPdigital-I">getValue()</font> method.

The argument to <font FACE="MCPdigital-I">getValue()</font> is

the name of the value to be retrieved. In this instaNCe, the default

value is sought.<br>

Print the data associated with the default value.</i></i></i></i></i>

</blockquote>

<blockquote>

<pre>

use DmmReg;

use strict;



my($handle);

my($keyName) = 'SOFTWARE\A Perl Test Script\Last Data File';

my($value)



$handle = HKEY_LOCAL_MACHINE-&gt;openKey($keyName);

$value  = ($handle-&gt;getValue(''))[1];

print(&quot;The data file was named $value\n&quot;);

</pre>

</blockquote>

<p>

This program displays:

<blockquote>

<pre>

The data file was named C:\TEST.DAT

</pre>

</blockquote>

<p>

You may find the call to the <tt>getValue()</tt>

method to be a little confusing. Let's take a closer look at it:

<blockquote>

<pre>

$data = ($handle-&gt;getValue(''))[1];

</pre>

</blockquote>

<p>

The <tt>getValue()</tt> method returns

an array that holds the data type of the value and the value itself.

SiNCe you only need the value in this example, an array slice

was used. You place parentheses around the entire fuNCtion call

to ensure that the return value is evaluated in an array context.

Then, regular subscripting notation selects the second element

of the returned array. The second element is assigned to <tt>$value</tt>.

<p>

The <tt>DmmReg</tt> module is designed

to work with strings, the most popular type of data stored in

the Registry. While you can work with other data types, like binary

data, you'll need to look at more advaNCed books to find out how.

<h3><a NAME="SettingaKeysNameValuePairs">

Setting a Key's Name-Value Pairs</a></h3>

<p>

You've already seen how to set the value of the default name-value

pair by using the <tt>createKey() </tt>method.

In this section, you use the <tt>setValue()</tt>

method to explicitly set any name-value pair. Let's build on the

example shown in &quot;Creating a New Key.&quot; Perhaps, instead

of just saving one data file, you need to save more than one.

Maybe you have the names of a message file and a data file to

store. You can use the following script as a template:

<p>

<img SRC="pseudo.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/pseudo.gif" BORDER="1" ALIGN="RIGHT" WIDTH="31" HEIGHT="34"><p>

<blockquote>

<i>Specify that this script will use the <font FACE="MCPdigital-I">DmmReg

</font>module.<br>

Specify that strict variable checking should be done.<br>

Declare the <i><font FACE="MCPdigital-I">$handle</font> and <font FACE="MCPdigital-I">$keyName</font>

variables to be local to the file.<br>

Initialize <i><font FACE="MCPdigital-I">$keyName</font> to be

the name of the key we're interested in.<br>

Call the <i><font FACE="MCPdigital-I">createKey()</font> method,

<font FACE="MCPdigital-I">$handle</font> will hold the object

refereNCe.<br>

Call the <i><font FACE="MCPdigital-I">setValue()</font> method

oNCe for each name-value pair that needs to be stored.</i></i></i></i></i>

</blockquote>

<blockquote>

<pre>

use DmmReg;

use strict;



my($handle);

my($keyName) = 'SOFTWARE\A Perl Test Script';



$handle = HKEY_LOCAL_MACHINE-&gt;createKey($keyName);

$handle-&gt;setValue('Data File',    'c:\perl5\test.dat');

$handle-&gt;setValue('Date',         '07-01-1996');

$handle-&gt;setValue('Message File', 'c:\perl5\friday.log');

</pre>

</blockquote>

<p>

After this script is run, you can see the name-value pairs using

the Registry Editor as shown in Figure D.6.

<p>

<a HREF="fd-6.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/fd-6.gif"><b>Figure D.6 : </b><i>A Registry key with four name-value pairs</i>.</a>

<p>

Notice that the default name-value pair is no longer valued. SiNCe

you are using specifying names with the <tt>setValue()</tt>

method, the default name is no longer needed.

<h3><a NAME="GettingaListofSubkeys">

Getting a List of Subkeys</a></h3>

<p>

The <tt>getKeys()</tt> method of the

<tt>DmmReg</tt> module is used to

retrieve a list of subkeys for any specified key. For example,

if you need to find all of the subkeys for the <tt>HKEY_CURRENT_USER\Network</tt>

key use the following code.

<p>

<img SRC="pseudo.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/pseudo.gif" BORDER="1" ALIGN="RIGHT" WIDTH="31" HEIGHT="34"><p>

<blockquote>

<i>Specify that this script will use the <font FACE="MCPdigital-I">DmmReg

</font>module.<br>

Specify that strict variable checking should be done.<br>

Declare variables to be local to the file.<br>

Initialize <i><font FACE="MCPdigital-I">$keyName</font> to be

the name of the key we're interested in.<br>

Open the <i><font FACE="MCPdigital-I">HKEY_CURRENT_USER\Network</font>

subkey.<br>

Check the status of the <i><font FACE="MCPdigital-I">openKey()</font>

method, die if an error occured.<br>

Call the <i><font FACE="MCPdigital-I">getKeys()</font> method.

<br>

Iterate over<i><font FACE="MCPdigital-I"> @subKeys</font> and

display the subkeys.</i></i></i></i></i></i>

</blockquote>

<blockquote>

<pre>

use DmmReg;

use strict;



my($handle);

my($keyName) = 'Network';

my(@subKeys);

my($subKey);



$handle = HKEY_CURRENT_USER-&gt;openKey('Network');

die(&quot;Unable to open $keyName&quot;) unless defined($handle);





$handle-&gt;getKeys(\@subKeys);

foreach $subKey (sort(@subKeys)) {

    print(&quot;$subKey\n&quot;);

}

</pre>

</blockquote>

<p>

This program displays:

<blockquote>

<pre>

Persistent

Recent<br>



</pre>

</blockquote>

<p>

<center>

<table BORDERCOLOR="#000000" BORDER="1" WIDTH="80%">

<tr><td><b>Caution</b></td></tr>

<tr><td>

<blockquote>

There is a bug-that I have not been able to correct-that will not let you get a list of keys starting from one of the six root keys. SiNCe the first level of subkeys do not change, use the Registry Editor to find them.</blockquote>



</td></tr>

</table>

</center>

<p>

<h3><a NAME="GettingaListofNameValuePairs">

Getting a List of Name-Value Pairs</a></h3>

<p>

Earlier, in &quot;Setting a Key's Name-Value Pairs,&quot; you

saw that each Registry key can have name-value pairs associated

with it. You use the <tt>getValues()</tt>

method to get a list of these pairs.

<p>

<img SRC="pseudo.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/pseudo.gif" BORDER="1" ALIGN="RIGHT" WIDTH="31" HEIGHT="34"><p>

<blockquote>

<i>Specify that this script will use the <font FACE="MCPdigital-I">DmmReg

</font>module.<br>

Specify that strict variable checking should be done.<br>

Declare variables to be local to the file.<br>

Initialize <i><font FACE="MCPdigital-I">$keyName</font> to be

the name of the key we're interested in.<br>

Open the <i><font FACE="MCPdigital-I">HKEY_LOCAL_MACHINE\SOFTWARE\A

Perl Test Script </font>subkey.<br>

Call the <i><font FACE="MCPdigital-I">getValues()</font> method

to populate the <font FACE="MCPdigital-I">%pairs</font> hash.

<br>

Iterate over <i><font FACE="MCPdigital-I">%pairs</font> to print

the name-value pairs.</i></i></i></i></i>

</blockquote>

<blockquote>

<pre>

use DmmReg;

use strict;



my($handle);

my($keyName) = 'SOFTWARE\A Perl Test Script';

my($name);

my(%pairs);



$handle = HKEY_LOCAL_MACHINE-&gt;openKey($keyName);

$handle-&gt;getValues(\%pairs);

foreach $name (sort(keys(%pairs))) {

    printf(&quot;%-12.12s: @{$pairs{$name}}[1]\n&quot;, $name);

}

</pre>

</blockquote>

<p>

This program displays:

<blockquote>

<pre>

Data File   : c:\perl5\test.dat

Date        : 07-01-1996

Message File: c:\perl5\friday.log

</pre>

</blockquote>

<h2><a NAME="SomeCommonUsesfortheRegistry"><font SIZE="5" COLOR="#FF0000">

Some Common Uses for the Registry</font></a></h2>

<p>

There are several common uses for the Registry besides storing

configuration information that needs to be persistent:

<ul>

<li><b>To create a file association</b>-You can associate an executable

file with a data file so that when the data file is double-clicked,

the application is started. You can also associate different context

menu options (like Open and Print) with each file extension.

<li><b>To specify an icon</b>-You can use the Registry to determine

which icon is displayed in folders for each file extension.

<li><b>To enable the 'new' context menu option</b>-You can let

the user create new data files by using the new context menu option.

</ul>

<p>

By this time, you understand all of the coNCepts involved in creating

Registry keys and name-value pairs, so the code to do each task

will be presented with very few comments.

<h3><a NAME="CreatingaFileAssociation">

Creating a File Association</a></h3>

<p>

There are three steps to creating file associations:

<ol>

<li>Tell Windows about the file extension. These lines of code

will define extension for both Perl scripts and Perl modules.

The default value is used by Windows as a pointer to another Registry

key where additional information is stored. Step 2 will create

this secondary key.<br>

<br>

<tt>$handle = HKEY_CLASSES_ROOT-&gt;createKey('.pl',

'A Perl File');<br>

$handle = HKEY_CLASSES_ROOT-&gt;createKey('.pm', 'A Perl Module');</tt>

<li>Create a key for the file extension description. The default

value of this key will be used as the file's type in the file's

property list.<br>

<br>

<tt>$handle = HKEY_CLASSES_ROOT-&gt;createKey('A

Perl File',   'Perl Script');<br>

$handle = HKEY_CLASSES_ROOT-&gt;createKey('A Perl Module', 'Perl

<br>

Module');</tt>

<li>Create a key for each context menu option that you are creating.

The keys for the <tt>.pl</tt> extension

is shown here. Change 'A Perl File' to 'A Perl Module' to create

context menu options for <tt>.pm</tt>

files.

</ol>

<blockquote>

<pre>

$handle = HKEY_CLASSES_ROOT-&gt;createKey('A Perl File\Shell\Open\

Command',

'C:\MSOFFICE7\WINWORD\WINWORD.EXE %1');



$handle = HKEY_CLASSES_ROOT-&gt;createKey('A Perl File\Shell\Edit\Command',

'C:\MSOFFICE7\WINWORD\WINWORD.EXE %1');



$handle = HKEY_CLASSES_ROOT-&gt;createKey('A Perl File\Shell\Print\Command',

'C:\MSOFFICE7\WINWORD\WINWORD.EXE /p %1');

</pre>

</blockquote>

<p>

For simplicity's sake, I have all of my associations pointing

to Microsoft Word, you should start whatever editor you normally

use.

<h3><a NAME="SettingtheIconforaFileExtension">

Setting the Icon for a File Extension</a></h3>

<p>

You specify the icon for a file extension by creating a <tt>DefaultIcon</tt>

subkey under the extension description key like this:

<blockquote>

<pre>

$handle = HKEY_CLASSES_ROOT-&gt;createKey('A Perl File\DefaultIcon',

             'C:\WINDOWS\SYSTEM\SHELL32.DLL,27');

</pre>

</blockquote>

<p>

The default value of the <tt>DefaultIcon</tt>

key indicates which DLL and icon number to use. You can experiment

with different icon numbers to find one that you like. Icon number

27 in the <tt>shell32.dll</tt> file

looks like a monitor that is displaying a starburst.

<h3><a NAME="EnablingthenewContextMenuOption">

Enabling the 'new' Context Menu Option</a></h3>

<p>

If you right-click while inside a folder or on the desktop, one

of the context menu options is <tt>new</tt>.

You can add your own file types to the <tt>new</tt>

sub-menu by following these steps:

<ol>

<li>Open the <tt>.pl</tt> extension

key.<br>

<br>

<tt>$handle = HKEY_CLASSES_ROOT-&gt;openKey('.pl');</tt>

<li>Create a subkey called <tt>ShellNew</tt>.

<br>

<br>

<tt>$handle = HKEY_CLASSES_ROOT-&gt;createKey('.pl\ShellNew',

'');</tt>

<li>Create a name-value pair with a name of <tt>NullFile</tt>.

</ol>

<blockquote>

<pre>

$handle-&gt;setValue('NullFile', '');

</pre>

</blockquote>

<p>

If you follow these steps for both the .pl and .pm extensions,

your <tt>new</tt> context menu will

look like Figure D.7.

<p>

<a HREF="fd-7.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/fd-7.gif"><b>Figure D.7 : </b><i>The new sub-menu with options to create

Perl files</i>.</a>

<h2><a NAME="Summary"><font SIZE="5" COLOR="#FF0000">

Summary</font></a></h2>

<p>

This chapter briefly introduced you to the Windows Registry. The

Registry is used to store all types of information about the hardware

and software that are installed on your computer system.

<p>

You learned that there are three root keys (<tt>HKEY_DYN_DATA</tt>,

<tt>HKEY_LOCAL_MACHINE</tt>, and <tt>HKEY_USERS</tt>)

and three shortcut keys (<tt>HKEY_CLASSES_ROOT</tt>,

<tt>HKEY_CURRENT_CONFIG</tt>, and

<tt>HKEY_CURRENT_USER</tt>). These

keys are at the top of a hierarchical structure similar to a directory

tree.

<p>

The Registry information is stored on two files, <tt>user.dat</tt>

and <tt>system.dat</tt>. When the

system is booted, these files are read into memory and the Registry

is created. You read about sing the Registry Editor to export

and import the Registry information for backup and recovery.

<p>

Then, you saw how to use the <tt>DmmReg</tt>

module to access and modify Registry keys and name-value pairs.

Examples were shown that create file association for <tt>.pl</tt>

and <tt>.pm</tt> files; changed their

default icons; and added Perl file types to the <tt>new</tt>

option of the context menu.

<hr>



<center><p><a HREF="ch25.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/ch25.htm"><img SRC="pc.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/pc.gif" BORDER="0" HEIGHT="88" WIDTH="140"></a>

<a HREF="#CONTENTS"><img SRC="cc.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/cc.gif" BORDER="0" HEIGHT="88" WIDTH="140"></a>

<a HREF="index-1.htm" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/index-1.htm"><img SRC="hb.gif" tppabs="http://202.113.16.101/%7eeb%7e/Perl%205%20By%20Example/hb.gif" BORDER="0" HEIGHT="88" WIDTH="140"></a>

<hr WIDTH="100%"></p></center>

</body>

</html>

