<HTML>

<HEAD>
   <TITLE>Chapter 28 -- Client/Server Using Java Applets
and Perl</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT COLOR=#FF0000>Chapter 28</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Client/Server Using Java Applets
and Perl</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>
<UL>
<LI><A HREF="#UsingCGIorSockets" >Using CGI or Sockets</A>
<LI><A HREF="#UsingtheDisk" >Using the Disk</A>
<UL>
<LI><A HREF="#AQuickNoteAboutJava" >A Quick Note About Java</A>
</UL>
<LI><A HREF="#UsingCGIandSockets" >Using CGI and Sockets</A>
<LI><A HREF="#ForMoreInformationonHowtoProgrami" >For More Information on How to Program in Java</A>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
This chapter provides the basic information for getting a client/server
application using Perl 5 and Java applets. After reading this
chapter, you'll understand how to get data from a Perl server
to a Java client.
<P>
The information in this chapter is based on the assumption that
you have read <A HREF="ch12.htm" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/ch12.htm" >Chapter 12</A>, &quot;Using
Sockets.&quot; In this chapter you'll learn how to connect a Java
applet to your socket. This chapter is <I>not</I> meant to be
a tutorial on Java. For programming in Java, you'll have to go
to the sources listed in the section titled &quot;For More Information
on How to Program in Java.&quot;
<H2><A NAME="UsingCGIorSockets"><B><FONT SIZE=5 COLOR=#FF0000>Using
CGI or Sockets</FONT></B></A></H2>
<P>
The first way to hook client applets up to your Perl CGI server
is via a URL page. The basic scenario is that a Perl CGI script
creates an HTML document for your client, based on responses to
a <TT><FONT FACE="Courier">FORM</FONT></TT> or simply via a URL.
The output of your CGI script can even exist on disk in the form
of a file.
<P>
Using the disk to store the data as an intermediate place for
data to reside before it's retrieved by the client may seem like
a crude approach. (Compare this to using a sledgehammer to put
a nail in a wall.) Indeed, using the disk for a file transfer
is a very crude approach and not quite as elegant as using a socket
as the medium from the server to the client. For one thing, you
are writing to disk, which in itself is an inherently slow process
when compared with actions that are performed in memory alone.
Second, you are opening the door to potential file-locking problems.
That is, while your server is writing to disk, a client might
be trying to read the same file.
<P>
Even so, the problem with sockets is the overhead of copies of
a server daemon to handle each client's request. If the data per
request is small enough, writing it to disk won't hurt your computer's
performance. Most Net users at 28.8Kbps won't notice the extra
milliseconds spent on spinning the disk.
<P>
Writing logs to disk has the advantage of keeping a record of
what was sent back. Nightly or even hourly backups of the data
file can help ensure the possibility of reconstructing any previously
sent messages. With data being piped via a socket, you have to
write extra code to save data off to disk.
<P>
Figure 28.1 presents two ways of implementing client/server applications
with Perl. In the first scenario, you are writing intermediate
results to disk while satisfying requests for clients. The client
does not necessarily have to be a Java applet in the first scenario
because the Perl server could be writing HTML pages to disk for
another browser to pick up. In the second case, the results from
a server calculation are sent back directly with the use of a
socket. In this second case, a Java applet would reduce the coding
effort of communicating via sockets because of the built-in socket
support in Java. You are at liberty to write your own client application
to do the client-side socket processing.
<P>
<A HREF="f28-1.gif" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/f28-1.gif" ><B>Figure 28.1 : </B><I>Two ways of communicating between client and server.</I></A>
<P>
Ultimately, it's up to you to decide which approach to take when
designing an interface. If your server and client are guaranteed
to be able to use sockets, by all means code your applet in this
manner. If you are in doubt and are willing to use the disk as
an intermediary, use URLs.
<H2><A NAME="UsingtheDisk"><B><FONT SIZE=5 COLOR=#FF0000>Using
the Disk</FONT></B></A></H2>
<P>
This section focuses on writing a Java applet to collect data
from a file given a URL on a remote machine. The Java applet runs
on a client using a browser. The server in this example is a Perl
script that is used to create a data file. Listing 28.1 presents
the server-side code.
<P>
For using the disk as the intermediary, as in the example presented
here, the Java applet will be configured to read the file. It's
your Perl script's responsibility to ensure that the file is updated
regularly. For example, your Perl script might wake up every five
minutes, collect the temperature from a sensor, and then write
the HTML file.
<P>
The client using your applet will be querying the file that your
script writes. The Perl script to write the test data to a known
file is a format that is well known to other Web browsers. The
Java applet that implements the client side is shown in Listing
28.2.
<HR>
<BLOCKQUOTE>
<B>Listing 28.1. The Perl script to handle server-side details.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;1 #!/usr/bin/perl<BR>
&nbsp;2<BR>
&nbsp;3 #<BR>
&nbsp;4 #&nbsp;&nbsp;Sample &quot;server&quot; script to create
data for Java Applet<BR>
&nbsp;5 #<BR>
&nbsp;6<BR>
&nbsp;7 #<BR>
&nbsp;8 # Flush immediately to disk.<BR>
&nbsp;9 #<BR>
10 $| = 1;<BR>
11 $i = 0;<BR>
12<BR>
13 while(1) {<BR>
14&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;open (TEMPH,&quot;&gt;tst.txt&quot;)
|| die &quot;\n Cannot open \n&quot;;<BR>
15&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$|=1;<BR>
16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$now = `date`;<BR>
17&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print TEMPH &quot;Data updated
\n $now \n&quot;;<BR>
18&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;select TEMPH;<BR>
19&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$| = 1;<BR>
20&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;select STDOUT;<BR>
21&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print &quot;Data updated\n $now
\n&quot;;<BR>
22<BR>
23&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# ------------------------------------------
<BR>
24&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# You may want to increase this
time a bit<BR>
25&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# to allow the client(or clients)
to catch up.<BR>
26&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# ------------------------------------------
<BR>
27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sleep(5);<BR>
28&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;close TEMPH;<BR>
29 #<BR>
30 # If you really want to put a limit to this looping<BR>
31 # then uncomment the following lines.<BR>
32 #<BR>
33 #&nbsp;&nbsp;&nbsp;&nbsp;$i++;<BR>
34 #&nbsp;&nbsp;&nbsp;&nbsp;if ($i &gt; 25) { exit(0); }<BR>
35<BR>
36 } # loop forever.</FONT></TT>
</BLOCKQUOTE>
<HR>
<HR>
<BLOCKQUOTE>
<B>Listing 28.2. Using URLs to display the data.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;&nbsp;1 //<BR>
&nbsp;&nbsp;2 // --------------------------------------------------------
<BR>
&nbsp;&nbsp;3 // Sample Java program to collect text from a remote
site<BR>
&nbsp;&nbsp;4 // --------------------------------------------------------
<BR>
&nbsp;&nbsp;5<BR>
&nbsp;&nbsp;6 //<BR>
&nbsp;&nbsp;7 // The following lines are required classes for
this program<BR>
&nbsp;&nbsp;8 //<BR>
&nbsp;&nbsp;9 import java.awt.*;<BR>
&nbsp;10 import java.io.*;<BR>
&nbsp;11 import java.net.URL;<BR>
&nbsp;12 import java.net.URLConnection;<BR>
&nbsp;13 import java.net.MalformedURLException;<BR>
&nbsp;14<BR>
&nbsp;15 //<BR>
&nbsp;16 // The Applet is declared here<BR>
&nbsp;17 //<BR>
&nbsp;18 public class l28 extends java.applet.Applet implements
Runnable {<BR>
&nbsp;19<BR>
&nbsp;20&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int delta;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
Interval between fetches<BR>
&nbsp;21&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;URL theURL;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
<BR>
&nbsp;22&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread runner;<BR>
&nbsp;23&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TextArea ta = new TextArea(&quot;Synchronizing&quot;,20,20);
<BR>
&nbsp;24<BR>
&nbsp;25 public void init() {<BR>
&nbsp;26&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String lbl = getParameter(&quot;URL&quot;);
<BR>
&nbsp;27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (lbl == null) { lbl =
&quot;http://ikra.com/tst.txt&quot;; }<BR>
&nbsp;28&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<BR>
&nbsp;29&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Collect after 60 seconds
(as default).<BR>
&nbsp;30&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<BR>
&nbsp;31&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delta = 60000;<BR>
&nbsp;32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String dt = getParameter(&quot;DELTA&quot;);
<BR>
&nbsp;33&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (dt == null) { delta
= 60000; }<BR>
&nbsp;34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
{<BR>
&nbsp;35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delta
= Integer.parseInt(dt);<BR>
&nbsp;36&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;37&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<BR>
&nbsp;38&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Never let the user collect
data at less<BR>
&nbsp;39&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// than seven second intervals.
<BR>
&nbsp;40&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<BR>
&nbsp;41&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (dt &lt; 7000) { delta
= 7000; }<BR>
&nbsp;42<BR>
&nbsp;43&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<BR>
&nbsp;44&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Attempt to parse URL
and bail out if you<BR>
&nbsp;45&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// do not have a valid URL
<BR>
&nbsp;46&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<BR>
&nbsp;47&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try { this.theURL = new
URL(lbl); }<BR>
&nbsp;48&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch ( MalformedURLException
e) {<BR>
&nbsp;49&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;Bad
URL:&quot; + lbl);<BR>
&nbsp;50&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;51<BR>
&nbsp;52&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<BR>
&nbsp;53&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// This part needs work
to make the output in<BR>
&nbsp;54&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// the Java Applet look
pretty.<BR>
&nbsp;55&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<BR>
&nbsp;56&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(ta);<BR>
&nbsp;57<BR>
&nbsp;58 }&nbsp;// init function<BR>
&nbsp;59<BR>
&nbsp;60 //<BR>
&nbsp;61 // Your thread's starting function<BR>
&nbsp;62 //<BR>
&nbsp;63 public void start() {<BR>
&nbsp;64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (runner == null) {<BR>
&nbsp;65&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;runner
= new Thread(this);<BR>
&nbsp;66&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;runner.start();
<BR>
&nbsp;67&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;68<BR>
&nbsp;69 } // start<BR>
&nbsp;70<BR>
&nbsp;71 //<BR>
&nbsp;72 // Your thread's stopping function<BR>
&nbsp;73 //<BR>
&nbsp;74 public void stop() {<BR>
&nbsp;75&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (runner != null) {<BR>
&nbsp;76&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;runner.stop();
<BR>
&nbsp;77&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;runner
= null;<BR>
&nbsp;78&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;79 } // stop<BR>
&nbsp;80<BR>
&nbsp;81 //<BR>
&nbsp;82 // While your thread is running this function is called.
<BR>
&nbsp;83 //<BR>
&nbsp;84 public void run() {<BR>
&nbsp;85&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InputStream conn;<BR>
&nbsp;86&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataInputStream din;<BR>
&nbsp;87<BR>
&nbsp;88&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String line;<BR>
&nbsp;89<BR>
&nbsp;90&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (true) {<BR>
&nbsp;91&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<BR>
&nbsp;92&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Pick up the data from
the URL passed into applet&nbsp;<BR>
&nbsp;93&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<BR>
&nbsp;94&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>
&nbsp;95&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;conn
= theURL.openStream();<BR>
&nbsp;96&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;din
= new DataInputStream(new BufferedInputStream(conn));<BR>
&nbsp;97&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringBuffer
buf = new StringBuffer();<BR>
&nbsp;98<BR>
&nbsp;99&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while
((line = din.readLine()) != null) {<BR>
100&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
buf.append(line + &quot;\n&quot;);<BR>
101&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
102&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ta.setText(buf.toString());
<BR>
103&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
104&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (IOException e) {<BR>
105&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Whoops
no data at URL:&quot;); }<BR>
106<BR>
107&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<BR>
108&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// The screen has to be updated.
(Not really needed<BR>
109&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// but it's better to leave the
next line in here for<BR>
110&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// platforms running this applet.)
<BR>
111&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<BR>
112&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();<BR>
113<BR>
114&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<BR>
115&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;Wait a bit before
trying html document again.<BR>
116&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<BR>
117&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>
118&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread.sleep(delta);
<BR>
119&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
120&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (InterruptedException e)
{<BR>
121&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Whoops
no data at URL:&quot;);&nbsp;}<BR>
122&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
123 } //run<BR>
124<BR>
125 } // class l28</FONT></TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME="AQuickNoteAboutJava"><B>A Quick Note About Java</B></A>
</H3>
<P>
The Java programming language was developed at Sun Microsystems
Inc., Mountain View, California, by a group headed by James Gosling.
Java is a platform-independent, object-oriented language developed
primarily for use in household appliances. Java's usefulness extends
far beyond the initial intended use for developing it. Java appeared
at the same time as the World Wide Web (WWW) and was used by Sun
to develop WebRunner, a Web browser written entirely in Java.
(WebRunner was later renamed HotJava to avoid copyright problems.)
<P>
The Java Programming Language is very similar to, but much simpler
than, C++. Numbers and Boolean types serve as basic building blocks
for developing Java classes for object-oriented programming. Programmers
can create their own objects as classes. All classes in Java are
restricted to single-level inheritance only, because a class in
Java may only inherit from one class at a time. Abstract classes
in Java allow definitions of interfaces to permit multiple inheritance.
<P>
A Java <I>applet</I> is the result of running a Java compiler
on Java source code. Basically, in order to create a Java applet,
you need to have a Java Developer's Kit (JDK) on your system.
You can get a JDK for your machine from the Web site <TT><A HREF="tppmsgs/msgs0.htm#45" tppabs="http://www.javasoft.com/">http://www.javasoft.com</A></TT>.
Included in a JDK distribution are compilers, documentation, and
source code for some sample applets that folks were kind enough
to donate for use, with limited copyright restrictions of course,
to the general computing community.
<P>
A Java source file can consist of several objects to implement
a certain set of functionality. The source code for an applet
when run through a Java compiler, <TT><FONT FACE="Courier">javac</FONT></TT>,
produces one or more <TT><FONT FACE="Courier">.Class</FONT></TT>
files, one for each type of object defined in the source file.
Each <TT><FONT FACE="Courier">.Class</FONT></TT> file is a series
of byte codes that are then referred to as &quot;applets.&quot;
<P>
Applets reside on servers and are downloaded to clients when referenced
via a URL. Applets execute on remote sites under the auspices
of the browser that downloaded them. The address space and code
execution are modeled under a process known as the Java Virtual
Machine (JVM). The JVM describes how to implement Java applet
code and addresses issues regarding the ways to parse the byte
codes in an applet. Java is designed to be secure and robust enough
to prevent any applet's byte code's instructions to compromise
the client machine's system. By using the JVM model, byte codes
can be verified by <TT><FONT FACE="Courier">javac</FONT></TT>
to ensure that the resulting applet will not compromise system
integrity.
<P>
Java has support for multithreaded applications built into the
language. A browser running an applet can manage multiple threads
for a Java applet. Java threads are mapped by the browser into
the underlying operating system threads if the underlying system
supports it. Java-enabled browsers are designed and built for
each type of platform, such as Windows NT, 95, Macintosh, and
UNIX workstations.
<P>
Java also has support for network communication via the use of
TCP/IP or UDP sockets as well as with the use of URLs. In essence,
Java is a distributed language because Java applets can retrieve
data from any accessible node on the Internet. The permissions
available for a Java applet to access a file on the Internet can
be the same as those of the browser running the applet. Java applets
cannot have file access permissions that are greater than that
of their host browser for security reasons. Items accessed via
URLs include other HTML pages containing applets, raw files or
images, or links to other sites. Socket support under Java is
implemented using Berkeley (BSD) Socket Extensions.
<P>
For more information about programming in Java, please consult
the books in the section &quot;For More Information on How to
Program in Java,&quot; later in this chapter.
<P>
Line 18 of Listing 28.2 starts a thread for the applet and declares
the <TT><FONT FACE="Courier">l28</FONT></TT> class. The Java program
gets the parameters to itself in lines 26 and 35. A <TT><FONT FACE="Courier">TextArea</FONT></TT>
(<TT><FONT FACE="Courier">ta</FONT></TT>) widget is declared and
added to the applet for the applet to display the incoming data.
<P>
Lines 26 and 32 show the code to extract the two input parameters
to the applet: <TT><FONT FACE="Courier">URL</FONT></TT> and <TT><FONT FACE="Courier">DELTA</FONT></TT>.
The <TT><FONT FACE="Courier">URL</FONT></TT> parameter is a string
containing the URL of where the data is located. The <TT><FONT FACE="Courier">DELTA</FONT></TT>
parameter is used to determine the time interval between successive
tries to extract the data. Default values are used when incoming
values are absurd or absent.
<P>
The <TT><FONT FACE="Courier">start()</FONT></TT> and <TT><FONT FACE="Courier">stop()</FONT></TT>
functions in lines 63 and 74 are called when the applet thread
starts and stops. The code in line 63 is called when a background
thread is created in the applet to do socket communication. The
subroutine in line 74 is called when the thread stops executing.
<P>
The bulk of the work is done in the <TT><FONT FACE="Courier">run()</FONT></TT>
subroutine in line 84, where the running thread connects to the
server in lines 95 to 97, extracts the data in the <TT><FONT FACE="Courier">while</FONT></TT>
loop in line 99, and then displays the received text in a text
area for the applet in line 102.
<P>
If there is an exception, it's of the type <TT><FONT FACE="Courier">IOException</FONT></TT>
and is caught at line 104, where a message is displayed on the
system status bar. The try-and-catch exception-handling mechanism
shown in lines 94 to 105 to fetch data is very common in Java
applet source code. The code in line 105 notifies the applet user
of exceptions like missing data or a bad URL value. The text area
actually updates the screen in line 112 with the <TT><FONT FACE="Courier">repaint()</FONT></TT>
call.
<P>
The loop is repeated starting from the section in line 117 to
fetch the next updated URL.
<P>
Once you have typed the code for the applet, you have to compile
it with the <TT><FONT FACE="Courier">javac</FONT></TT> compiler.
The Java applet is compiled to a <TT><FONT FACE="Courier">l28.class</FONT></TT>
with the following command:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">javac l28.java</FONT></TT>
</BLOCKQUOTE>
<P>
The result of the command is a file called <TT><FONT FACE="Courier">l28.class</FONT></TT>
in the same directory. The prefix of the file and the class name
must be the same.
<P>
To use the applet in your HTML document, you have to use <TT><FONT FACE="Courier">&lt;APPLET&gt;</FONT></TT>
and <TT><FONT FACE="Courier">&lt;/APPLET&gt;</FONT></TT> tags.
A sample usage is shown Listing 28.3.
<HR>
<BLOCKQUOTE>
<B>Listing 28.3. HTML page for using an applet to get text from
a server.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;&nbsp;&nbsp;1 &lt;HTML&gt;<BR>
&nbsp;&nbsp;&nbsp;2 &lt;BODY&gt;<BR>
&nbsp;&nbsp;&nbsp;3 &lt;TITLE&gt;<BR>
&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;Test<BR>
&nbsp;&nbsp;&nbsp;5 &lt;/TITLE&gt;<BR>
&nbsp;&nbsp;&nbsp;6 &lt;H1&gt; Test the applet to recover text
from server &lt;/H1&gt;<BR>
&nbsp;&nbsp;&nbsp;7 &lt;applet code=l28.class width=300 height=400&gt;
<BR>
&nbsp;&nbsp;&nbsp;8 &lt;param name=URL value=&quot;http://ikra.com/tst.txt&quot;&gt;
<BR>
&nbsp;&nbsp;&nbsp;9 &lt;param name=DELTA value=&quot;10000&quot;&gt;
<BR>
&nbsp;&nbsp;10 &lt;/applet&gt;<BR>
&nbsp;&nbsp;11 &lt;/BODY&gt;<BR>
&nbsp;&nbsp;12 &lt;/HTML&gt;</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The code in line 7 shows how to include the applet code. The <TT><FONT FACE="Courier">width</FONT></TT>
and <TT><FONT FACE="Courier">height</FONT></TT> of the applet
are required parameters. The applet will not load if you do not
specify the <TT><FONT FACE="Courier">height</FONT></TT> and <TT><FONT FACE="Courier">width</FONT></TT>.
Line 8 sets the parameter <TT><FONT FACE="Courier">URL</FONT></TT>
to the applet and gives it a value of a complete URL. You can
specify relative URLs as well. Line 9 specifies a second parameter
for the time interval between updates as a string. The interval
can be specified as a string, but this way you'll see how to use
code in the applet to convert from a string to an <TT><FONT FACE="Courier">int</FONT></TT>.
The applet is closed out at line 10 with the <TT><FONT FACE="Courier">&lt;/applet&gt;</FONT></TT>
tag.
<P>
At line 117 of Listing 28.2, the program sleeps for the <TT><FONT FACE="Courier">DELTA</FONT></TT>
period specified. As just seen with I/O handling, this sleep call
also catches the exception of the type <TT><FONT FACE="Courier">InterruptedException</FONT></TT>
in cases of errors. Note that the sleep time in applets is in
milliseconds, whereas in Perl it's in seconds.
<P>
The <TT><FONT FACE="Courier">run()</FONT></TT> function loops
forever until the applet is destroyed by the user selecting another
HTML page.
<P>
As stated earlier, this chapter is not about teaching you to write
Java applets. Instead, this chapter shows you how it's possible
to interface with applets using CGI. The method shown in this
section is a bit crude in that the applet has to wake up and fetch
a document every time. Even cruder is the fact that the Perl script
at the other end has to open a file and then write to and close
it every so many seconds. You might consider keeping the file
open at all times in the Perl server script.
<P>
Another alternative to the scheme shown here is to use UNIX system
facilities to use sockets.
<H2><A NAME="UsingCGIandSockets"><B><FONT SIZE=5 COLOR=#FF0000>Using
CGI and Sockets</FONT></B></A></H2>
<P>
The second example of using Perl and Java together involves using
sockets for client/server communication. The server is written
in Perl, and the client is a Java applet on a client browser.
<P>
The approach to using sockets over files has the obvious advantage
of speed and more efficient use of system services. Of course,
your advantage is minimized a lot if you are echoing what you
write to the socket back onto the disk.
<P>
Also, Perl is portable to platforms that might not support sockets.
For example, Windows-based systems might not have Winsock loaded
correctly, or they might have the wrong version loaded, with which
they can run the browser but cannot access the socket's features.
In such a case where sockets are not supported on your server
side (a rare but true possibility), the first method of using
URLs alone will have to do.
<P>
The server application is pretty straightforward. It binds itself
to a port and listens for a connection. After getting a connection,
the server in this example sends 1,000 data items back to the
connecting client. Each data item sent back has an identifier
that is set to the current time. The identifier is often referred
to as the time stamp for this packet. (See Listing 28.4.)
<P>
The server in this example can be extended to use the <TT><FONT FACE="Courier">fork</FONT></TT>
system call and handle requests via children. The sample shown
here simply bails out after it's done. For a discussion of how
this server works, refer to <A HREF="ch12.htm" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/ch12.htm" >Chapter 12</A>.
See Listing 28.4 for a sample Perl server that simply listens
to a socket and, on receiving a connection, sends some dummy data
back to the calling client.
<HR>
<BLOCKQUOTE>
<B>Listing 28.4. Connection-oriented server using Perl.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;1 #!/usr/bin/perl<BR>
&nbsp;2 # ----------------------------------------------------------
<BR>
&nbsp;3 # Sample connection oriented server using Perl<BR>
&nbsp;4 # ----------------------------------------------------------
<BR>
&nbsp;5 #<BR>
&nbsp;6 $AF_UNIX = 1;<BR>
&nbsp;7 $AF_INET=2;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Use AF_INET
and not AF_UNIX.<BR>
&nbsp;8 $SOCK_STR = 1;&nbsp;&nbsp;# Use STREAMS.<BR>
&nbsp;9 $PROTOCOL = 0;&nbsp;&nbsp;# stick to the default protocols
(IP).<BR>
10<BR>
11 $SIG{'KILL'} = cleanup;<BR>
12 $SIG{'INT'} = cleanup;<BR>
13 $port = 6783 unless $port;<BR>
14<BR>
15 #<BR>
16 # The pattern for packing into a sockaddr structure<BR>
17 #<BR>
18 $PACKIT='S n C4 x8';<BR>
19<BR>
20 #<BR>
21 # Disable any buffering on any newly created sockets.<BR>
22 #<BR>
23 select(NEWSOCKET);<BR>
24 $| = 1;<BR>
25 select(STDOUT);<BR>
26<BR>
27 #<BR>
28 # Create the socket.<BR>
29 #<BR>
30 socket(MY_SOCKET, $AF_INET, $SOCK_STR, $PROTOCOL) ||<BR>
31&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die
&quot;\n $0: Cannot open socket: $!&quot;;<BR>
32 print &quot;Socket successfully opened\n&quot;;<BR>
33<BR>
34 #<BR>
35 # Get the host address for this node<BR>
36 #<BR>
37 ($name, $aliases, $addrtype, $len, @addrs) = gethostbyname(&quot;ikra.com&quot;);
<BR>
38 ($a,$b,$c,$d) = unpack('C4',$addrs[0]);<BR>
39 print &quot;Server Name=$name, Server Address= $a.$b.$c.$d\n&quot;;
<BR>
40 $my_ip_addr = pack($PACKIT,$AF_INET,$port,$addrs[0]);<BR>
41<BR>
42 #<BR>
43 # Bind to the socket and listen on this port<BR>
44 #<BR>
45<BR>
46 bind(MY_SOCKET, $my_ip_addr) || die &quot;$0: Cannot bind ..
$!\n&quot;;<BR>
47<BR>
48 print&nbsp;&nbsp;&quot;\n Bound to socket&quot;;<BR>
49 listen(MY_SOCKET,5)&nbsp;&nbsp;|| die &quot;$0: Cannot listen:
$!\n&quot;;<BR>
50 print&nbsp;&nbsp;&quot;\n Listening \n&quot;;<BR>
51<BR>
52&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$remote = accept(NEWSOCKET, MY_SOCKET)
|| die &quot;$0: Unacceptable: $!\n&quot;;<BR>
53 #<BR>
54 # In case you have to display incoming connection<BR>
55 # information, you can uncomment the next three lines of code:
<BR>
56<BR>
57&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@remoteInfo
= unpack($PACKIT,$remote);<BR>
58&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$, = '
';<BR>
59&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print
@remoteInfo; print &quot; &lt;&lt;- Remote \n&quot;;<BR>
60<BR>
61&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;close MY_SOCKET;<BR>
62&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;select(NEWSOCKET);<BR>
63&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$| = 1;<BR>
64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print NEWSOCKET &quot;Kamran was
here\n&quot;;<BR>
65&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print NEWSOCKET &quot;Another
line\n&quot;;<BR>
66&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$i = 0;<BR>
67&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srand();<BR>
68&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(1){<BR>
69&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$tick
= rand() * 100;<BR>
70<BR>
71<BR>
72&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf
&quot; $i: %6.2f \n&quot;, $tick;<BR>
73&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$i++;
<BR>
74&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ($i
&gt; 1000)<BR>
75&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
76&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;close
NEWSOCKET;<BR>
77&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(0);
<BR>
78&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
79&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
80&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;close NEWSOCKET;<BR>
81<BR>
82 exit(0);<BR>
83<BR>
84 sub cleanup {<BR>
85 print &quot;\n Being killed &quot;;<BR>
86 close MY_SOCKET;<BR>
87 die &quot;$0: Cleanup : $!\n&quot;;<BR>
88 }<BR>
89</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Note that in line 24 in the server script shown in Listing 28.4,
all output is flushed immediately to the socket with the <TT><FONT FACE="Courier">$|=1;</FONT></TT>
command. The client Java applet to talk to the server is also
shown. Two classes are defined in this source file:
<UL>
<LI><FONT COLOR=#000000>The </FONT><TT><FONT FACE="Courier">cl28</FONT></TT>
class for the applet itself
<LI><FONT COLOR=#000000>The </FONT><TT><FONT FACE="Courier">StreamComm</FONT></TT>
class for listening for data on the socket to the Perl server
</UL>
<P>
After you compile the Java program in Listing 28.4, you'll get
two files in your directory:
<UL>
<LI><TT><FONT FACE="Courier">cl28.class</FONT></TT>
<LI><TT><FONT FACE="Courier">StreamComm.class</FONT></TT>
</UL>
<P>
The Java program takes two parameters: the port name and the host
name. No timeout value is given because the applet always reads
and displays immediately what it sees on the socket. The parameters
into the applet are handled in lines 26 and 42 in Listing 28.4.
<P>
The applet itself is included in an HTML file, as illustrated
by Listing 28.5.
<HR>
<BLOCKQUOTE>
<B>Listing 28.5. Using the socket applet.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;1<BR>
&nbsp;2 &lt;HTML&gt;<BR>
&nbsp;3 &lt;BODY&gt;<BR>
&nbsp;4 &lt;TITLE&gt;  Test<BR>
&nbsp;5 &lt;/TITLE&gt;<BR>
&nbsp;6 &lt;applet code=cl28.class width=300 height=100&gt;<BR>
&nbsp;7 &lt;param name=HOST value=&quot;ikra.com&quot;&gt;<BR>
&nbsp;8 &lt;param name=PORT value=&quot;6783&quot;&gt;<BR>
&nbsp;9 &lt;/applet&gt;<BR>
10 &lt;/BODY&gt;<BR>
11 &lt;/HTML&gt;</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Lines 6 through 9 define the parameters into the new applet, called
<TT><FONT FACE="Courier">cl28.class</FONT></TT>. The required
<TT><FONT FACE="Courier">width</FONT></TT> and <TT><FONT FACE="Courier">height</FONT></TT>
parameters are also provided where the applet is declared.
<P>
The code for the applet itself is shown in Listing 28.6.
<HR>
<BLOCKQUOTE>
<B>Listing 28.6. Java applet using sockets.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;&nbsp;1 // --------------------------------------------------------
<BR>
&nbsp;&nbsp;2 //&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Using
Sockets<BR>
&nbsp;&nbsp;3 // --------------------------------------------------------
<BR>
&nbsp;&nbsp;4 // Sample Java program to collect text from a remote
site<BR>
&nbsp;&nbsp;5 // --------------------------------------------------------
<BR>
&nbsp;&nbsp;6 //<BR>
&nbsp;&nbsp;7 // The following lines are required classes for
this program<BR>
&nbsp;&nbsp;8<BR>
&nbsp;&nbsp;9 import java.applet.*;<BR>
&nbsp;10 import java.awt.*;<BR>
&nbsp;11 import java.io.*;<BR>
&nbsp;12 import java.net.*;<BR>
&nbsp;13<BR>
&nbsp;14<BR>
&nbsp;15 //<BR>
&nbsp;16 // The applet begins here.<BR>
&nbsp;17 //<BR>
&nbsp;18 public class cl28 extends Applet {<BR>
&nbsp;19<BR>
&nbsp;20&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<BR>
&nbsp;21&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Declare the socket,port
tuple here<BR>
&nbsp;22&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<BR>
&nbsp;23&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public int PORT;<BR>
&nbsp;24&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Socket s;<BR>
&nbsp;25&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataInputStream din;<BR>
&nbsp;26&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TextArea txtOut;<BR>
&nbsp;27<BR>
&nbsp;28&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<BR>
&nbsp;29&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// This class is derived
from the<BR>
&nbsp;30&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&quot;Java
in a Nutshell&quot; book<BR>
&nbsp;31&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<BR>
&nbsp;32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StreamComm listener;<BR>
&nbsp;33<BR>
&nbsp;34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void init() {<BR>
&nbsp;35<BR>
&nbsp;36&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String host = getParameter(&quot;HOST&quot;);
<BR>
&nbsp;37&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<BR>
&nbsp;38&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// DO NOT FORGET TO chANGE
THE HOST NAME FROM<BR>
&nbsp;39&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// ikra.com TO THE NODE
NAME YOUR SERVER IS ON!!<BR>
&nbsp;40&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<BR>
&nbsp;41&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (host == null) { host
= &quot;ikra.com&quot;; }<BR>
&nbsp;42&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String port = getParameter(&quot;PORT&quot;);
<BR>
&nbsp;43<BR>
&nbsp;44&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<BR>
&nbsp;45&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Set the default at 6970
<BR>
&nbsp;46&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<BR>
&nbsp;47&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (port == null) { PORT
= 6970; }<BR>
&nbsp;48&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else {<BR>
&nbsp;49&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>
&nbsp;50&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PORT
= Integer.parseInt(port);<BR>
&nbsp;51&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
catch (NumberFormatException e) {<BR>
&nbsp;52&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PORT
= 6970;<BR>
&nbsp;53&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;54<BR>
&nbsp;55&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;56<BR>
&nbsp;57<BR>
&nbsp;58&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<BR>
&nbsp;59&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Use the socket &quot;s&quot;
to connect to server.<BR>
&nbsp;60&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<BR>
&nbsp;61&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>
&nbsp;62&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s
= new Socket(host,PORT);<BR>
&nbsp;63&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;din
= new DataInputStream(s.getInputStream());<BR>
&nbsp;64<BR>
&nbsp;65&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;txtOut
= new TextArea(&quot;txtOut&quot;, 20, 25);<BR>
&nbsp;66&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.add(txtOut);
<BR>
&nbsp;67<BR>
&nbsp;68<BR>
&nbsp;69&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;listener
= new StreamComm(din, txtOut);<BR>
&nbsp;70<BR>
&nbsp;71&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showStatus(&quot;Connect:&quot;
+<BR>
&nbsp;72&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s.getInetAddress().getHostName()
+<BR>
&nbsp;73&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;:&quot;
+ s.getPort());<BR>
&nbsp;74<BR>
&nbsp;75&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} // try<BR>
&nbsp;76&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (IOException e) {
<BR>
&nbsp;77&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showStatus(e.toString());
<BR>
&nbsp;78&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} // catch<BR>
&nbsp;79 } // init<BR>
&nbsp;80<BR>
&nbsp;81&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<BR>
&nbsp;82&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// When your thread stops
<BR>
&nbsp;83&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<BR>
&nbsp;84&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void stop() {<BR>
&nbsp;85&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {<BR>
&nbsp;86&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s.close();
<BR>
&nbsp;87&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
// try<BR>
&nbsp;88&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch
(IOException e) {<BR>
&nbsp;89&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showStatus(e.toString());
<BR>
&nbsp;90&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
// catch<BR>
&nbsp;91&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;92<BR>
&nbsp;93 } // class cl28<BR>
&nbsp;94<BR>
&nbsp;95<BR>
&nbsp;96 //<BR>
&nbsp;97 // Class to put some wrapper around the Socket reading
<BR>
&nbsp;98 // code.<BR>
&nbsp;99 class StreamComm extends Thread {<BR>
100<BR>
101&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataInputStream din;<BR>
102&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TextArea outp;<BR>
103&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringBuffer buf;<BR>
104<BR>
105&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public StreamComm(DataInputStream
in, TextArea output) {<BR>
106&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.din
= in;<BR>
107&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.outp
= output;<BR>
108&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.start();
<BR>
109&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf =
new StringBuffer();<BR>
110&nbsp;&nbsp;&nbsp;&nbsp; }<BR>
111<BR>
112<BR>
113&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void run() {<BR>
114<BR>
115&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String line;<BR>
116<BR>
117&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(;;) {<BR>
118&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
119&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outp.setText(&quot;Reading&quot;);
<BR>
120&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line
= din.readLine();<BR>
121&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(line == &quot;end&quot;) break;<BR>
122&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
(line == null)<BR>
123&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
124&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outp.setText(&quot;NULL&quot;);
<BR>
125&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
<BR>
126&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
127&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(line
+ &quot;\n&quot;);<BR>
128&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outp.setText(buf.toString());
<BR>
129<BR>
130<BR>
131&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} //
try reading<BR>
132&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch
(IOException e) {<BR>
133&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outp.setText(e.toString());
<BR>
134&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
135<BR>
136<BR>
137&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} // for loop<BR>
138&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} // run function<BR>
139<BR>
140 } // class StreamComm</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
In this Java applet, lines 105 to 109 in the <TT><FONT FACE="Courier">StreamComm</FONT></TT>
constructor copy the values of local variables in the applet.
Line 120 is where the <TT><FONT FACE="Courier">StreamComm</FONT></TT>
thread reads the incoming input and sets it in a string buffer.
The helper class <TT><FONT FACE="Courier">StreamComm</FONT></TT>
loops forever, until the applet is no longer referenced in its
containing HTML document.
<H2><A NAME="ForMoreInformationonHowtoProgrami"><B><FONT SIZE=5 COLOR=#FF0000>For
More Information on How to Program in Java</FONT></B></A></H2>
<P>
The online information on Java is perhaps the best source for
information on how to write Java applets. Here are the sites to
visit:
<UL>
<LI><TT><FONT FACE="Courier">www.javasoft.com</FONT></TT>
<LI><TT><FONT FACE="Courier">www.sun.com</FONT></TT>
</UL>
<P>
The online Application Programming Interface (API) on the sites
is usually the most current one to use. There are some texts already
on the market. I used the following books as references for my
work on this chapter and in Java programming:
<UL>
<LI><I>Teach Yourself Java in 21 Days</I>, Laura Lemay and Charles
Perkins, Sams Publishing, 1996.
<LI><I>Hooked on Java</I>, Aurthor Van Hoff, Sami Shaio, Orca
Starbuck, and Sun Microsystems Inc., Addison Wesley Publishing
Co., 1996.
<LI><I>Java in a Nutshell</I>, David Flanagan, O'Reilly and Associates,
1996.
<LI><I>Java!</I>, Tim Ritchey, New Riders Publishing, 1995.
</UL>
<H2><A NAME="Summary"><B><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></B></A>
</H2>
<P>
This chapter introduced you to interfacing your Perl scripts to
Java applets by using files or sockets. Each method has its own
merits. Using files gives you a semi-permanent record of what
was sent, and multiplexing is easy because multiple socket/child
process pairs do not have to be opened up to each client. The
downside is the use of the disk and slower processing overall.
Using sockets provides security, speed, and more efficient use
of resources. However, the con side of socket usage is the limitation
on the number of connections your server can use to transfer data
to clients. If you intend to transfer data to a large number of
clients, consider using files. If security is an issue, use sockets.
<P>
The methods discussed here are not the only ones available to
you. Using the Perl/Tk toolkit, you can draw comparable analogies
to display data via sockets as well, but you'll have to write
your own process and input-handling routines. (The Perl/Tk toolkit
is discussed in <A HREF="ch17.htm" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/ch17.htm" >Chapter 17</A>, &quot;GUI
Interfaces with Perl/Tk.&quot;) If there is a browser that will
do most of the work for you, why not use it instead? You should
base your design decisions on using the best tools available.
<P>
<HR WIDTH="100%"></P>

<CENTER><P><A HREF="ch27.htm" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/ch27.htm"><IMG SRC="pc.gif" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="#CONTENTS"><IMG SRC="cc.gif" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="index.htm" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/index.htm"><IMG SRC="hb.gif" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="ch29.htm" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/ch29.htm"><IMG 
SRC="nc.gif" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A></P></CENTER>

<P>
<HR WIDTH="100%"></P>

</BODY>
</HTML>
