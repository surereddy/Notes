<HTML>

<HEAD>
   <TITLE>Chapter 17 -- GUI Interfaces with Perl/Tk</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT COLOR=#FF0000>Chapter 17</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>GUI Interfaces with </FONT><TT><FONT FACE="Courier" COLOR=#FF0000>Perl/Tk</FONT></TT></FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>

<UL>
<LI><A HREF="#IntroductiontothePerlTkPackage" >Introduction to the Perl/Tk Package</A>
<UL>
<LI><A HREF="#AbouttheAuthorsofthePerlTkPackage" >About the Authors of the Perl/Tk Package</A>
</UL>
<LI><A HREF="#WhereDoIGetandBuildPerlTk" >Where Do I Get and Build Perl/Tk?</A>
<LI><A HREF="#DocumentationforPerlTk" >Documentation for Perl/Tk</A>
<LI><A HREF="#WritingScriptsinPerlTk" >Writing Scripts in Perl/Tk</A>
<LI><A HREF="#WidgetsasBuildingBlocks" >Widgets as Building Blocks</A>
<LI><A HREF="#ConfiguringWidgets" >Configuring Widgets</A>
<UL>
<LI><A HREF="#UsingCheckButtonWidgets" >Using CheckButton Widgets</A>
<LI><A HREF="#UsingRadioButtonWidgets" >Using RadioButton Widgets</A>
<LI><A HREF="#CallingSubroutinesWhenaButtonIsPre" >Calling Subroutines When a Button Is Pressed</A>
<LI><A HREF="#ArrangingtheLayoutofWidgets" >Arranging the Layout of Widgets</A>
<LI><A HREF="#UsingtheListboxandScrollbarWidgets" >Using the Listbox and Scrollbar Widgets</A>
<LI><A HREF="#UsingTextWidgets" >Using Text Widgets</A>
<LI><A HREF="#SpecifyingFontsforTextandOtherWidg" >Specifying Fonts for Text and Other Widgets</A>
<LI><A HREF="#TextEntryWidgets" >Text Entry Widgets</A>
</UL>
<LI><A HREF="#HandlingtheKeyboardwithKeyBindings" >Handling the Keyboard with Key Bindings</A>
<LI><A HREF="#DisplayingaBitmap" >Displaying a Bitmap</A>
<LI><A HREF="#DisplayingImageswithPhoto" >Displaying Images with Photo</A>
<LI><A HREF="#Menus" >Menus</A>
<LI><A HREF="#TheCanvasWidget" >The Canvas Widget</A>
<LI><A HREF="#MiscellaneousTopics" >Miscellaneous Topics</A>
<UL>
<LI><A HREF="#ReferenceswithSubroutines" >References with Subroutines</A>
<LI><A HREF="#ChangingtheCursor" >Changing the Cursor</A>
<LI><A HREF="#DebuggingYourPerlTkScripts" >Debugging Your Perl/Tk Scripts</A>
<LI><A HREF="#MoreThanOneInputFileHandle" >More Than One Input File Handle</A>
<LI><A HREF="#EliminatingandHidingWindows" >Eliminating and Hiding Windows</A>
<LI><A HREF="#CreatingMoreThanOneIndependentWindo" >Creating More Than One Independent Window</A>
</UL>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
This chapter introduces you to using the <TT><FONT FACE="Courier">Perl/Tk</FONT></TT>
package to create graphical user interfaces (GUI) with Perl. After
reading and working through the examples in this chapter, you
should be able to create interactive user interfaces for your
Perl scripts with very short design times.
<H2><A NAME="IntroductiontothePerlTkPackage"><FONT SIZE=5 COLOR=#FF0000>Introduction
to the </FONT><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">Perl/Tk</FONT></TT><FONT SIZE=5 COLOR=#FF0000>
Package</FONT></A></H2>
<P>
The set of <TT><FONT FACE="Courier">Tk</FONT></TT> modules attempts
to tie the <TT><FONT FACE="Courier">Tk</FONT></TT> widget toolkit
with Perl 5. The set is referred to as <TT><FONT FACE="Courier">Perl/Tk</FONT></TT>,
<TT><FONT FACE="Courier">pTk</FONT></TT>, or even <TT><FONT FACE="Courier">ptk</FONT></TT>.
The idea behind the merging of this set is to get the best features
of both languages: Perl has very good text handling, regular expression
support, dynamic memory, file and pipe I/O, and object-oriented
capabilities for processing data; <TT><FONT FACE="Courier">Tk</FONT></TT>
gives you a quick and easy way to create GUI programs. <TT><FONT FACE="Courier">Perl/Tk</FONT></TT>
is most easily used on a UNIX computer platform running the X
Window system. <TT><FONT FACE="Courier">Perl/Tk</FONT></TT> does
not require any of the lexical features of the <TT><FONT FACE="Courier">Tcl</FONT></TT>
scripting language. In other words, you do not have to be an expert
at <TT><FONT FACE="Courier">Tcl/Tk</FONT></TT>, but it will be
in your best interest to have worked with the <TT><FONT FACE="Courier">Tcl/Tk</FONT></TT>
toolkit on its own to take the most advantage of the <TT><FONT FACE="Courier">Perl/Tk</FONT></TT>
package.This chapter will not make you a <TT><FONT FACE="Courier">Tk</FONT></TT>
expert. I assume you have a rudimentary working knowledge of <TT><FONT FACE="Courier">Tcl/Tk</FONT></TT>
programming. However, if you have never used <TT><FONT FACE="Courier">Tcl/Tk</FONT></TT>
before, now would be a good time to read the sample code for your
<TT><FONT FACE="Courier">Tcl/Tk</FONT></TT> package on your system.
Here is a good starting reference book by the author of <TT><FONT FACE="Courier">Tcl</FONT></TT>
himself, Dr. John K. Ousterhout, professor at the University of
California at Berkeley:
<BLOCKQUOTE>
<I>Tcl and the Tk Toolkit</I>, John K. Ousterhout, ISBN 0-201-63337-X,
<BR>
Addison-Wesley Publishing Company, 1994
</BLOCKQUOTE>
<P>
There is one thing to remember when reading his book: You still
have to translate the <TT><FONT FACE="Courier">Tcl/Tk</FONT></TT>
scripts to Perl. 
<P>
The <TT><FONT FACE="Courier">pTk</FONT></TT> library is a version
of the <TT><FONT FACE="Courier">Tk</FONT></TT> 4.0 toolkit. The
library allows easier external linking and calling by Perl scripts
and can be modularized. A number of composite widget extensions
to the language have been written using Perl modules. Note that
<TT><FONT FACE="Courier">ptk</FONT></TT> does not necessarily
refer to <TT><FONT FACE="Courier">Perl/Tk</FONT></TT>, but could
be taken to mean <I>portable Tk</I>; that is, portable to another
language such as Perl, C, LISP, C++, and so on. It just so happens
that our present work concentrates on Perl.
<H3><A NAME="AbouttheAuthorsofthePerlTkPackage">About the Authors
of the <TT><FONT SIZE=4 FACE="Courier">Perl/Tk</FONT></TT><FONT SIZE=4>
Package</FONT></A></H3>
<P>
The <TT><FONT FACE="Courier">Perl/Tk</FONT></TT> package is still
in beta phase and is being written primarily by Nick Ing-Simmons
<TT><FONT FACE="Courier">&lt;Nick.Ing-Simmons@tiuk.ti.com&gt;</FONT></TT>
at Texas Instruments in Northampton, England. Mr. Nick was gracious
enough to let us use his examples as the basis for the code samples
in this chapter. He asked me to remind you that he is no way liable
for how you use his package. He also requests that you give him
credit for his authorship when you do use it. With regard to liability,
he provides the following comments: <P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=586><B>License Agreement</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=586>
<BLOCKQUOTE>
<FONT SIZE=2>IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL, IncIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY DERIVATIVES THEREOF, EVEN IF THE 
AUTHORS HAVE BEEN ADVISED OF THE POSSIBILITY OF SUch DAMAGE.</FONT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<FONT SIZE=2>THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES, IncLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERchANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT. THIS SOFTWARE IS PROVIDED ON AN &quot;AS 
IS&quot; BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE NO OBLIGATION TO PROVIDE MAINTENAncE, SUPPORT, UPDATES, ENHAncEMENTS, OR MODIFICATIONS.</FONT>
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
<TT><FONT FACE="Courier">TkPerl</FONT></TT> was originally the
name of a Perl 4 package that Mr. Malcolm Beattie, <TT><FONT FACE="Courier">&lt;mbeattie@sable.ox.ac.uk&gt;</FONT></TT>,
at Oxford University used to mesh the <TT><FONT FACE="Courier">Tk</FONT></TT>
toolkit with Perl. He also authored a <TT><FONT FACE="Courier">Tcl</FONT></TT>
module for Perl 5 with a <TT><FONT FACE="Courier">Tcl::Tk</FONT></TT>
module extension. That module allows the use of <TT><FONT FACE="Courier">Tcl</FONT></TT>
within a Perl script. You still must know both languages to get
your widgets to work. I do not cover these libraries here.<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Tip</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
The name <TT><FONT FACE="Courier">Tkperl</FONT></TT> is sometimes applied to the <TT><FONT FACE="Courier">Perl/Tk</FONT></TT>, <TT><FONT FACE="Courier">pTk</FONT></TT>, or <TT><FONT FACE="Courier">ptk</FONT></TT> package.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Caution</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
Do <I>not</I> attempt to install both <TT><FONT FACE="Courier">perl/Tk</FONT></TT> and <TT><FONT FACE="Courier">Tcl/Tkperl</FONT></TT> in the same Perl installation. The names in the respective modules must overlap or something. I had the darnedest time 
getting some of scripts to work right. Turns out that there is a warning note in the FAQ about this behavior. I could not get both of them to work together in the same Perl installation tree. Bowing to editorial schedules, I blew away all the <TT><FONT 
FACE="Courier">Tk*</FONT></TT> directories and installed <TT><FONT FACE="Courier">Tk-b9.01</FONT></TT> only. Things improved a bit, but some of the samples do not work at all.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
A more extensive comparison of the differences between the <TT><FONT FACE="Courier">Tkperl</FONT></TT>
and the <TT><FONT FACE="Courier">Perl/Tk</FONT></TT> code is given
in the <TT><FONT FACE="Courier">Tcl-perl.pod</FONT></TT> file
that is distributed with the latest <TT><FONT FACE="Courier">Perl/Tk</FONT></TT>
package. The FAQs for <TT><FONT FACE="Courier">Perl/Tk</FONT></TT>
did provide some hints about getting the two packages to work
together along with some friendly warnings about it not being
very easy to do.
<H2><A NAME="WhereDoIGetandBuildPerlTk"><FONT SIZE=5 COLOR=#FF0000>Where
Do I Get and Build </FONT><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">Perl/Tk</FONT></TT><FONT SIZE=5 COLOR=#FF0000>?</FONT></A>
</H2>
<P>
At the time this book was written, the latest version was <TT><FONT FACE="Courier">Tk-b9.01</FONT></TT>.
You'll need <TT><FONT FACE="Courier">Perl 5.002b1</FONT></TT>
or later to be able to work with the <TT><FONT FACE="Courier">Tk-b9.01</FONT></TT>
kit. If you are like me and are skipping chapters while reading
a book, don't skip the installation of Perl 5.002. There are some
patches to 5.001m, but the 5.002 code will already have these
patches in there. You need Perl 5.002, so install it first.
<P>
You can get the toolkit from any CPAN site. Here are the sites
where I found the latest versions:
<P>
<BLOCKQUOTE>
<TT><FONT FACE="Courier"><A HREF="tppmsgs/msgs0.htm#15" tppabs="ftp://ftp.cis.ufl.edu/pub/perl/CPAN/">ftp://ftp.cis.ufl.edu/pub/perl/CPAN/</A>
<BR>
<A HREF="tppmsgs/msgs0.htm#16" tppabs="ftp://ftp.uoknor.edu/mirrors/CPAN/">ftp://ftp.uoknor.edu/mirrors/CPAN/</A><BR>
<A HREF="tppmsgs/msgs0.htm#17" tppabs="ftp://ftp.metronet.com/pub/perl">ftp://ftp.metronet.com/pub/perl</A><BR>
<A HREF="tppmsgs/msgs0.htm#18" tppabs="ftp://ftp.perl.com/CPAN">ftp://ftp.perl.com/CPAN</A></FONT></TT>
</BLOCKQUOTE>
<P>
Several more sites are listed in the FAQ and via the search results
in Netscape Navigator. Try to get the package from a site that's
geographically nearest you.
<P>
Building the <TT><FONT FACE="Courier">Perl/Tk</FONT></TT> package
after you get it is going to take some time and effort on your
part. If you get any errors, most of them will be due to the use
of out-of-date libraries or the wrong version of Perl, or both.
Read the following directions carefully before you begin the installation.
<P>
First, unpack <TT><FONT FACE="Courier">perl/Tk</FONT></TT> in
your home directory. This will be your <TT><FONT FACE="Courier">Tk</FONT></TT>
build directory and will not corrupt any existing Perl 5 tree
should something go wrong. Unzip and untar the files in this test
directory. Use these commands:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">gunzip Tk-b9.01.tar.gz<BR>
tar -xvf Tk-b9.01.tar</FONT></TT>
</BLOCKQUOTE>
<P>
Next, create the make files. First, change the directory to the
<TT><FONT FACE="Courier">Tk/build</FONT></TT> directory, and then
run the following commands to get to the directory, create the
Makefiles, and create the package, respectively:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">cd Tk-b9.01&nbsp;&nbsp;&nbsp;&nbsp; 
<BR>
perl Makefile.PL<BR>
make<BR>
make install&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</FONT></TT>
</BLOCKQUOTE>
<P>
After you have built the files, check to see if you had any errors.
<P>
It's <I>not</I> a good idea to take a coffee break while this
builds because some error messages might not be fatal and you
may have an incomplete build and not see the error messages fly
by. Take note of any missing references to libraries or header
files.
<P>
If there were any errors due to missing make files or references
to some header files, check the <TT><FONT FACE="Courier">cc</FONT></TT>
command in the make files for the directory with the offending
error. Chances are that you do not have any inclusions of the
<TT><FONT FACE="Courier">pTk</FONT></TT> subdirectory header files.
To help this out, try including the <TT><FONT FACE="Courier">$(Inc)</FONT></TT>
variable in the <TT><FONT FACE="Courier">$ccCMD</FONT></TT> statement
in the <TT><FONT FACE="Courier">GNUmakefile</FONT></TT> file.
You may have to do this for all the subdirectories under the <TT><FONT FACE="Courier">Tk</FONT></TT>
directory. Most of the errors I got during the build process were
correctable with this inclusion.
<P>
Now, test the demo programs in the <TT><FONT FACE="Courier">./Tk/demos</FONT></TT>
directory. Not all of the demos worked on my Linux system. The
major complaint concerns <TT><FONT FACE="Courier">CreateArgs()</FONT></TT>
in the <TT><FONT FACE="Courier">Toplevel</FONT></TT> module causing
too many recursive calls. You may fare better. Minor tweaking
did not remove this error. Major surgery seemed too daunting a
task at this stage. Basically, any demo involving dialog boxes
did not work. Do not waste your time trying to get these demos
to work. Here is the error message that showed this problem:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Deep recursion on subroutine &quot;CreateArgs&quot;
<BR>
at /usr/lib/perl5/Tk/Toplevel.pm line 16.</FONT></TT>
</BLOCKQUOTE>
<P>
Even with this annoying bug, you should be able to install and
work with the rest of the <BR>
package. 
<P>
If you use the most current versions of the C++ compiler and make
files, circa 1994 or later, and X11R6, you should have no problems.
In case of problems, please consult the <TT><FONT FACE="Courier">FAQ</FONT></TT>,
<TT><FONT FACE="Courier">INSTALL</FONT></TT>, or <TT><FONT FACE="Courier">README</FONT></TT>
files for your specific system.<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Tip</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
Keep in mind that your installation may have Perl in a different place than shown here. Instead of <TT><FONT FACE="Courier">/usr/bin/perl</FONT></TT>, you may have to use <TT><FONT FACE="Courier">/usr/local/bin/perl</FONT></TT>.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H2><A NAME="DocumentationforPerlTk"><FONT SIZE=5 COLOR=#FF0000>Documentation
for </FONT><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">Perl/Tk</FONT></TT></A>
</H2>
<P>
The <TT><FONT FACE="Courier">make install</FONT></TT> execution
installs the <TT><FONT FACE="Courier">pod</FONT></TT> files for
you in <TT><FONT FACE="Courier">nroff</FONT></TT> format. Check
the <TT><FONT FACE="Courier">perl5/Tk/</FONT></TT> directory for
the file <TT><FONT FACE="Courier">UserGuide.pod</FONT></TT>. This
file is editable and readable by humans. <TT><FONT FACE="Courier">pod</FONT></TT>
files have to be interpreted through a reformatting program such
as <TT><FONT FACE="Courier">pod2man</FONT></TT>, <TT><FONT FACE="Courier">pod2html</FONT></TT>,
or <TT><FONT FACE="Courier">pod2latex</FONT></TT>, all of which
should be in your Perl distribution.
<P>
The following commands provide you with information in HTML files
or in <TT><FONT FACE="Courier">man</FONT></TT> pages:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">pod2man ~khusain/p5/Tk/UserGuide.pod
| nroff -man | more<BR>
pod2html ~khusain/p5/Tk/UserGuide<BR>
perldoc Toplevel.pm</FONT></TT>
</BLOCKQUOTE>
<P>
The most visually pleasing of the three methods is the <TT><FONT FACE="Courier">pod2html</FONT></TT>
method:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">$ <B>pod2html perl5/Tk/Dial.pm<BR>
</B>Creating Dial.pm.html from Dial.pm</FONT></TT>
</BLOCKQUOTE>
<P>
The output of this command is as follows (you can use Mosaic or
Netscape to view the contents of this file):
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&lt;!-- $Id$ --&gt;<BR>
&lt;HTML&gt;&lt;HEAD&gt;<BR>
&lt;CENTER&gt;&lt;TITLE&gt;Dial.pm&lt;/TITLE&gt;<BR>
&lt;/HEAD&gt;<BR>
&lt;BODY&gt;&lt;/CENTER&gt;&lt;p&gt;&lt;hr&gt;<BR>
<BR>
&lt;H1&gt;<BR>
&lt;A NAME=&quot;Dial.pm_name_0&quot;&gt;<BR>
NAME&lt;/A&gt;<BR>
&lt;/H1&gt;<BR>
Dial - an alternative to the scale widget<BR>
&lt;p&gt;&lt;p&gt;&lt;hr&gt;<BR>
<BR>
&lt;H1&gt;<BR>
&lt;A NAME=&quot;Dial.pm_synopsis_0&quot;&gt;<BR>
SYNOPSIS&lt;/A&gt;<BR>
&lt;/H1&gt;<BR>
<BR>
&lt;XMP&gt;<BR>
&nbsp;use Tk::Dial;<BR>
&nbsp;$dial = $top-&gt;Dial(-margin =&gt;&nbsp;&nbsp;20,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-radius
=&gt;&nbsp;&nbsp;48,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-min&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;&nbsp;&nbsp;0,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-max&nbsp;&nbsp;&nbsp;&nbsp;=&gt;
100,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-value&nbsp;&nbsp;=&gt;&nbsp;&nbsp;&nbsp;0,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-format
=&gt; '%d');<BR>
&nbsp;margin - blank space to leave around dial<BR>
&nbsp;radius - radius of dial<BR>
&nbsp;min, max - range of possible values<BR>
&nbsp;value&nbsp;&nbsp;- current value<BR>
&nbsp;format - printf-style format for displaying format<BR>
<BR>
&lt;/XMP&gt;<BR>
&lt;p&gt;Values shown above are defaults.<BR>
&lt;p&gt;&lt;p&gt;&lt;hr&gt;<BR>
<BR>
&lt;H1&gt;<BR>
&lt;A NAME=&quot;Dial.pm_description_0&quot;&gt;<BR>
DESCRIPTION&lt;/A&gt;<BR>
&lt;/H1&gt;<BR>
A dial looks like a speedometer: a 3/4 circle with a needle indicating
the current value.&nbsp;&nbsp;Below the graphical dial is an entry
that displays the current value, and which can be used to enter
a value by hand. &lt;p&gt;The needle is moved by pressing button
1 in the canvas and dragging. The needle will follow the mouse,
even if the mouse leaves the canvas, which allows for high precision.
Alternatively, the user can enter a value in the entry space and
press Return to set the value; the needle will be set accordingly.
<BR>
&lt;p&gt;&lt;p&gt;&lt;hr&gt;<BR>
<BR>
&lt;H1&gt;<BR>
&lt;A NAME=&quot;Dial.pm_to_0&quot;&gt;<BR>
TO DO&lt;/A&gt;<BR>
&lt;/H1&gt;<BR>
<BR>
&lt;XMP&gt;<BR>
&nbsp;Configure<BR>
&nbsp;Tick marks<BR>
&nbsp;Step size<BR>
<BR>
&lt;/XMP&gt;<BR>
&lt;p&gt;&lt;p&gt;&lt;hr&gt;<BR>
<BR>
&lt;H1&gt;<BR>
&lt;A NAME=&quot;Dial.pm_authors_0&quot;&gt;<BR>
AUTHORS&lt;/A&gt;<BR>
&lt;/H1&gt;<BR>
Roy Johnson, &lt;A HREF=&quot;MAILTO:rjohnson@shell.com&quot;&gt;rjohnson@shell.com&lt;/A&gt;
<BR>
&lt;p&gt;Based on a similar widget in XV, a program by John Bradley,
<BR>
&lt;A HREF=&quot;MAILTO:bradley@cis.upenn.edu&quot;&gt;bradley@cis.upenn.edu&lt;/A&gt;
<BR>
&lt;p&gt;&lt;p&gt;&lt;hr&gt;<BR>
<BR>
&lt;H1&gt;<BR>
&lt;A NAME=&quot;Dial.pm_history_0&quot;&gt;<BR>
HISTORY &lt;/A&gt;<BR>
&lt;/H1&gt;<BR>
<BR>
&lt;XMP&gt;<BR>
<BR>
August 1995: Released for critique by pTk mailing list<BR>
<BR>
&lt;/XMP&gt;<BR>
&lt;p&gt;<BR>
&lt;/BODY&gt;<BR>
&lt;/HTML&gt;</FONT></TT>
</BLOCKQUOTE>
<P>
Also in the <TT><FONT FACE="Courier">Tk-b9.01/doc</FONT></TT>
directory are some <TT><FONT FACE="Courier">.ht</FONT></TT> files
which are copyrighted HTML pages of the documentation for the
package. 
<H2><A NAME="WritingScriptsinPerlTk"><FONT SIZE=5 COLOR=#FF0000>Writing
Scripts in </FONT><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">Perl/Tk</FONT></TT></A>
</H2>
<P>
The idea behind writing the <TT><FONT FACE="Courier">Perl/Tk</FONT></TT>
script using the modules for the package is to make life easier.
The scripts have to include the <TT><FONT FACE="Courier">Tk</FONT></TT>
package with the <TT><FONT FACE="Courier">use Tk;</FONT></TT>
statement. You might want to consider using the warning switch
(<TT><FONT FACE="Courier">-w</FONT></TT>) and, if you are paranoid,
use the <TT><FONT FACE="Courier">use strict;</FONT></TT> statement
to do extra syntax checking.
<P>
Look at the simple &quot;Hello, world&quot; script shown in Listing
17.1.
<HR>
<BLOCKQUOTE>
<B>Listing 17.1. A simple &quot;Hello, world&quot; script.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;1&nbsp;&nbsp;#!/usr/bin/perl -w
<BR>
&nbsp;2&nbsp;&nbsp;#<BR>
&nbsp;3&nbsp;&nbsp;# Simple Tk script to create a button that
prints &quot;Hello, world&quot;.<BR>
&nbsp;4&nbsp;&nbsp;#<BR>
&nbsp;5&nbsp;&nbsp;use Tk;<BR>
&nbsp;6&nbsp;&nbsp;$mw = MainWindow-&gt;new;<BR>
&nbsp;7&nbsp;&nbsp;$hello = $mw-&gt;Button(-text =&gt; 'Hello,
world',<BR>
&nbsp;&nbsp;&nbsp;&nbsp;<FONT FACE="ZAPFDINGBATS">&Acirc;</FONT>
-command =&gt; sub {print STDOUT &quot;Hello, world\n&quot;; });
<BR>
&nbsp;8&nbsp;&nbsp;$greet = $mw-&gt;Button(-text =&gt; 'Greetings',
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;<FONT FACE="ZAPFDINGBATS">&Acirc;</FONT>
-command =&gt; sub {print STDOUT &quot;Greetings\n&quot;; exit;});
<BR>
&nbsp;9&nbsp;&nbsp;$hello-&gt;pack;<BR>
10 $greet-&gt;pack(-side =&gt; &quot;left&quot;);<BR>
11 MainLoop;</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The first line in the file starts Perl with the <TT><FONT FACE="Courier">-w</FONT></TT>
switch for warnings to be issued, if necessary. Line 5 imports
the <TT><FONT FACE="Courier">Tk</FONT></TT> objects into the application.
The statement in line 6 creates the main window. The &quot;Hello,
world&quot; and Greetings buttons are created in lines 7 and 8.
In line 9, the Hello button is added to the main window. In line
10, the Greetings button is <TT><FONT FACE="Courier">pack</FONT></TT>-ed
into the main window on the left side of the Hello button. (I
cover <TT><FONT FACE="Courier">pack</FONT></TT>-ing later throughout
this chapter.) Line 11 starts the main user interface loop for
this application. The output is shown in Figure 17.1.
<P>
<A HREF="f17-1.gif" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/f17-1.gif"><B>Figure 17.1 :</B><I>Sample &quot;Hello, world&quot; application.</I></A>
<P>
The <TT><FONT FACE="Courier">MainLoop;</FONT></TT> statement is
the main widget event handler loop and is required in all <TT><FONT FACE="Courier">Perl/Tk</FONT></TT>
scripts. This event handler statement is usually near the end
of the <TT><FONT FACE="Courier">main</FONT></TT> procedure after
the widgets have been created and are ready to be displayed.
<P>
In Listing 17.1, note that the Greet button defines an anonymous
function (at line 8) with a call to the <TT><FONT FACE="Courier">exit</FONT></TT>
function. In line 7, the <TT><FONT FACE="Courier">hello world</FONT></TT>
function does not call the <TT><FONT FACE="Courier">exit</FONT></TT>
function.
<P>
The objects in this application are added one object at a time
in a hierarchical order. This <BR>
involves the use of the <TT><FONT FACE="Courier">-&gt; </FONT></TT>infix
dereference operator; for example, the <TT><FONT FACE="Courier">$mw-&gt;Button(...)</FONT></TT>
call forces the button to be created with the <TT><FONT FACE="Courier">$mw</FONT></TT>
object as the parent. Almost all objects and parameters in calls
to <TT><FONT FACE="Courier">Perl/Tk</FONT></TT> routines are passed
by reference.
<P>
Please note the use of the <TT><FONT FACE="Courier">=&gt;</FONT></TT>
operator, which is simply a synonym for the comma operator. The
program in Listing 17.1 could be rewritten as shown in Listings
17.2 and 17.3.
<HR>
<BLOCKQUOTE>
<B>Listing 17.2. The &quot;Hello, world&quot; application using
commas.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;1 #!/usr/bin/perl -w<BR>
&nbsp;2 #<BR>
&nbsp;3 # Using commas instead of =&gt;.<BR>
&nbsp;4 #<BR>
&nbsp;5 <BR>
&nbsp;6 use Tk;<BR>
&nbsp;7 $mw = MainWindow-&gt;new;<BR>
&nbsp;8 $hello = $mw-&gt;Button(-text , 'Hello, world',<BR>
&nbsp;&nbsp;&nbsp;<FONT FACE="ZAPFDINGBATS">&Acirc;</FONT>-command , sub {print
STDOUT &quot;Hello, world\n&quot;; });<BR>
&nbsp;9 $greet = $mw-&gt;Button(-text , 'Greetings', <BR>
&nbsp;&nbsp;&nbsp;<FONT FACE="ZAPFDINGBATS">&Acirc;</FONT>-command , sub {print
STDOUT &quot;Greetings\n&quot;; exit;});<BR>
10 $hello-&gt;pack;<BR>
11 $greet-&gt;pack(-side , &quot;left&quot;);<BR>
12 MainLoop;</FONT></TT>
</BLOCKQUOTE>
<HR>
<HR>
<BLOCKQUOTE>
<B>Listing 17.3. The &quot;Hello, world&quot; application using
hashes.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;1 #!/usr/bin/perl -w<BR>
&nbsp;2 #<BR>
&nbsp;3 # Using Hashes instead of dereferencing using -&gt;<BR>
&nbsp;4 #<BR>
&nbsp;5 <BR>
&nbsp;6 use Tk;<BR>
&nbsp;7 $mw = MainWindow-&gt;new;<BR>
&nbsp;8 my %hello = ('-text' , 'Hello, world',<BR>
&nbsp;&nbsp;&nbsp;<FONT FACE="ZAPFDINGBATS">&Acirc;</FONT>'-command' , sub {print
STDOUT &quot;Hello, world\n&quot;; });<BR>
&nbsp;9 my %greet = ('-text' , 'Greetings',<BR>
&nbsp;&nbsp;&nbsp;<FONT FACE="ZAPFDINGBATS">&Acirc;</FONT>'-command' , sub {print
STDOUT &quot;Greetings\n&quot;; exit;});<BR>
10 $mw-&gt;Button(%hello)-&gt;pack;<BR>
11 $mw-&gt;Button(%greet)-&gt;pack('-side', &quot;left&quot;);
<BR>
12 MainLoop;</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
As you can see, you have a lot of flexibility in how you write
your application. If you need more information on references,
please refer to <A HREF="ch3.htm" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/ch3.htm" >Chapter 3</A>, &quot;References,&quot;
to see why Listing 17.3 works.
<H2><A NAME="WidgetsasBuildingBlocks"><FONT SIZE=5 COLOR=#FF0000>Widgets
as Building Blocks</FONT></A></H2>
<P>
Basically, a widget can be &quot;created&quot; by simply calling
the <TT><FONT FACE="Courier">new</FONT></TT> method of the class
name. For example, to create a new window, you use the following
statement:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">my $main = new MainWindow;<BR>
&nbsp;&nbsp;... <I>code here to add widgets</I> ...<BR>
MainLoop;</FONT></TT>
</BLOCKQUOTE>
<P>
This statement sets aside the necessary system memory, and so
on for a new <TT><FONT FACE="Courier">MainWindow</FONT></TT> widget.
The<TT><FONT FACE="Courier"> MainLoop;</FONT></TT> call causes
it to appear. The object &quot;created&quot; then can be called
via the variable <TT><FONT FACE="Courier">$main</FONT></TT>.
<P>
It's a good idea to hang on to each object as it's created in
the hierarchy. This way you can refer to the object explicitly
should you need to change its parameters. Thus, the return values
of most of your calls to create items are assigned to a variable:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">$mybutton = $main-&gt;Button();</FONT></TT>
</BLOCKQUOTE>
<P>
Now you can use <TT><FONT FACE="Courier">$mybutton</FONT></TT>
to refer to this <TT><FONT FACE="Courier">Button</FONT></TT> object.
<H2><A NAME="ConfiguringWidgets"><FONT SIZE=5 COLOR=#FF0000>Configuring
Widgets</FONT></A></H2>
<P>
Widgets are configurable to show different types of viewing styles.
You can provide a number of configuration parameters via calls
to the <TT><FONT FACE="Courier">configure()</FONT></TT> function.
Configuration parameters also can be sent in when the widget is
created. For example, these two statements are equivalent:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">my $button = $main-&gt;Button();<BR>
$button-&gt;configure(-text =&gt; 'Hello!');</FONT></TT>
</BLOCKQUOTE>
<P>
and
<BLOCKQUOTE>
<TT><FONT FACE="Courier">my $button = new $main-&gt;Button(-text
=&gt; 'Hello');</FONT></TT>
</BLOCKQUOTE>
<P>
The &quot;Hello, world&quot; application is simple enough to demonstrate
the use of <TT><FONT FACE="Courier">Button</FONT></TT> widgets
in <TT><FONT FACE="Courier">Perl/Tk</FONT></TT>. You do have access
to more widgets that you can use to create your own widgets. Check
the subdirectories under the <TT><FONT FACE="Courier">Tk-b9.01</FONT></TT>
tree to see what the widgets are. The <TT><FONT FACE="Courier">Canvas</FONT></TT>
widget is in the <TT><FONT FACE="Courier">Canvas</FONT></TT> subdirectory.
<P>
The following <TT><FONT FACE="Courier">Tk</FONT></TT> widgets
are available under <TT><FONT FACE="Courier">perl/Tk</FONT></TT>:
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=128><TT><FONT FACE="Courier">Checkbutton</FONT></TT>
</TD><TD WIDTH=403>Allows all, some, or no selections from multiple selections.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=128><TT><FONT FACE="Courier">Button</FONT></TT>
</TD><TD WIDTH=403>It's set to <TT><FONT FACE="Courier">ON</FONT></TT> or <TT><FONT FACE="Courier">OFF</FONT></TT>.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=128><TT><FONT FACE="Courier">Radiobutton</FONT></TT>
</TD><TD WIDTH=403>One of many selections.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=128><TT><FONT FACE="Courier">Listbox</FONT></TT>
</TD><TD WIDTH=403>Allows user to select from a list of items.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=128><TT><FONT FACE="Courier">Scrollbar</FONT></TT>
</TD><TD WIDTH=403>For pointer usage.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=128><TT><FONT FACE="Courier">Entry</FONT></TT></TD>
<TD WIDTH=403>Text entry widget.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=128><TT><FONT FACE="Courier">Text</FONT></TT></TD>
<TD WIDTH=403>Text display widget.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=128><TT><FONT FACE="Courier">Canvas</FONT></TT>
</TD><TD WIDTH=403>For drawing on.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=128><TT><FONT FACE="Courier">Frame</FONT></TT></TD>
<TD WIDTH=403>For placing other widgets on.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=128><TT><FONT FACE="Courier">Toplevel</FONT></TT>
</TD><TD WIDTH=403>For a new independent window.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=128><TT><FONT FACE="Courier">Menu</FONT></TT></TD>
<TD WIDTH=403>An area set aside for menu buttons.</TD></TR>
<TR VALIGN=TOP><TD WIDTH=128><TT><FONT FACE="Courier">Menubutton</FONT></TT>
</TD><TD WIDTH=403>For a menu button on an area for a menu.</TD>
</TR>
</TABLE></CENTER>
<P>
<P>
Each of these widgets comes with its own set of configurable parameters.
As you work with these widgets you'll become familiar with the
parameters associated with them. The best way to know which parameters
are configurable is to check the Perl/<TT><FONT FACE="Courier">Tk</FONT></TT>
reference manuals to see what parameters are available for each
type of widget.
<P>
The <TT><FONT FACE="Courier">MainWindow</FONT></TT> widget is
required for your applications. This widget serves as the main
window for your <TT><FONT FACE="Courier">Perl/Tk</FONT></TT> applications.
Several functions exist for use as methods for this <TT><FONT FACE="Courier">MainWindow</FONT></TT>
object. For example, to set the title in the window, use the following
command:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">$main-&gt;title(&quot; A sample window&quot;);</FONT></TT>
</BLOCKQUOTE>
<P>
I cover some of these methods in the next few sections. Let's
first see how we can place widgets on the main window.
<H3><A NAME="UsingCheckButtonWidgets">Using <TT><FONT SIZE=4 FACE="Courier">CheckButton</FONT></TT><FONT SIZE=4>
Widgets</FONT></A></H3>
<P>
Using check buttons is relatively easy. See Listing 17.4. The
output is shown in Figure 17.2. The three buttons are shown side-by-side
in the same window. If the parameters specifying the sides on
the left are removed, the buttons appear as shown in Figure 17.3.
You get this output by uncommenting the lines that create the
buttons in Listing 17.4.<P>
<A HREF="f17-2.gif" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/f17-2.gif"><B>Figure 17.2 :</B><I>Using Check buttons.</I></A><P>
<A HREF="f17-3.gif" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/f17-3.gif"><B>Figure 17.3 :</B><I>Using check buttons without packing.</I></A>
<HR>
<BLOCKQUOTE>
<B>Listing 17.4. Using check buttons.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;1 #!/usr/bin/perl<BR>
&nbsp;2 <BR>
&nbsp;3 use Tk;<BR>
&nbsp;4 <BR>
&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#
<BR>
&nbsp;6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#
Using Checkbuttons.<BR>
&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#
<BR>
&nbsp;8 <BR>
&nbsp;9 my $main = new MainWindow;<BR>
10 <BR>
11 $main-&gt;Checkbutton(-text =&gt; 'One'&nbsp;&nbsp;)-&gt;pack;
<BR>
12 $main-&gt;Checkbutton(-text =&gt; 'Two'&nbsp;&nbsp;)-&gt;pack;
<BR>
13 $main-&gt;Checkbutton(-text =&gt; 'Three' )-&gt;pack;<BR>
14 <BR>
15 #<BR>
16 # Uncomment these lines to get the buttons to be side by side.
<BR>
17 #<BR>
18 # $main-&gt;Checkbutton(-text =&gt; 'One')-&gt;pack(-side =&gt;
'left');<BR>
19 # $main-&gt;Checkbutton(-text =&gt; 'Two')-&gt;pack(-side =&gt;
'left');<BR>
20 # $main-&gt;Checkbutton(-text =&gt; 'Three ')-&gt;pack(-side
=&gt; 'left');<BR>
21 <BR>
22 MainLoop;</FONT></TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME="UsingRadioButtonWidgets">Using <TT><FONT SIZE=4 FACE="Courier">RadioButton</FONT></TT><FONT SIZE=4>
Widgets</FONT></A></H3>
<P>
Radio buttons let you select one of many options, whereas check
buttons allow you to select as many as possible. When using check
buttons, you can press more than one button at a time. With radio
buttons, you are showing several alternatives to an option. The
value of the option is only one of several presented.
<P>
You have to specify the <TT><FONT FACE="Courier">variable</FONT></TT>
option on each radio button. The value of the <TT><FONT FACE="Courier">-variable</FONT></TT>
option is the escaped global Perl variable that will be assigned
the value. All related radio buttons have to be assigned the same
variable. Pressing each radio button causes the value of the variable
to be set. Thus, each radio button has to set the value of the
variable, too, with the <TT><FONT FACE="Courier">-value</FONT></TT>
configuration parameter. See Listing 17.5 for a sample script.
The output is shown in Figure 17.4.<P>
<A HREF="f17-4.gif" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/f17-4.gif"><B>Figure 17.4 :</B><I>Using radio buttons in <TT><FONT FACE="Couier">Perl/TK </FONT></TT>scripts.</I></A>
<HR>
<BLOCKQUOTE>
<B>Listing 17.5. Using radio buttons.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;1&nbsp;&nbsp;#!/usr/bin/perl<BR>
&nbsp;2<BR>
&nbsp;3&nbsp;&nbsp;use Tk;<BR>
&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#
<BR>
&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#
Using RadioButtons.<BR>
&nbsp;6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#
<BR>
&nbsp;7&nbsp;&nbsp;my $main = new MainWindow;<BR>
&nbsp;8&nbsp;&nbsp;$main-&gt;title(&quot;Select Delicacy&quot;);
<BR>
&nbsp;9&nbsp;&nbsp;#<BR>
10 # Declare the global variable<BR>
11 #<BR>
12 $animal = 'anything';<BR>
13 $main-&gt;Radiobutton(-text =&gt; 'Yak', -variable =&gt; \$animal,
<BR>
14&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-value =&gt; &quot;Yak&quot;,<BR>
15&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-command =&gt; sub {print &quot;$animal \n&quot;; } ,<BR>
16 )-&gt;pack(-side =&gt; 'left');<BR>
17 $main-&gt;Radiobutton(-text =&gt; 'Camel', -variable =&gt;
\$animal,<BR>
18&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-value =&gt; &quot;Camel&quot;,<BR>
19&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-command =&gt; sub {print &quot;$animal \n&quot;; } ,<BR>
20 )-&gt;pack(-side =&gt; 'left');<BR>
21 $main-&gt;Radiobutton(-text =&gt; 'Llama', -variable =&gt;
\$animal,<BR>
22&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-value =&gt; &quot;Llama&quot;,<BR>
23&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-command =&gt; sub {print &quot;$animal \n&quot;; }<BR>
24&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)-&gt;pack(-side =&gt; 'left');<BR>
25 MainLoop;</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Let's examine the new lines of code in Listing 17.5 in detail.
Line 8 sets the title of the application window to <TT><FONT FACE="Courier">Select
Delicacy</FONT></TT>. Line 12 declares and sets the value of the
global variable <TT><FONT FACE="Courier">$animal</FONT></TT> to
<TT><FONT FACE="Courier">anything</FONT></TT>.
<P>
Lines 13 through 16 specify the first <TT><FONT FACE="Courier">Radiobutton</FONT></TT>
with the title <TT><FONT FACE="Courier">Yak</FONT></TT>. The variable
whose value will be set when this button is pressed is specified
in the <TT><FONT FACE="Courier">-variable</FONT></TT> parameter
value. Note the escaped dollar sign for the name of the variable
<TT><FONT FACE="Courier">$animal</FONT></TT>. The <TT><FONT FACE="Courier">-command</FONT></TT>
configuration parameter specifies the anonymous subroutine to
call when the button is pressed. The subroutine simply prints
the value of the variable. You can add your code here.
<P>
In lines 17 through 20 and lines 21 through 24, two more radio
buttons are specified that set the values of <TT><FONT FACE="Courier">$animal</FONT></TT>
to <TT><FONT FACE="Courier">'Camel'</FONT></TT> and <TT><FONT FACE="Courier">'Llama'</FONT></TT>,
respectively.
<H3><A NAME="CallingSubroutinesWhenaButtonIsPre">Calling Subroutines
When a Button Is Pressed</A></H3>
<P>
You can add subroutines to call when a button is pressed. The
examples in Listing 17.1 and 17.5 are two examples of this. You
may specify the <TT><FONT FACE="Courier">-command</FONT></TT>
option in the call to <TT><FONT FACE="Courier">create</FONT></TT>
and <TT><FONT FACE="Courier">pack</FONT></TT> the button (in Listing
17.5, this was done with lines 15, 19, and 23):
<BLOCKQUOTE>
<TT><FONT FACE="Courier">-command =&gt; sub {print &quot;$animal
\n&quot;; } ,</FONT></TT>
</BLOCKQUOTE>
<P>
You can refer to a subroutine by using the escaped ampersand with
the name of the subroutine. Any parameters that have to be passed
to the subroutine have to be specified with the <TT><FONT FACE="Courier">-command</FONT></TT>
parameters as one list. For example, consider the following function
which creates a button with a caption of <TT><FONT FACE="Courier">Stats</FONT></TT>,
and calls the subroutine <TT><FONT FACE="Courier">do_print when
the button is pressed</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">$main-&gt;Button(-text =&gt; 'Stats',
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-command
=&gt; [ \&amp;do_print , $inputfile, $outputfile ]<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)-&gt;pack;</FONT></TT>
</BLOCKQUOTE>
<P>
Note the backslash in front of <TT><FONT FACE="Courier">\&amp;do_print</FONT></TT>.
This causes Perl to generate a reference to <TT><FONT FACE="Courier">sub
do_print</FONT></TT> rather than call it. The input variables,
<TT><FONT FACE="Courier">$inputfile</FONT></TT> and <TT><FONT FACE="Courier">$outputfile</FONT></TT>,
are passed by reference not by value, into <TT><FONT FACE="Courier">the
do_print</FONT></TT> subroutine.
<H3><A NAME="ArrangingtheLayoutofWidgets">Arranging the Layout
of Widgets</A></H3>
<P>
Widgets are laid out on a window using the <TT><FONT FACE="Courier">-pack</FONT></TT>,
<TT><FONT FACE="Courier">-padding</FONT></TT>, <TT><FONT FACE="Courier">-fill</FONT></TT>,
<TT><FONT FACE="Courier">-expand</FONT></TT>, and <TT><FONT FACE="Courier">-anchor</FONT></TT>
options of a widget. Windows also use a program called a geometry
manager in <TT><FONT FACE="Courier">Tk</FONT></TT>.
<P>
A geometry manager controls the arrangement of widgets in a window.
The most common geometry manager used in <TT><FONT FACE="Courier">pTk</FONT></TT>
is <TT><FONT FACE="Courier">pack</FONT></TT>. You have seen the
use of the <TT><FONT FACE="Courier">-pack</FONT></TT> function
to place buttons on a window in earlier sections of this chapter.
The <TT><FONT FACE="Courier">pack</FONT></TT> function is also
known informally as the &quot;packer.&quot; You can invoke <TT><FONT FACE="Courier">pack</FONT></TT>
at the time of widget creation via calls like
<BLOCKQUOTE>
<TT><FONT FACE="Courier">$widget-&gt;pack;</FONT></TT>
</BLOCKQUOTE>
<P>
where <TT><FONT FACE="Courier">widget</FONT></TT> can be any of
the <TT><FONT FACE="Courier">Perl/Tk</FONT></TT> widget primitives.
The <TT><FONT FACE="Courier">pack</FONT></TT> function is often
used in conjunction with the <TT><FONT FACE="Courier">Frame</FONT></TT>
container widget to arrange your widgets much like a hierarchically
arranged set of window panes. See Listing 17.6 and Figure 17.5.<P>
<A HREF="f17-5.gif" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/f17-5.gif"><B>Figure 17.5 :</B><I>The output from Listing 17.6.</I></A>
<HR>
<BLOCKQUOTE>
<B>Listing 17.6. Packing using frames.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;1 #!/usr/bin/perl<BR>
&nbsp;2 use Tk;<BR>
&nbsp;3<BR>
&nbsp;4 $main = MainWindow-&gt;new;<BR>
&nbsp;5<BR>
&nbsp;6&nbsp;&nbsp;&nbsp;&nbsp; my $row1 = $main-&gt;Frame;<BR>
&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp; $row1-&gt;pack(-side =&gt; 'top');
<BR>
&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp; my $row2 = $main-&gt;Frame;<BR>
&nbsp;9&nbsp;&nbsp;&nbsp;&nbsp; $row2-&gt;pack(-side =&gt; 'bottom');
<BR>
10&nbsp;&nbsp;&nbsp;&nbsp; $row1-&gt;Label(-text =&gt; 'Left',
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<FONT FACE="ZAPFDINGBATS">&Acirc;</FONT>-relief
=&gt; 'sunken' )-&gt;pack(-side =&gt; 'left');<BR>
11&nbsp;&nbsp;&nbsp;&nbsp; $row1-&gt;Label(-text =&gt; 'Right',
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<FONT FACE="ZAPFDINGBATS">&Acirc;</FONT>-relief
=&gt; 'sunken' )-&gt;pack(-side =&gt; 'right');<BR>
12&nbsp;&nbsp;&nbsp;&nbsp; $row2-&gt;Label(-text =&gt; 'Left 2',
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<FONT FACE="ZAPFDINGBATS">&Acirc;</FONT>-relief
=&gt; 'ridge' )-&gt;pack(-side =&gt; 'left');<BR>
13&nbsp;&nbsp;&nbsp;&nbsp; $row2-&gt;Label(-text =&gt; 'Right
2', <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<FONT FACE="ZAPFDINGBATS">&Acirc;</FONT>-relief
=&gt; 'ridge' )-&gt;pack(-side =&gt; 'right');<BR>
14&nbsp;&nbsp;&nbsp;&nbsp; MainLoop;</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
In Listing 17.6, we used two frames: one on the top and the other
on the bottom. These frames are called <TT><FONT FACE="Courier">$row1</FONT></TT>
and <TT><FONT FACE="Courier">$row2</FONT></TT> and are created
in lines 6 through 9. Then lines 10 and 11 create the two labels
in <TT><FONT FACE="Courier">$row1</FONT></TT>, and in lines 12
and 13, two more labels are created on the second frame. In this
fashion we have packed labels on frames, and the frames are then
packed onto the main window. You can think of this as building
a Mayan temple of sorts with widgets being placed one on top of
the other.
<P>
Note that <TT><FONT FACE="Courier">pack</FONT></TT> itself is
given parameters in this example. The default behavior of pack
is to have <TT><FONT FACE="Courier">-side =&gt; 'top'</FONT></TT>,
that is, align everything using the top edge. You can override
this behavior by specifying a different packing style such as
&quot;left&quot;, &quot;right&quot;, or &quot;bottom&quot;.
<P>
The <TT><FONT FACE="Courier">Tk*</FONT></TT> distribution has
a file called <TT><FONT FACE="Courier">popup</FONT></TT> that
uses the <TT><FONT FACE="Courier">-anchor</FONT></TT> option to
configure the layout of the <TT><FONT FACE="Courier">Radiobutton</FONT></TT>
widgets. The output of this demo is shown in Figure 17.6. Run
the following program to get the listing with line numbers for
reference.
<P>
<A HREF="f17-6.gif" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/f17-6.gif"><B>Figure 17.6 :</B><I>Using the -anchor widget option.</I></A>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">$ nl popup | more</FONT></TT>
</BLOCKQUOTE>
<P>
There is also the <TT><FONT FACE="Courier">-anchor</FONT></TT>
configuration option for widgets. There are introductions to the
nine possible <TT><FONT FACE="Courier">-anchor</FONT></TT> values,
eight corresponding to the points on a compass and the ninth as
the center position. The nine possible values are set around 
line 22 with <TT><FONT FACE="Courier">list</FONT></TT>:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">foreach $r ([qw(nw n ne)],[qw(w c e)],[qw(sw
s se)])</FONT></TT>
</BLOCKQUOTE>
<P>
In the beginning of the file, we  create a small popup window
to show when a button is clicked. Rather than create this window
every time, a button is created but is not shown immediately.
Around lines 13 through 17, the subroutine <TT><FONT FACE="Courier">Show</FONT></TT>
shows this window and requests it to be invisible after one second.
<P>
In the subroutine <TT><FONT FACE="Courier">Anchor</FONT></TT>,
a master frame is created (see line 21) with a ridge around it.
Then three frames are placed on it, each with three buttons showing
the anchor positions (see lines 25 through 29). The positions
and the labels for the buttons are shown in line 22.
<P>
When setting lots of uneven widgets on the same frame, you can
make their borders the same size by using <TT><FONT FACE="Courier">-fill
=&gt; 'style'</FONT></TT>. The style can be <TT><FONT FACE="Courier">none
| x | y | both</FONT></TT>. See the modified version of the radio
button application and contrast the code in Listing 17.7 with
the code in Listing 17.4. The output is shown in Figure 17.7,
which you can compare with Figure 17.3 to see how the buttons
with their borders are now shown and resized.<P>
<A HREF="f17-7.gif" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/f17-7.gif"><B>Figure 17.7 :</B><I>Using the <FONT FACE="Couier">-fill</FONT> option.</I></A>
<HR>
<BLOCKQUOTE>
<B>Listing 17.7. Using the </B><TT><B><FONT FACE="Courier">-fill</FONT></B></TT><B>
option.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;1 #!/usr/bin/perl<BR>
&nbsp;2 <BR>
&nbsp;3 use Tk;<BR>
&nbsp;4 <BR>
&nbsp;5 #<BR>
&nbsp;6 # Using Checkbuttons and the -fill option.<BR>
&nbsp;7 #<BR>
&nbsp;8 <BR>
&nbsp;9 my $main = new MainWindow;<BR>
10 $main-&gt;title(&quot;fill&quot;);<BR>
11 <BR>
12 $main-&gt;Checkbutton(-text =&gt; 'One',<BR>
13&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -relief =&gt; 'ridge',
<BR>
14&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -command =&gt; sub {print
&quot;One \n&quot;; } )-&gt;pack(-fill =&gt; 'x');<BR>
15 $main-&gt;Checkbutton(-text =&gt; 'Two',<BR>
16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -relief =&gt; 'sunken',
<BR>
17&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -command =&gt; sub {print
&quot;Two \n&quot;; } )-&gt;pack(-fill =&gt; 'x');<BR>
18 $main-&gt;Checkbutton(-text =&gt; 'Three',<BR>
19&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -relief =&gt; 'groove',
<BR>
20&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -command =&gt; sub {print
&quot;Three \n&quot;; } )-&gt;pack(-fill =&gt; 'x');<BR>
20<BR>
21 MainLoop;</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
When laying out your widgets, look at their behavior with multiple
<TT><FONT FACE="Courier">resize</FONT></TT> operations. The <TT><FONT FACE="Courier">-expand</FONT></TT>
option of either <TT><FONT FACE="Courier">pack</FONT></TT> or
the widget itself can be used to set whether the widget expands
or shrinks with its parent. Add the statement for packing the
buttons in Listing 17.8; the buttons will shrink or expand as
the main window is resized.
<HR>
<BLOCKQUOTE>
<B>Listing 17.8. Using the Expand button.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">1 $main-&gt;Checkbutton(-text =&gt; 'One',
<BR>
2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-relief =&gt;
'ridge',<BR>
3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-command =&gt;
sub {print &quot;One \n&quot;; } )-&gt;pack(-fill =&gt; 'x', -expand
=&gt; '1');<BR>
4 $main-&gt;Checkbutton(-text =&gt; 'Two',<BR>
5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-relief =&gt;
'sunken',<BR>
6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-command =&gt;
sub {print &quot;Two \n&quot;; } )-&gt;pack(-fill =&gt; 'x', -expand
=&gt; '1');<BR>
7 $main-&gt;Checkbutton(-text =&gt; 'Three',<BR>
8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-relief =&gt;
'groove',<BR>
9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-command =&gt;
sub {print &quot;Three \n&quot;; } )-&gt;pack(-fill =&gt; 'x',
-expand =&gt; '1');</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The output of this change to Listing 17.7 is shown in Figure 17.8. Remember to make this change to all the <TT><FONT FACE="Courier">pack</FONT></TT>
calls for the buttons.<P>
<A HREF="f17-8.gif" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/f17-8.gif"><B>Figure 17.8 :</B><I>Using the <FONT FACE="Courier"-expend</FONT> option.</I></A><P>

<H3><A NAME="UsingtheListboxandScrollbarWidgets">Using the <TT><FONT SIZE=4 FACE="Courier">Listbox</FONT></TT><FONT SIZE=4>
and </FONT><TT><FONT SIZE=4 FACE="Courier">Scrollbar</FONT></TT><FONT SIZE=4>
Widgets</FONT></A></I></H3>
<P>
Now that you know how to place items on a frame widget, let's
see how you create a list of scrollable items. For this exercise,
you'll use the <TT><FONT FACE="Courier">Listbox</FONT></TT> and
<TT><FONT FACE="Courier">Scrollbar</FONT></TT> widgets. The output
we are trying to get is shown in Figure 17.9. The code to get
this output is shown in Listing 17.9.<P>
<A HREF="f17-9.gif" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/f17-9.gif"><B>Figure 17.9 :</B><I>Using the <FONT FACE="Courier">Listbox </FONT>and <FONT FACE="Courier"> Scrollbar</FONT> widgers.</I></A><P>
<HR>
<BLOCKQUOTE>
<B>Listing 17.9. Using the </B><TT><B><FONT FACE="Courier">Listbox</FONT></B></TT><B>
and </B><TT><B><FONT FACE="Courier">Scrollbar</FONT></B></TT><B>
widgets.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;1 #!/usr/bin/perl<BR>
&nbsp;2 use Tk;<BR>
&nbsp;3<BR>
&nbsp;4 my $main = new MainWindow;<BR>
&nbsp;5 #<BR>
&nbsp;6 # Provide another title ...<BR>
&nbsp;7 #<BR>
&nbsp;8 $main-&gt;Label(-relief =&gt; raised,<BR>
&nbsp;9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-text
=&gt; &quot;Tax Confusion&quot; )-&gt;pack(-side =&gt; 'top',
-fill =&gt; 'x');<BR>
10 $main-&gt;title(&quot;Test Listbox&quot;);<BR>
11 $w_list = $main-&gt;Listbox(-relief =&gt; 'raised',<BR>
12&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-setgrid
=&gt; 'yes');<BR>
13 #<BR>
14 # Create a list of words of wisdom<BR>
15 #<BR>
16 my @items = qw( Passive activity income <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;does
not include the following:<BR>
17&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Income
for an activity <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;that
is not a passive activity - IRS Form 8583);<BR>
18 foreach (@items) {<BR>
19&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$w_list-&gt;insert(&quot;end&quot;,
$_);<BR>
20 }<BR>
21 #<BR>
22 # Create the scrollbar<BR>
23 #<BR>
24 $w_scroll = $main-&gt;Scrollbar(-command =&gt; ['yview', $w_list]
<BR>
25&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)-&gt;pack(-side
=&gt; 'right', -fill =&gt; 'y');<BR>
26 #<BR>
27 # Now tie the scrollbar to&nbsp;&nbsp;listbox.<BR>
28 #<BR>
29 $w_list-&gt;configure( -yscrollcommand =&gt; ['set', $w_scroll]);
<BR>
30 #<BR>
31 # show the listbox.<BR>
32 #<BR>
33 $w_list-&gt;pack(-fill =&gt; 'y');<BR>
34 MainLoop;</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
Scrollbars are commonly used to update the items shown in <TT><FONT FACE="Courier">Listbox</FONT></TT>,
<TT><FONT FACE="Courier">Canvas</FONT></TT>, or <TT><FONT FACE="Courier">Text</FONT></TT>
widgets when the slider of the scrollbar is moved by the user.
In Listing 17.9 (line 24), the scrollbar is created with the <TT><FONT FACE="Courier">yview</FONT></TT>
option. For a horizontal scrollbar, use the <TT><FONT FACE="Courier">xview</FONT></TT>
option. In line 29, the listbox is tied to the scrollbar to perform
the scrolling action in the <I>y</I> direction.
<P>
Note also how the <TT><FONT FACE="Courier">label</FONT></TT>,
<TT><FONT FACE="Courier">Listbox</FONT></TT>, and <TT><FONT FACE="Courier">Scrollbar</FONT></TT>
are packed in the window. Had the <TT><FONT FACE="Courier">-fill</FONT></TT>
option not been used, the widgets would not be shown in the entire
height or width of the window.
<P>
To allow more than one listbox to contain a &quot;selection&quot;
(or at least a highlighted item), specify this configuration option:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">-exportselection =&gt; 0</FONT></TT>
</BLOCKQUOTE>
<H3><A NAME="UsingTextWidgets">Using <TT><FONT SIZE=4 FACE="Courier">Text</FONT></TT><FONT SIZE=4>
Widgets</FONT></A></H3>
<P>
The <TT><FONT FACE="Courier">Text</FONT></TT> widget is simply
a widget that enables user entry. The default way to create a
<TT><FONT FACE="Courier">Text</FONT></TT> widget is shown here:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">#!/usr/bin/perl -w<BR>
use Tk;<BR>
<BR>
my $mw = MainWindow-&gt;new();<BR>
$txt = $mw-&gt;Text(-width =&gt; '80', -height =&gt; '100') -&gt;
pack;<BR>
MainLoop;</FONT></TT>
</BLOCKQUOTE>
<P>
Note that the default size of a <TT><FONT FACE="Courier">Text</FONT></TT>
widget is very big for most screens. You might want to limit the
size with the <TT><FONT FACE="Courier">-height</FONT></TT> and
<TT><FONT FACE="Courier">-width</FONT></TT> options to set the
same size. The values are given in the number of characters, not
the number of pixels.
<P>
Using the code in the <TT><FONT FACE="Courier">Scrollbar</FONT></TT>
and <TT><FONT FACE="Courier">Listbox</FONT></TT> examples, you
can attach scrollbars to create fairly sophisticated editors very
quickly using <TT><FONT FACE="Courier">Perl/Tk</FONT></TT>.
<H3><A NAME="SpecifyingFontsforTextandOtherWidg">Specifying Fonts
for Text and Other Widgets</A></H3>
<P>
To specify the font configuration option of your widget, use the
<TT><FONT FACE="Courier">-font</FONT></TT> option. See the following
example:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">my $mw = MainWindow-&gt;new();<BR>
$txt = $mw-&gt;Text(-width =&gt; '40', -height =&gt; '20', -font
=&gt; 'fixed') -&gt; pack;</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">'fixed'</FONT></TT> value is the
name of the font. You can check your <TT><FONT FACE="Courier">fonts.alias</FONT></TT>
file for more font names to use or look at the output from the
<TT><FONT FACE="Courier">xlsfont</FONT></TT> command.
<H3><A NAME="TextEntryWidgets"><TT><FONT SIZE=4 FACE="Courier">Text
Entry</FONT></TT><FONT SIZE=4> Widgets</FONT></A></H3>
<P>
You want to call the <TT><FONT FACE="Courier">get()</FONT></TT>
function on the return value of the widget itself. Here is how
it may be used in a simplified version of Example 1.1 from the
<TT><FONT FACE="Courier">Tk::UserGuide</FONT></TT>, where a <TT><FONT FACE="Courier">Button</FONT></TT>
is set up to call a sub where the call to <TT><FONT FACE="Courier">get</FONT></TT>
lies. Check the POD file, UserGuide.pod, in the distribution for
more information. The output is shown in Figure 17.10.<P>
<A HREF="f17-10.gif" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/f17-10.gif"><B>Figure 17.10 :</B><I>Using the <FONT FACE="Courier"> Text Entry </FONT> widget.</I></A>
<HR>
<BLOCKQUOTE>
<B>Listing 17.10. Using the </B><TT><B><FONT FACE="Courier">Text
Entry</FONT></B></TT><B> widget.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;1 #!/usr/bin/perl -w<BR>
&nbsp;2 <BR>
&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp; use Tk;<BR>
&nbsp;4 <BR>
&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp; my $mw = MainWindow -&gt; new();
<BR>
&nbsp;6&nbsp;&nbsp;&nbsp;&nbsp; my $entry = $mw -&gt; Entry();
<BR>
&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp; $entry -&gt; pack;<BR>
&nbsp;8 <BR>
&nbsp;9&nbsp;&nbsp;&nbsp;&nbsp; $txt = $mw-&gt;Text(-width =&gt;
'10', -height =&gt; '10')-&gt;pack;<BR>
10 <BR>
11&nbsp;&nbsp;&nbsp;&nbsp; $mw-&gt;Button(-text =&gt; 'Dino',
<BR>
12&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-command =&gt; sub{Echo($entry, $txt)}<BR>
13&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)-&gt;pack;<BR>
14&nbsp;&nbsp;&nbsp;&nbsp; MainLoop;<BR>
15 <BR>
16&nbsp;&nbsp;&nbsp;&nbsp; sub Echo {<BR>
17&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;my ($widget,
$txt) = @_;<BR>
18 <BR>
19&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
#<BR>
20&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
# Show the values of the Text Entry widget<BR>
21&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
#<BR>
22&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;my $entered
= $widget -&gt; get(); # Get the input<BR>
23&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print
&quot;The string \&quot;$entered\&quot; was entered.\n&quot;;
<BR>
24 <BR>
25&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
#<BR>
26&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
# Show the values of the Text widget<BR>
27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
#<BR>
28&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;my $text
= $txt -&gt;Contents(); # Get the input<BR>
29&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print
&quot;The Text \&quot;$text\&quot; was entered.\n&quot;;<BR>
30&nbsp;&nbsp;&nbsp;&nbsp; }</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
For collecting passwords, set the value of the <TT><FONT FACE="Courier">-show</FONT></TT>
option to zero: 
<BLOCKQUOTE>
<TT><FONT FACE="Courier">(-show =&gt; 0);</FONT></TT>
</BLOCKQUOTE>
<H2><A NAME="HandlingtheKeyboardwithKeyBindings"><FONT SIZE=5 COLOR=#FF0000>Handling
the Keyboard with Key Bindings</FONT></A></H2>
<P>
Using the pointer interface is not the only way to collect input
in your <TT><FONT FACE="Courier">Perl/Tk</FONT></TT> programs.
There are many default key bindings built into the widgets of
<TT><FONT FACE="Courier">Perl/Tk</FONT></TT>. Making proper use
of them often involves setting up the right callback. Read the
documentation in <TT><FONT FACE="Courier">BindTable.pod</FONT></TT>
in the <TT><FONT FACE="Courier">Tk</FONT></TT> package for more
detailed help with this subject.
<P>
The way to bind a key to a widget is to use
<BLOCKQUOTE>
<TT><FONT FACE="Courier">$widget -&gt; bind('&lt;keyname&gt;'
=&gt; action);</FONT></TT>
</BLOCKQUOTE>
<P>
where <TT><FONT FACE="Courier">$widget</FONT></TT> is the object
to which the keys are bound. For global bindings you have to bind
to <TT><FONT FACE="Courier">&lt;All&gt;</FONT></TT>. For specific
bindings you need to bind to each widget.
<P>
Use the following script on each <TT><FONT FACE="Courier">.pm</FONT></TT>
file for which you want to find key bindings:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">#!/usr/bin/perl<BR>
while (&lt;&gt;) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print
if s/.*(&lt;[^&gt;]*&gt;).*/$1/g;<BR>
}</FONT></TT>
</BLOCKQUOTE>
<P>
When run on the <TT><FONT FACE="Courier">Listbox.pm</FONT></TT>
file, this script reveals a lot of key bindings. Some modules
even show <TT><FONT FACE="Courier">&lt;HANDLE&gt;</FONT></TT>
and <TT><FONT FACE="Courier">&lt;ARGV&gt;</FONT></TT>, so you
have to know what to ignore. Also, bound keys are inherited, so
listing one module's bindings may not be complete if any properties
are inherited from other sources. The output from the <TT><FONT FACE="Courier">Listbox.pm</FONT></TT>
file is as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&lt;1&gt;<BR>
&lt;B1-Motion&gt;<BR>
&lt;ButtonRelease-1&gt;<BR>
&lt;Shift-1&gt;<BR>
&lt;Control-1&gt;<BR>
&lt;B1-Leave&gt;<BR>
&lt;B1-Enter&gt;<BR>
&lt;Up&gt;<BR>
&lt;Shift-Up&gt;<BR>
&lt;Down&gt;<BR>
&lt;Shift-Down&gt;<BR>
&lt;Control-Home&gt;<BR>
&lt;Shift-Control-Home&gt;<BR>
&lt;Control-End&gt;<BR>
&lt;Shift-Control-End&gt;<BR>
&lt;space&gt;<BR>
&lt;Select&gt;<BR>
&lt;Control-Shift-space&gt;<BR>
&lt;Shift-Select&gt;<BR>
&lt;Escape&gt;<BR>
&lt;Control-slash&gt;<BR>
&lt;Control-backslash&gt;<BR>
&lt;2&gt;<BR>
&lt;B2-Motion&gt;<BR>
<P>
Note the &lt;1&gt; and &lt;2&gt; in the output.<BR>
</FONT></TT>
</BLOCKQUOTE>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Tip</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
Do not use  the <TT><FONT FACE="Courier">%k</FONT></TT> symbols for <TT><FONT FACE="Courier">Tcl/Tk</FONT></TT> in Perl scripts. The <TT><FONT FACE="Courier">%k</FONT></TT> symbols will be misinterpreted as nonexistent Perl hashes.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Listing 17.11 illustrates how to read the button and key bindings
from <TT><FONT FACE="Courier">Xevents</FONT></TT>.
<HR>
<BLOCKQUOTE>
<B>Listing 17.11. A sample key bindings display program.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;1 #!/usr/bin/perl -w<BR>
&nbsp;2 use Tk;<BR>
&nbsp;3 <BR>
&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp; $mw = MainWindow-&gt;new();<BR>
&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp; $frame = $mw-&gt;Frame( -height
=&gt; '6c', -width =&gt; '6c',<BR>
&nbsp;6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-background
=&gt; 'black');<BR>
&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp; $frame-&gt;pack;&nbsp;&nbsp;#
show the frame<BR>
&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp; $mw-&gt;bind( '&lt;Any-KeyPress&gt;'
=&gt; \&amp;echo);&nbsp;&nbsp;# for all keys<BR>
&nbsp;9&nbsp;&nbsp;&nbsp;&nbsp; $mw-&gt;bind( '&lt;ButtonPress&gt;'
=&gt; \&amp;echoPress);&nbsp;&nbsp;# for all keys<BR>
10&nbsp;&nbsp;&nbsp;&nbsp; $mw-&gt;bind( '&lt;ButtonRelease&gt;'
=&gt; \&amp;echoRel);&nbsp;&nbsp;# for all keys<BR>
11 <BR>
12&nbsp;&nbsp;&nbsp;&nbsp; MainLoop();<BR>
13 <BR>
14&nbsp;&nbsp;&nbsp;&nbsp; sub echoRel {<BR>
15&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print &quot;Button Release
\n&quot;;<BR>
16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;my($btnc)
= @_;<BR>
17&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;my $e
= $btnc-&gt;XEvent;<BR>
18&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;my( $x,
$y ) = ( $e-&gt;x, $e-&gt;y, $e-&gt;K, $e-&gt;W, $e-&gt;A );<BR>
19&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print
&quot;&nbsp;&nbsp;x coor&nbsp;&nbsp;= $x\n&quot;;<BR>
20&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print
&quot;&nbsp;&nbsp;y coor&nbsp;&nbsp;= $y\n&quot;;<BR>
21&nbsp;&nbsp;&nbsp;&nbsp; }<BR>
22&nbsp;&nbsp;&nbsp;&nbsp; sub echoPress {<BR>
23&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print &quot;Button Press
\n&quot;;<BR>
24&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;my($btnc)
= @_;<BR>
25&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;my $e
= $btnc-&gt;XEvent;<BR>
26&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;my( $x,
$y ) = ( $e-&gt;x, $e-&gt;y, $e-&gt;K, $e-&gt;W, $e-&gt;A );<BR>
27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print
&quot;&nbsp;&nbsp;x coor&nbsp;&nbsp;= $x\n&quot;;<BR>
28&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print
&quot;&nbsp;&nbsp;y coor&nbsp;&nbsp;= $y\n&quot;;<BR>
29&nbsp;&nbsp;&nbsp;&nbsp; }<BR>
30 <BR>
31&nbsp;&nbsp;&nbsp;&nbsp; sub echo {<BR>
32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print &quot;Any Key Press
\n&quot;;<BR>
33&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;my($keyc)
= @_;<BR>
34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;my $e
= $keyc-&gt;XEvent;<BR>
35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;my( $x,
$y, $W, $K, $A ) = ( $e-&gt;x, $e-&gt;y, $e-&gt;K, $e-&gt;W, $e-&gt;A
);<BR>
36 <BR>
37&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print
&quot;&nbsp;&nbsp;x coor&nbsp;&nbsp;= $x\n&quot;;<BR>
38&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print
&quot;&nbsp;&nbsp;y coor&nbsp;&nbsp;= $y\n&quot;;<BR>
39&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print
&quot;&nbsp;&nbsp;KeyCode = $W\n&quot;;<BR>
40&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print
&quot;&nbsp;&nbsp;ASCII&nbsp;&nbsp;&nbsp;= $A\n&quot;;<BR>
41&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print
&quot;&nbsp;&nbsp;Window&nbsp;&nbsp;= $K\n&quot;;<BR>
42&nbsp;&nbsp;&nbsp;&nbsp; }</FONT></TT>
</BLOCKQUOTE>
<HR>
<H2><A NAME="DisplayingaBitmap"><FONT SIZE=5 COLOR=#FF0000>Displaying
a Bitmap</FONT></A></H2>
<P>
To display <TT><FONT FACE="Courier">.xbm</FONT></TT> bitmaps on
your widgets, use the <TT><FONT FACE="Courier">-bitmap</FONT></TT>
configuration option. Typically, <TT><FONT FACE="Courier">-bitmap</FONT></TT>
options are used with <TT><FONT FACE="Courier">Label</FONT></TT>,
<TT><FONT FACE="Courier">Frame</FONT></TT>, <TT><FONT FACE="Courier">Button</FONT></TT>,
and other types of widgets. <TT><FONT FACE="Courier">Canvas</FONT></TT>
widgets have to be treated differently. See the section on &quot;The
<TT><FONT FACE="Courier">Canvas</FONT></TT> Widget&quot; later
in this chapter. To specify a bitmap, use the <TT><FONT FACE="Courier">-bitmap</FONT></TT>
option as follows:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">$main-&gt;Button(-bitmap =&gt; 'hourglass')-&gt;pack;</FONT></TT>
</BLOCKQUOTE>
<P>
The names of the bitmaps built into <TT><FONT FACE="Courier">Tk</FONT></TT>
are <TT><FONT FACE="Courier">gray50</FONT></TT>, <TT><FONT FACE="Courier">hourglass</FONT></TT>,
<TT><FONT FACE="Courier">info</FONT></TT>, <TT><FONT FACE="Courier">question</FONT></TT>,
<TT><FONT FACE="Courier">questhead</FONT></TT>, and <TT><FONT FACE="Courier">warning</FONT></TT>.
In order to use some of the bitmaps outside the package, you need
to specify a full pathname like this:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">$main-&gt;Label(-bitmap =&gt; &quot;\@$tk_library/demos/cartoons&quot;)-&gt;pack;</FONT></TT>
</BLOCKQUOTE>
<P>
You have to use the escape (<TT><FONT FACE="Courier">\@</FONT></TT>)
with the directory specification. If you wanted to specify a file
called <TT><FONT FACE="Courier">mailbox.xbm</FONT></TT> in the
directory where you were running the script, then either of the
following two commands should work:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">$main-&gt;Label(-bitmap =&gt; '@mailbox.xbm')-&gt;pack;
<BR>
$main-&gt;Label(-bitmap =&gt; &quot;\@mailbox.xbm&quot;)-&gt;pack;</FONT></TT>
</BLOCKQUOTE>
<P>
If no explicit pathname is given, the directory is assumed to
exist in the current working <BR>
directory. To specify a full pathname, try this command:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">$main-&gt;Label(-bitmap =&gt; &quot;\@/dirty/pix/filth.xbm&quot;)-&gt;pack;</FONT></TT>
</BLOCKQUOTE>
<H2><A NAME="DisplayingImageswithPhoto"><FONT SIZE=5 COLOR=#FF0000>Displaying
Images with </FONT><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">Photo</FONT></TT></A>
</H2>
<P>
The <TT><FONT FACE="Courier">Photo</FONT></TT> method in <TT><FONT FACE="Courier">main</FONT></TT>
lets you place GIF images on a button or label. The type supported
by <TT><FONT FACE="Courier">Photo</FONT></TT> is called <TT><FONT FACE="Courier">'imggif'</FONT></TT>.
See Listing 17.12 and Figure 17.11 for how to use this feature.<P>
<A HREF="f17-11.gif" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/f17-11.gif"><B>Figure 17.11 :</B><I>Using images in labels.</I></A>
<HR>
<BLOCKQUOTE>
<B>Listing 17.12. Using images in labels.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;1 #!/usr/bin/perl -w<BR>
&nbsp;2 use Tk;<BR>
&nbsp;3 <BR>
&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp; my $main = new MainWindow;<BR>
&nbsp;5 <BR>
&nbsp;6&nbsp;&nbsp;&nbsp;&nbsp; $main -&gt;Label(-text =&gt; 'Demo')-&gt;pack;
<BR>
&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp; $main -&gt; Photo('imggif', -file
=&gt; &quot;lbl.gif&quot;);<BR>
&nbsp;8 <BR>
&nbsp;9&nbsp;&nbsp;&nbsp;&nbsp; my $labelImage = $main-&gt;Label('-image'
=&gt; 'imggif')-&gt;pack;<BR>
10 <BR>
11&nbsp;&nbsp;&nbsp;&nbsp; $main-&gt;Button(-text =&gt; 'close',
<BR>
12&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-command =&gt; sub{destroy $main}<BR>
13&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)-&gt;pack(-side =&gt; 'left');<BR>
14 <BR>
15&nbsp;&nbsp;&nbsp;&nbsp; $main-&gt;Button(-text =&gt; 'exit',
<BR>
16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-command =&gt; [sub{exit}]<BR>
17&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)-&gt;pack(-side =&gt; 'right');<BR>
18&nbsp;&nbsp;&nbsp;&nbsp; MainLoop;<BR>
19 :</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The following formats and file extensions are supported: X11 bitmaps
(<TT><FONT FACE="Courier">.xbm</FONT></TT>), X pixmaps (<TT><FONT FACE="Courier">.xpm</FONT></TT>),
and the graphics interchange format (<TT><FONT FACE="Courier">.gif</FONT></TT>).
There are several demos in the <TT><FONT FACE="Courier">Tk</FONT></TT>
package and on CPAN sites.
<H2><A NAME="Menus"><FONT SIZE=5 COLOR=#FF0000>Menus</FONT></A>
</H2>
<P>
The <TT><FONT FACE="Courier">Perl/Tk</FONT></TT> package gives
excellent support for menus. The demo program that comes with
the package itself is a great example. I wish I knew the author
of this program because I have not found a neater menu usage demonstration
elsewhere. Run <TT><FONT FACE="Courier">nl</FONT></TT> on it to
get line numbers and a listing for yourself. The program is <I>not</I>
listed here. Check the <TT><FONT FACE="Courier">Tk-b9.01/demos/tom</FONT></TT>
file.
<P>
This program demonstrates the following items with sample code
referred to by line numbers:
<UL>
<LI><FONT COLOR=#000000>How to set up menu frames to put items
on (line 13)</FONT>
<LI><FONT COLOR=#000000>How to add menu buttons to the frame (line
34)</FONT>
<LI><FONT COLOR=#000000>How to attach callbacks to menu items
(line 39)</FONT>
<LI><FONT COLOR=#000000>How to bind keys to menu items (lines
59</FONT>-65)
<LI><FONT COLOR=#000000>How to add check buttons (line 79)</FONT>
<LI><FONT COLOR=#000000>How to add radio buttons (line 84)</FONT>
<LI><FONT COLOR=#000000>How to add color bars (line 135)</FONT>
</UL>
<P>
To get tear-off menus, use the <TT><FONT FACE="Courier">-tearoff</FONT></TT>
option with a value of <TT><FONT FACE="Courier">0</FONT></TT>
in the configuration option of the menu:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">my $mb = $parent-&gt;Menubutton(...);&nbsp;&nbsp;&nbsp;&nbsp;#
The button<BR>
my $menu = $mb-&gt;Menu(-tearoff =&gt; 0);&nbsp;&nbsp;# Create
a non-tearoff menu<BR>
$mb-&gt;configure(-menu =&gt; $menu);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
# Tell button to use it.</FONT></TT>
</BLOCKQUOTE>
<P>
You can use the demo program as the basis for your applications
using menus. The basic concepts are easy to pick up once you see
the syntax in operation.
<H2><A NAME="TheCanvasWidget"><FONT SIZE=5 COLOR=#FF0000>The </FONT><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">Canvas</FONT></TT><FONT SIZE=5 COLOR=#FF0000>
Widget</FONT></A></H2>
<P>
The <TT><FONT FACE="Courier">Canvas</FONT></TT> widget is the
most configurable and versatile of the widgets. You use the <TT><FONT FACE="Courier">Canvas</FONT></TT>
widget to draw on. To get the size of a <TT><FONT FACE="Courier">Canvas</FONT></TT>
widget after it has been resized, use the <TT><FONT FACE="Courier">$canvas
-&gt;Width;</FONT></TT> and <TT><FONT FACE="Courier">$canvas-&gt;Height;</FONT></TT>
calls to get the width and height, respectively. To get the default
size of the canvas when it was created, use the <TT><FONT FACE="Courier">$canvas-&gt;cget(-width);</FONT></TT>
and <TT><FONT FACE="Courier">$canvas-&gt;cget(-height);</FONT></TT>
calls.
<P>
If you want your <TT><FONT FACE="Courier">Canvas</FONT></TT> to
be able to grow to arbitrarily large sizes, be sure to specify
the <TT><FONT FACE="Courier">-expand</FONT></TT> and <TT><FONT FACE="Courier">-fill</FONT></TT>
options when you <TT><FONT FACE="Courier">-&gt;pack</FONT></TT>
the <TT><FONT FACE="Courier">Canvas</FONT></TT>.
<P>
Unlike other <TT><FONT FACE="Courier">Tk</FONT></TT> widgets,
the <TT><FONT FACE="Courier">Canvas</FONT></TT> widget does not
take the <TT><FONT FACE="Courier">-bitmap</FONT></TT> configuration
option. One of the ways to place things (including bitmaps) onto
a <TT><FONT FACE="Courier">Canvas</FONT></TT> is to call <TT><FONT FACE="Courier">create()</FONT></TT>
on it. Let's see how a <TT><FONT FACE="Courier">Canvas</FONT></TT>
handles bitmaps differently from the configurable widgets. First,
assume that you wanted to specify the <TT><FONT FACE="Courier">'hourglass'</FONT></TT>
built-in bitmap in Listing 17.13.
<HR>
<BLOCKQUOTE>
<B>Listing 17.13. Using a bitmap.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">1 #!/usr/bin/perl<BR>
2 use Tk;<BR>
3 my $mw = MainWindow-&gt;new();<BR>
4 my $cv = $mw-&gt;Canvas();<BR>
5 my $bm = $cv-&gt;create('bitmap',10,10, -bitmap=&gt;'hourglass');
<BR>
6 $cv-&gt;pack;<BR>
7 $mw-&gt;MainLoop</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
To erase an item like a bitmap, call <TT><FONT FACE="Courier">delete()</FONT></TT>
on it. Assuming your <TT><FONT FACE="Courier">Canvas</FONT></TT>
tag is <TT><FONT FACE="Courier">$cv</FONT></TT> and your bitmap
is stored in <TT><FONT FACE="Courier">$bm</FONT></TT>, then the
call would be this:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">$cv-&gt;delete($bm);</FONT></TT>
</BLOCKQUOTE>
<P>
This is, of course, useful in a callback. For example, to configure
a <TT><FONT FACE="Courier">Button</FONT></TT> to do your deletion
for you, you could use something like this:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">$mw-&gt;Button(-text&nbsp;&nbsp;&nbsp;=&gt;
'Erase',<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-command=&gt;sub{$cv-&gt;delete($bm})-&gt;pack;</FONT></TT>
</BLOCKQUOTE>
<P>
A <TT><FONT FACE="Courier">Canvas</FONT></TT> widget also can
be used as a geometry manager, because you have to specify a position
for all the items on the <TT><FONT FACE="Courier">Canvas</FONT></TT>
widget. The <TT><FONT FACE="Courier">x=10</FONT></TT> and <TT><FONT FACE="Courier">y=10</FONT></TT>
parameters in the sample specify the screen pixel location from
the upper-left of the canvas. Other possible units are shown in
Table 17.1.<BR>
<P>
<CENTER><B>Table 17.1. Units for the placement of bitmaps on a
canvas.</B></CENTER>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=61><CENTER><I>Tag</I></CENTER></TD><TD WIDTH=162><CENTER><I>Unit</I></CENTER>
</TD><TD WIDTH=90><CENTER><I>Sample</I></CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=61><CENTER><TT><I><FONT FACE="Courier">none</FONT></I></TT></CENTER>
</TD><TD WIDTH=162>pixels</TD><TD WIDTH=90><TT><FONT FACE="Courier">25,50</FONT></TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=61><CENTER><TT><FONT FACE="Courier">m</FONT></TT></CENTER>
</TD><TD WIDTH=162>millimeters</TD><TD WIDTH=90><TT><FONT FACE="Courier">10m,10m</FONT></TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=61><CENTER><TT><FONT FACE="Courier">c</FONT></TT></CENTER>
</TD><TD WIDTH=162>centimeters</TD><TD WIDTH=90><TT><FONT FACE="Courier">4c,2c</FONT></TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=61><CENTER><TT><FONT FACE="Courier">p</FONT></TT></CENTER>
</TD><TD WIDTH=162>points (<FONT SIZE=1>1</FONT>/<FONT SIZE=1>72</FONT> of an inch)
</TD><TD WIDTH=90><TT><FONT FACE="Courier">36p,72p</FONT></TT>
</TD></TR>
</TABLE></CENTER>
<P>
<P>
Just as for the other widget types, there is a two-step process
of first getting a <TT><FONT FACE="Courier">Photo</FONT></TT>
handle on the file of interest. See Listing 17.14. Make sure you
have a GIF file in your current directory and change the listing
to use the name of that file, or else all you'll see is a blank
screen.
<HR>
<BLOCKQUOTE>
<B>Listing 17.14. Using </B><TT><B><FONT FACE="Courier">Photo</FONT></B></TT><B>
and </B><TT><B><FONT FACE="Courier">Canvas</FONT></B></TT><B>
together.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;1 #!/usr/bin/perl -w<BR>
&nbsp;2 use Tk;<BR>
&nbsp;3 my $main = new MainWindow;<BR>
&nbsp;4 my $canvar = $main -&gt;Canvas;<BR>
&nbsp;5 <BR>
&nbsp;6 $main-&gt;Photo('imggif', -file =&gt; &quot;myface.gif&quot;);
<BR>
&nbsp;7 $canvar-&gt;create(qw(image 15c 15c), '-image' =&gt; 'imggif');
<BR>
&nbsp;8 <BR>
&nbsp;9 $canvas-&gt;pack;<BR>
10 MainLoop;</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
The following types of images can be used in <TT><FONT FACE="Courier">$canvar-&gt;create</FONT></TT>
calls:<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=90><TT><FONT FACE="Courier">arc</FONT></TT></TD>
<TD WIDTH=355>For sections of a circle</TD></TR>
<TR VALIGN=TOP><TD WIDTH=90><TT><FONT FACE="Courier">bitmap</FONT></TT></TD>
<TD WIDTH=355>For X11 bitmap files/built-ins</TD></TR>
<TR VALIGN=TOP><TD WIDTH=90><TT><FONT FACE="Courier">image</FONT></TT></TD>
<TD WIDTH=355>For <TT><FONT FACE="Courier">Photo</FONT></TT> image types (<TT><FONT FACE="Courier">gif</FONT></TT>, <TT><FONT FACE="Courier">xpm</FONT></TT>, and so on)
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=90><TT><FONT FACE="Courier">line</FONT></TT></TD>
<TD WIDTH=355>For lines</TD></TR>
<TR VALIGN=TOP><TD WIDTH=90><TT><FONT FACE="Courier">oval</FONT></TT></TD>
<TD WIDTH=355>Includes circles</TD></TR>
<TR VALIGN=TOP><TD WIDTH=90><TT><FONT FACE="Courier">polygon</FONT></TT>
</TD><TD WIDTH=355>May be a closed polygon with the <TT><FONT FACE="Courier">-filled</FONT></TT> option
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=90><TT><FONT FACE="Courier">text</FONT></TT></TD>
<TD WIDTH=355>Similar to <TT><FONT FACE="Courier">Text</FONT></TT> widget primitive
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=90><TT><FONT FACE="Courier">window</FONT></TT></TD>
<TD WIDTH=355>Allows embedding of other widgets</TD></TR>
</TABLE></CENTER>
<P>
<H2><A NAME="MiscellaneousTopics"><FONT SIZE=5 COLOR=#FF0000>Miscellaneous
Topics</FONT></A></H2>
<P>
The following sections are miscellaneous topics about using <TT><FONT FACE="Courier">Perl/Tk</FONT></TT>
that are gleaned from FAQs, news messages, and <TT><FONT FACE="Courier">.pod</FONT></TT>
files. Each topic could not fit in sequence in the chapter but
has enough information in it to merit its inclusion.
<H3><A NAME="ReferenceswithSubroutines">References with Subroutines</A>
</H3>
<P>
Everything in <TT><FONT FACE="Courier">Tk</FONT></TT>-land is
a reference. Always pass variables by reference. Callbacks are
closures; therefore, if you do not pass by reference, then the
value of the variables in the subroutine will be the value when
defined, not when called.
<H3><A NAME="ChangingtheCursor">Changing the Cursor</A></H3>
<P>
To change the cursor for an application, you have to use the <TT><FONT FACE="Courier">-cursor</FONT></TT>
option with four values. Here are these values:
<UL>
<LI><FONT COLOR=#000000>The pathname to the bitmap with </FONT><TT><FONT FACE="Courier">@</FONT></TT>
prepended to indicate it isn't a built-in name (using <TT><FONT FACE="Courier">findInc</FONT></TT>
to locate the file relative to the <TT><FONT FACE="Courier">Tk</FONT></TT>
install location)
<LI><FONT COLOR=#000000>The pathname to the mask bitmap (no </FONT><TT><FONT FACE="Courier">@</FONT></TT>
required)
<LI><FONT COLOR=#000000>The foreground color</FONT>
<LI><FONT COLOR=#000000>The background color</FONT>
</UL>
<P>
The <TT><FONT FACE="Courier">Tk/demos/color_editor</FONT></TT>
uses the following sequence to get the cursor:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">#!/usr/local/bin/perl -w<BR>
use Tk;<BR>
my $mw = MainWindow-&gt;new;<BR>
$mw-&gt;configure(-cursor =&gt; ['@' .<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tk-&gt;findInc('demos/images/cursor.xbm'),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tk-&gt;findInc('demos/images/cursor.mask'),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'red',
'green']);<BR>
MainLoop;</FONT></TT>
</BLOCKQUOTE>
<H3><A NAME="DebuggingYourPerlTkScripts">Debugging Your <TT><FONT SIZE=4 FACE="Courier">Perl/Tk</FONT></TT><FONT SIZE=4>
Scripts</FONT></A></H3>
<P>
Unfortunately, you are stuck with the use of the <TT><FONT FACE="Courier">-w</FONT></TT>
switch and <TT><FONT FACE="Courier">use strict;</FONT></TT> statements
since they provide informative error messages. A debugger is available
at <TT><FONT FACE="Courier"><A HREF="tppmsgs/msgs0.htm#19" tppabs="ftp://ftp.perl.com/pub/perl/ext/TK/Tkperldb-a1.tar.gz">ftp://ftp.perl.com/pub/perl/ext/TK/Tkperldb-a1.tar.gz</A></FONT></TT>;
however, at the time of this writing, I could not get it to work.
Perhaps in some time this debugger will be functional.
<P>
<A HREF="ch30.htm" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/ch30.htm" >See chapter 30</A>, &quot;Using the Perl Debugger.&quot;
<H3><A NAME="MoreThanOneInputFileHandle">More Than One Input File
Handle</A></H3>
<P>
As with Perl's <TT><FONT FACE="Courier">select()</FONT></TT> system
call, you can monitor more than one task with <TT><FONT FACE="Courier">Perl/Tk</FONT></TT>.
For example, if you have a GUI monitor program that manages input
from a variety of sources for display, you can use the <TT><FONT FACE="Courier">fileevent()</FONT></TT>
function call. Basically, a parent process creates several child
processes, each with its own pipe. Process-specific information
flows through a one-way pipe from each child to the parent.
<P>
To achieve this, set up the following statement in the parent
loop for each pipe:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">$main-&gt;fileevent(FILEHANDLE,$status,\&amp;subroutine);</FONT></TT>
</BLOCKQUOTE>
<P>
This causes <TT><FONT FACE="Courier">pTk</FONT></TT> to monitor
the <TT><FONT FACE="Courier">FILEHANDLE</FONT></TT> and call <TT><FONT FACE="Courier">'subroutine'</FONT></TT>
when an event happens on that handle. In this case, <TT><FONT FACE="Courier">FILEHANDLE</FONT></TT>
is the handle to the socket or pipe you are waiting on. The value
of <TT><FONT FACE="Courier">status</FONT></TT> could be <TT><FONT FACE="Courier">readable</FONT></TT>,
<TT><FONT FACE="Courier">writable</FONT></TT>, or <TT><FONT FACE="Courier">exception</FONT></TT>.
The \<TT><FONT FACE="Courier">&amp;subroutine</FONT></TT> is a
reference to a Perl subroutine to call when the <TT><FONT FACE="Courier">select()</FONT></TT>
call is invoked.
<H3><A NAME="EliminatingandHidingWindows">Eliminating and Hiding
Windows</A></H3>
<P>
If you are trying to eliminate a <TT><FONT FACE="Courier">TopLevel</FONT></TT>
or a <TT><FONT FACE="Courier">MainWindow</FONT></TT>, try this:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">$main -&gt; destroy;</FONT></TT>
</BLOCKQUOTE>
<P>
If you would rather not use <TT><FONT FACE="Courier">destroy</FONT></TT>,
then try this:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">$main-&gt;withdraw;&nbsp;&nbsp;&nbsp;#
remove<BR>
$main-&gt;deiconify;&nbsp;&nbsp;# put back</FONT></TT>
</BLOCKQUOTE>
<P>
If <TT><FONT FACE="Courier">$w</FONT></TT> is a subwindow (subwidget),
then
<BLOCKQUOTE>
<TT><FONT FACE="Courier">$w-&gt;packForget; # remove - if packed
<BR>
$w-&gt;pack(<I>... with options if any ...</I>);&nbsp;&nbsp;#
put back</FONT></TT>
</BLOCKQUOTE>
<P>
You can also call the following function to make a window invisible:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">$widget-&gt;UnmapWindow;</FONT></TT>
</BLOCKQUOTE>
<H3><A NAME="CreatingMoreThanOneIndependentWindo">Creating More
Than One Independent Window</A></H3>
<P>
You can create more than one window to do your user interface
for you. The following example creates two separate windows, both
of which are empty. You can add widgets to each window by using
the <TT><FONT FACE="Courier">$mw</FONT></TT> and <TT><FONT FACE="Courier">$top1</FONT></TT>
widgets. See Listing 17.15.
<HR>
<BLOCKQUOTE>
<B>Listing 17.15. More than one independent window.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;1 #!/usr/bin/perl<BR>
&nbsp;2 <BR>
&nbsp;3 use Tk;<BR>
&nbsp;4 use Tk::Toplevel;<BR>
&nbsp;5 <BR>
&nbsp;6 $mw = MainWindow-&gt;new;<BR>
&nbsp;7 <BR>
&nbsp;8 my $top1 = $mw-&gt;Toplevel;<BR>
&nbsp;9 <BR>
10 MainLoop;</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
When running this script, be careful to note which window pops
up first. The first window up gets the focus in its widget. To
make a <TT><FONT FACE="Courier">Toplevel</FONT></TT> window active,
call <TT><FONT FACE="Courier">grab</FONT></TT>. Try this call
after creating the widgets to grab the focus for your window:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">$top1-&gt;grab(grab_option);</FONT></TT>
</BLOCKQUOTE>
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></A>
</H2>
<P>
This chapter has been a whirlwind tour of the <TT><FONT FACE="Courier">Perl/Tk</FONT></TT>
package. Hopefully, this chapter provided you with enough information
to write your own GUI scripts or to get you started at the least.
The package really deserves more than one chapter-I am sure that
I have not even covered some of the basic functionality. Given
the information in this chapter, you should know where to look.
Finally, check out the man pages that came with the package, the
newsgroups, and the CPAN sites for more up-to-date information.
Good luck.
<P>
<HR WIDTH="100%"></P>

<CENTER><P><A HREF="ch16.htm" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/ch16.htm"><IMG SRC="pc.gif" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="#CONTENTS"><IMG SRC="cc.gif" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="index.htm" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/index.htm"><IMG SRC="hb.gif" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="ch18.htm" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/ch18.htm"><IMG 
SRC="nc.gif" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A></P></CENTER>

<P>
<HR WIDTH="100%"></P>

</BODY>
</HTML>
