<HTML>

<HEAD>
   <TITLE>Chapter 24 -- Building and Installing the
Perl 5 Interpreter</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT COLOR=#FF0000>Chapter 24</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Building and Installing the
Perl 5 Interpreter</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>
<UL>
<LI><A HREF="#GettingPerl5" >Getting Perl 5</A>
<UL>
<LI><A HREF="#GettingPerlfromtheInternet" >Getting Perl from the Internet</A>
<LI><A HREF="#GettingPerlviaEmail" >Getting Perl via E-mail</A>
<LI><A HREF="#WebSiteswithPerlInformation" >Web Sites with Perl Information</A>
<LI><A HREF="#OnCDROM" >On CD-ROM</A>
</UL>
<LI><A HREF="#InstallingPerlonMostUNIXSystems" >Installing Perl on Most UNIX Systems</A>
<UL>
<LI><A HREF="#ConfiguringYourPerlDistribution" >Configuring Your Perl Distribution</A>
<LI><A HREF="#MakingDependencies" >Making Dependencies</A>
<LI><A HREF="#WhatArehintsFiles" >What Are hints Files?</A>
</UL>
<LI><A HREF="#RunningSomeTests" >Running Some Tests</A>
<UL>
<LI><A HREF="#FinishingItUp" >Finishing It Up</A>
<LI><A HREF="#ConfirmingtheInstallation" >Confirming the Installation</A>
</UL>
<LI><A HREF="#TheDOSPlatform" >The DOS Platform</A>
<LI><A HREF="#OtherPlatforms" >Other Platforms</A>
<LI><A HREF="#LinuxASpecialCaseforPerl5" >Linux: A Special Case for Perl 5</A>
<UL>
<LI><A HREF="#PartialUpgradesofYourLinuxKernel" >Partial Upgrades of Your Linux Kernel for Getting Perl Running</A>
<LI><A HREF="#TheRealDangerDuringthePartialUpgra" >The Real Danger During the Partial Upgrade</A>
</UL>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
This chapter covers the gory details of installing Perl 5 on a
given system. First, you find out where to get the distributions
via the Internet. Then you learn the details of some of the things
you need to do to get the Perl 5 package built and installed on
to your machine. I cover building the sources for a UNIX system
here in detail because this is what most of the sources are targeted
for anyway. However, I also cover how to get Perl 5 on other platforms.
<H2><A NAME="GettingPerl5"><B><FONT SIZE=5 COLOR=#FF0000>Getting
Perl 5</FONT></B></A></H2>
<P>
There are several ways to get the Perl 5 package for your system.
Some of the ways include buying a commercial package, getting
it from the Internet via FTP or e-mail, or having someone else
get it for you.
<H3><A NAME="GettingPerlfromtheInternet"><B>Getting Perl from
the Internet</B></A></H3>
<P>
The latest Perl packages are usually available from any <TT><FONT FACE="Courier">comp.sources.misc</FONT></TT>
archive on a given news site. The latest source distribution will
almost always be at Larry Wall's site. Here's the address:
<BLOCKQUOTE>
<TT><FONT FACE="Courier"><A HREF="tppmsgs/msgs0.htm#32" tppabs="ftp://ftp.sems.com/pub/outgoing/perl5.0/">ftp://ftp.sems.com/pub/outgoing/perl5.0/</A></FONT></TT>
</BLOCKQUOTE>
<P>
Larry Wall maintains the official distribution site (for both
<TT><FONT FACE="Courier">perl4.036</FONT></TT> and <TT><FONT FACE="Courier">perl5</FONT></TT>)
at his site. Always check this site first for the latest versions
and, if you are the brave sort, for the beta releases being worked
on.
<P>
A number of archives have materialized over the years, and these
archives hold Perl source code and related items. Probably the
largest archive is at the University of Florida. The Comprehensive
Perl Archive Network (CPAN) is a collection of all Perl materials
including source files, modules, and documentation. In order of
probability, these other sites should also have the Perl source
files:
<BLOCKQUOTE>
<TT><FONT FACE="Courier"><A HREF="tppmsgs/msgs0.htm#33" tppabs="ftp://ftp.cis.ufl.edu/pub/perl/src/5.0/">ftp://ftp.cis.ufl.edu/pub/perl/src/5.0/</A>
<BR>
<A HREF="tppmsgs/msgs0.htm#34" tppabs="ftp://ftp.cbi.tamucc.edu/pub/duff/Perl/">ftp://ftp.cbi.tamucc.edu/pub/duff/Perl/</A><BR>
<A HREF="tppmsgs/msgs0.htm#35" tppabs="ftp://ftp.metronet.com/pub/perl/sources/">ftp://ftp.metronet.com/pub/perl/sources/</A><BR>
<A HREF="tppmsgs/msgs0.htm#36" tppabs="ftp://genetics.upenn.edu/perl5/">ftp://genetics.upenn.edu/perl5/</A><BR>
<A HREF="tppmsgs/msgs0.htm#37" tppabs="ftp://ikra.com/pub/perl5">ftp://ikra.com/pub/perl5</A></FONT></TT>
</BLOCKQUOTE>
<P>
By the time you get this book, this listing might be superseded
by newer sites. The best course of action is to use <TT><FONT FACE="Courier">archie</FONT></TT>
or a Web search site such as Yahoo to search for the words <I>Perl,
CPAN,</I> or <I>Perl5</I> to get the list of the latest versions
of Perl 5 packages.
<H3><A NAME="GettingPerlviaEmail"><B>Getting Perl via E-mail</B></A>
</H3>
<P>
If you do not have direct FTP access, all is not lost. You can
get the packages via e-mail. Table 24.1 is a small list of known
FTP mail sites. As a general rule, you should always attempt to
use the site closest to you with the FTP archive closest to it.
Many of these sites already have Perl on them.
<P>
For information on how to use one of these sites, send e-mail
containing the word <I>help</I> to the address.<BR>
<P>
<CENTER><B>Table 24.1. Location of e-mail addresses that have
Perl.</B></CENTER>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=118><I>Location</I></TD><TD WIDTH=291><I>E-mail Address</I>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=118>Massachusetts</TD><TD WIDTH=291><TT><FONT FACE="Courier">ftpmail@decwrl.dec.com</FONT></TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=118>New Jersey</TD><TD WIDTH=291><TT><FONT FACE="Courier">bitftp@pucc.princeton.edu</FONT></TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=118>North Carolina</TD><TD WIDTH=291><TT><FONT FACE="Courier">ftpmail@sunsite.unc.edu</FONT></TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=118>Germany</TD><TD WIDTH=291><TT><FONT FACE="Courier">ftpmail@ftp.uni-stuttgart.de</FONT></TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=118>UK</TD><TD WIDTH=291><TT><FONT FACE="Courier">ftpmail@doc.ic.ac.uk</FONT></TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=118>Australia</TD><TD WIDTH=291><TT><FONT FACE="Courier">ftpmail@cs.uow.edu.au</FONT></TT>
</TD></TR>
</TABLE></CENTER>
<P>
<P>
Send a message to <TT><FONT FACE="Courier">mail-server@cs.ruu.nl</FONT></TT>
containing this:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">begin<BR>
path your_email_address<BR>
send help<BR>
send PERL/perl5.0/INDEX<BR>
end</FONT></TT>
</BLOCKQUOTE>
<P>
You can omit the <TT><FONT FACE="Courier">path</FONT></TT> line
if your message contains a normal <TT><FONT FACE="Courier">From:</FONT></TT>
line. You'll receive a help file and an index of the directory
that contains the Perl materials.
<H3><A NAME="WebSiteswithPerlInformation"><B>Web Sites with Perl
Information</B></A></H3>
<P>
The following Web sites contain information on Perl 5. You can
get more listings by using the Net search facilities on the Web
by searching for the keyword <I>Perl5</I>.
<BLOCKQUOTE>
<TT><A HREF="tppmsgs/msgs0.htm#38" tppabs="http://www.metronet.com/perlinfo/perl5.html">http://www.metronet.com/perlinfo/perl5.html</A>
<BR>
<A HREF="tppmsgs/msgs0.htm#39" tppabs="http://www-cgi.cs.cmu.edu/cgi-bin/perl-man">http://www-cgi.cs.cmu.edu/cgi-bin/perl-man</A><BR>
http:://www.perl.com/<BR>
<A HREF="tppmsgs/msgs0.htm#40" tppabs="http://src.doc.ic.ac.uk/packages/perl5">http://src.doc.ic.ac.uk/packages/perl5</A></TT>
</BLOCKQUOTE>
<P>
Naturally, your Web search tool will return a different list of
directories. These sites will get you started at the very least.
<P>
The FAQ for Perl 5 is available at this site:
<BLOCKQUOTE>
<TT><A HREF="tppmsgs/msgs0.htm#41" tppabs="http://mox.perl.com/perl/faq">http://mox.perl.com/perl/faq</A></TT>
</BLOCKQUOTE>
<H3><A NAME="OnCDROM"><B>On CD-ROM</B></A></H3>
<P>
The best collection I've found to date is the InfoMagic release
of the CD-ROM <I>Mother of Perl</I>. This two-disc set includes
the archives, mailing list archives, and lots of mirrors of CPAN
sites. My disc was up to 5.001m, but a more current disc set should
be available at the time this book goes to print. For more information
contact InfoMagic at this address:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">InfoMagic<BR>
Box 30370<BR>
Flagstaff, AZ 86003<BR>
520-526-9565<BR>
www.infomagic.com</FONT></TT>
</BLOCKQUOTE>
<H2><A NAME="InstallingPerlonMostUNIXSystems"><B><FONT SIZE=5 COLOR=#FF0000>Installing
Perl on Most UNIX Systems</FONT></B></A></H2>
<P>
Installing Perl takes time, but it's easy. I cover the installation
on a UNIX-based system because this covers the most general installations
of Perl. Please check the section titled &quot;Other Platforms&quot;
for more instructions if you are not on a UNIX platform.
<P>
Here are the basic steps to follow:
<OL>
<LI>Make sure you have all the files.
<LI>Configure your Perl distribution for your system.
<LI>Construct the dependencies.
<LI>Make the executables in your local directory.
<LI>Run a test version to see if everything is okay.
<LI>If everything checks out, make the distribution available
to the rest of the users on your machine.
</OL>
<P>
First, unzip and untar the Perl 5 package in a directory not in
the <TT><FONT FACE="Courier">/usr</FONT></TT> directory tree.
You'll install this distribution in the <TT><FONT FACE="Courier">/usr</FONT></TT>
or <TT><FONT FACE="Courier">/usr/local</FONT></TT> later. For
now, just use a subdirectory in your home directory.
<P>
Go to the directory where you downloaded your Perl distribution.
Then unzip and untar the distribution files with these commands:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">$ <B>gunzip</B> <I><B>XXXX</B></I>.<B>tar.gz
<BR>
</B>$ <B>tax -cvf <I>XXXX</I>.tar</B></FONT></TT>
</BLOCKQUOTE>
<P>
where <TT><I><FONT FACE="Courier">XXXX</FONT></I></TT> is the
name of the Perl distribution you got from the Internet. At the
time this book was written, this was <TT><FONT FACE="Courier">perl5.002.tar.gz</FONT></TT>.
The <TT><FONT FACE="Courier">5.002</FONT></TT> version is installed
and used for all examples in this book.
<P>
The <TT><FONT FACE="Courier">INSTALL</FONT></TT> file is the master
document you need to refer to if this chapter does not get you
started. The text in the <TT><FONT FACE="Courier">INSTALL</FONT></TT>
file is in the plain old documentation (pod) format. Run <TT><FONT FACE="Courier">pod2man</FONT></TT>
to get the documentation in the <TT><FONT FACE="Courier">man</FONT></TT>
page format.
<P>
The <TT><FONT FACE="Courier">MANIFEST</FONT></TT> file should
contain the information you need on what files go where. The files
after untarring the package should look like those shown in Listing
24.1.
<P>
Your Perl directory should contain the following source files
after you untar the package:
<HR>
<BLOCKQUOTE>
<B>Listing 24.1. </B><TT><B><FONT FACE="Courier">MANIFEST</FONT></B></TT><B>
files content list.&nbsp;&nbsp;<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Artistic&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;configure&nbsp;&nbsp;&nbsp;hints&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;op.h&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proto.h
<BR>
Changes&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cop.h&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hv.c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;opcode.h&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;regcomp.c
<BR>
Changes.Conf cv.h&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hv.h&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;opcode.pl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;regcomp.h
<BR>
Configure&nbsp;&nbsp;&nbsp;&nbsp;deb.c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;installman&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;regexec.c
<BR>
Copying&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doio.c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;installperl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;patchlevel.h&nbsp;&nbsp;regexp.h
<BR>
EXTERN.h&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doop.c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;interp.sym&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;perl.c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;run.c
<BR>
INSTALL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dosish.h&nbsp;&nbsp;&nbsp;&nbsp;keywords.h&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;perl.h&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scope.c
<BR>
INTERN.h&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dump.c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;keywords.pl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;perl_exp.SH&nbsp;&nbsp;&nbsp;scope.h
<BR>
MANIFEST&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lib&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;perlsh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sv.c
<BR>
Makefile.SH&nbsp;&nbsp;emacs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;makeaperl.SH&nbsp;&nbsp;&nbsp;&nbsp;perly.c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sv.h
<BR>
README&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;embed.h&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;makedepend.SH&nbsp;&nbsp;&nbsp;perly.c.diff&nbsp;&nbsp;t
<BR>
README.vms&nbsp;&nbsp;&nbsp;embed.pl&nbsp;&nbsp;&nbsp;&nbsp;makedir.SH&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;perly.fixer&nbsp;&nbsp;&nbsp;taint.c
<BR>
Todo&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ext&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;malloc.c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;perly.h&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;toke.c
<BR>
XSUB.h&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;form.h&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mg.c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;perly.y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unixish.h
<BR>
av.c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;global.sym&nbsp;&nbsp;mg.h&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pod&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;util.c
<BR>
av.h&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;globals.c&nbsp;&nbsp;&nbsp;minimod.pl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pp.c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;util.h
<BR>
cflags.SH&nbsp;&nbsp;&nbsp;&nbsp;gv.c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;miniperlmain.c&nbsp;&nbsp;pp.h&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;utils
<BR>
config_H&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gv.h&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mv-if-diff&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pp_ctl.c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vms
<BR>
config_h.SH&nbsp;&nbsp;h2pl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myconfig&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pp_hot.c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writemain.SH
<BR>
configpm&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handy.h&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;op.c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pp_sys.c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x2p</FONT></TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME="ConfiguringYourPerlDistribution"><B>Configuring Your
Perl Distribution</B></A></H3>
<P>
To configure your system, first run the <TT><FONT FACE="Courier">Configure</FONT></TT>
command in the <TT><FONT FACE="Courier">perl5</FONT></TT> directory
where your source files were untarred. The <TT><FONT FACE="Courier">Configure</FONT></TT>
command will figure out various settings about your system. <TT><FONT FACE="Courier">Configure</FONT></TT>
will be able to default to many settings by itself; for other
things it will ask you about. Figure 24.1 contains the output
from the <TT><FONT FACE="Courier">Configure</FONT></TT> command.
<P>
<A HREF="f24-1.gif" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/f24-1.gif" ><B>Figure 24.1 : </B><I>The output from a configure command.</I></A>
<P>
If the test scripts and programs run okay, the defaults are usually
right. <TT><FONT FACE="Courier">Configure</FONT></TT> will then
create a set of defaults for itself and then proceed to make three
files to store these sets of defaults: <TT><FONT FACE="Courier">config.h</FONT></TT>,
<TT><FONT FACE="Courier">config.sh</FONT></TT>, and <TT><FONT FACE="Courier">Makefile</FONT></TT>.
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Tip</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
If your default shell is not <TT><FONT FACE="Courier">ksh</FONT></TT>, <TT><FONT FACE="Courier">bash</FONT></TT>, or the Bourne shell, <TT><FONT FACE="Courier">sh</FONT></TT>, you may have to enter the following command:
<BR>
<TT><FONT FACE="Courier">sh Configure<BR>
</FONT></TT>This step will ensure that <TT><FONT FACE="Courier">Configure</FONT></TT> is run under <TT><FONT FACE="Courier">sh</FONT></TT>.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
If you feel lucky, run <TT><FONT FACE="Courier">Configure -d</FONT></TT>
to take all the defaults, and edit <TT><FONT FACE="Courier">config.sh</FONT></TT>
yourself to patch up any flaws. I do not recommend this course
of action unless you're a Perl wizard, in which case you probably
would have skipped this entire chapter.
<P>
The <TT><FONT FACE="Courier">Configure</FONT></TT> command supports
a lot of options. The one option to know about is the <TT><FONT FACE="Courier">-h</FONT></TT>
option, which prints a list of the available options for <TT><FONT FACE="Courier">Configure</FONT></TT>.
The options are useful in overriding any predefined values. For
example, you may have <TT><FONT FACE="Courier">cc</FONT></TT>'s
and GNU's compilers both on your system with <TT><FONT FACE="Courier">cc</FONT></TT>
as the default. To force <TT><FONT FACE="Courier">Configure</FONT></TT>
to use <TT><FONT FACE="Courier">gcc-elf</FONT></TT>, run the command
<TT><FONT FACE="Courier">Configure -Dcc=gcc-elf</FONT></TT>. Alternatively,
in the interactive mode, you can answer <TT><FONT FACE="Courier">gcc-elf</FONT></TT>
at the <TT><FONT FACE="Courier">cc</FONT></TT> prompt.
<P>
By default, Perl will be installed in the following directories:
<UL>
<LI><TT><FONT FACE="Courier">/usr/local/bin</FONT></TT>
<LI><TT><FONT FACE="Courier">/usr/local/lib</FONT></TT>
<LI><TT><FONT FACE="Courier">/usr/local/man</FONT></TT>
</UL>
<P>
You can specify a different directory for the default installation
location as long as you have read and write access to the directory.
The default directory pathname can be changed with the <TT><FONT FACE="Courier">-D</FONT></TT>
flag; for example, for specifying a pathname to a subdirectory
in my home directory I would use the command line option <TT><FONT FACE="Courier">-Dprefix='/home/khusain/perl5'</FONT></TT>.
The replacement for <TT><FONT FACE="Courier">/usr/local</FONT></TT>
is changed when you respond to the question of prefix in <TT><FONT FACE="Courier">Configure</FONT></TT>
script.
<P>
A couple of other points about running <TT><FONT FACE="Courier">Configure</FONT></TT>:
Do not reuse your old <TT><FONT FACE="Courier">config.h</FONT></TT>
or <TT><FONT FACE="Courier">config.SH</FONT></TT> file from a
previous version. Too many things may have changed. This is true
for patches to the Perl package as well. If you want to see some
differences, save a copy of the old file, rerun the <TT><FONT FACE="Courier">Configure</FONT></TT>
command, and then run a <TT><FONT FACE="Courier">diff</FONT></TT>
command to see the differences.
<P>
Actually, if you have some overrides that you want to use regardless
of those set up with <TT><FONT FACE="Courier">Configure</FONT></TT>,
you can put them in a file called <TT><FONT FACE="Courier">config.over</FONT></TT>.
This file can be used by <TT><FONT FACE="Courier">Configure</FONT></TT>
and overrides any values just before it writes the <TT><FONT FACE="Courier">config.sh</FONT></TT>
file. To get a head start, copy <TT><FONT FACE="Courier">config.sh</FONT></TT>
onto <TT><FONT FACE="Courier">config.over</FONT></TT>, and then
edit <TT><FONT FACE="Courier">config.over</FONT></TT>. The details
of this procedure are given in the <TT><FONT FACE="Courier">INSTALL</FONT></TT>
document.
<P>
Perl will use any dynamic extensions if your system supports them.
If you want to force Perl to be compiled and linked statically,
then you can choose this when <TT><FONT FACE="Courier">Configure</FONT></TT>
prompts you about it. Most of the later versions of Perl use dynamic
loading; therefore, if your system does not support it, consider
upgrading. See the section: &quot;Linux: A Special Case for Perl
5,&quot; in this chapter to see what some of the issues are.
<P>
While you are running <TT><FONT FACE="Courier">Configure</FONT></TT>,
be patient. Answer each question after reading it carefully. Yes,
the defaults are great, but ultimately you are the one who has
to run Perl on your system. Make sure you know enough about your
system to know if the defaults look right or not.
<P>
If your system is not recognized, you'll most certainly have to
answer questions alertly. The <TT><FONT FACE="Courier">Configure</FONT></TT>
script tells you if it has recognized your system, as shown in
Figure 24.2.
<P>
<A HREF="f24-2.gif" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/f24-2.gif" ><B>Figure 24.2 : </B><I>Recognition of a computer system by the configure command.</I></A>
<P>
Also, do not hold down the Enter key or press it too many times.
The returns may remain queued and provide a default reply when
you really did not mean to.
<P>
There is no way to back up or re-enter all the information if
you make a mistake. You have to start the entire process all over
from the initial <TT><FONT FACE="Courier">Configure</FONT></TT>
command. Keep this in mind as you answer the questions. You can
backspace on the current line, but you cannot go back to the previous
prompt. The prompter will recognize <TT><FONT FACE="Courier">$*</FONT></TT>
as the entire default line should you want to append to the default
values given. Arguments to responses can also be referred to as
<TT><FONT FACE="Courier">$1</FONT></TT>, <TT><FONT FACE="Courier">$2</FONT></TT>,
and so on to keep you from too much typing or typographical errors.
<P>
Use <TT><FONT FACE="Courier">sh</FONT></TT> at least or some other
shell instead that looks like the Bourne shell for the purpose
of this installation. If you are bent on using your own version
of <TT><FONT FACE="Courier">csh</FONT></TT>, you'll have to copy
the sample file <TT><FONT FACE="Courier">config_H</FONT></TT>
to <TT><FONT FACE="Courier">config.h</FONT></TT>, and edit <TT><FONT FACE="Courier">config.h</FONT></TT>
to adapt to your shell.
<P>
Now would be a good time to peruse the <TT><FONT FACE="Courier">config.h</FONT></TT>
file to make sure that the system dependencies are correct. Most
of them are taken care of by running the <TT><FONT FACE="Courier">Configure</FONT></TT>
script, but this will give you some insight on how the configuration
sets everything up.
<P>
If you have any additional changes to make to the C definitions,
make them in the <TT><FONT FACE="Courier">cflags.SH</FONT></TT>
file. For example, to turn off the optimizer on <TT><FONT FACE="Courier">toke.c</FONT></TT>,
find the line in the switch structure for <TT><FONT FACE="Courier">toke.c</FONT></TT>
and put the command <TT><FONT FACE="Courier">optimize='-g'</FONT></TT>
before the double semicolons. By default, the value is set to
<TT><FONT FACE="Courier">$optdebug</FONT></TT>.
<P>
To change the C flags for all the files, edit <TT><FONT FACE="Courier">config.sh
</FONT></TT>and change either <TT><FONT FACE="Courier">$ccflags</FONT></TT>
or <TT><FONT FACE="Courier">$optimize</FONT></TT>. In order to
ensure that the changes you have made to these header files propagate
to all other programs, you must run the following command:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Configure -S ; make depend<BR>
</FONT></TT>
</BLOCKQUOTE>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Tip</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
Any changes you make to the configuration files will not be automatically propagated to the rest of the files-you must run <TT><FONT FACE="Courier">Configure -S</FONT></TT> and <TT><FONT FACE="Courier">make depend</FONT></TT> to ensure that all affected 
files are updated.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="MakingDependencies"><B>Making Dependencies</B></A>
</H3>
<P>
After you've configured your Perl package for your system, you
must set up all the dependencies for the source files. This is
done by typing the command <TT><FONT FACE="Courier">make depend</FONT></TT>.
The make file looks for all the affected <TT><FONT FACE="Courier">include</FONT></TT>
files and modifies the <TT><FONT FACE="Courier">Makefile</FONT></TT>
accordingly.
<P>
The <TT><FONT FACE="Courier">Configure</FONT></TT> program will
offer to do this for you; you just have to answer Yes, as shown
in Figure 24.3. If you do not get this prompt, you can always
run it from the command line.
<P>
<A HREF="f24-3.gif" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/f24-3.gif" ><B>Figure 24.3 : </B><I>Running make depend from configure.</I></A>
<P>
Now, attempt to <TT><FONT FACE="Courier">make</FONT></TT> Perl
in the current directory. Run the <TT><FONT FACE="Courier">make</FONT></TT>
command from the prompt without any arguments. The execution of
this <TT><FONT FACE="Courier">make</FONT></TT> command will take
a while.
<P>
Generally speaking, you should encounter no errors. If you see
errors and if these errors impede the development of the platform,
the <TT><FONT FACE="Courier">make</FONT></TT> program will terminate.
If the errors are not critical or can be compensated for, <TT><FONT FACE="Courier">make</FONT></TT>
will continue and generate the correct files for you. Linux users
should refer to the online documentation on ELF in Linux.
<P>
No errors during the compile phase does not equal a clean build
in this case. Finish the entire procedure by testing the installation.
<P>
You may see some warnings, too. Again, this depends on the platform
on which you are building Perl. In most cases, the warnings can
be ignored. If you do see warnings about <TT><FONT FACE="Courier">LITTLE_ENDIAN</FONT></TT>
being redefined, ignore them. For your peace of mind, you might
want to check the definitions of <TT><FONT FACE="Courier">LITTLE_ENDIAN</FONT></TT>
in the files that the <TT><FONT FACE="Courier">make</FONT></TT>
file warns you about. Both the declarations should be the same-that
is, either 1234 or 4321, depending on the type of machine you
happen to be building the version of Perl on.
<P>
The <TT><FONT FACE="Courier">gcc</FONT></TT> compilers installed
in your system should be able to handle the Perl distribution
with only a few burps. For example, some function prototypes might
not be recognized by the compiler. There is a way to counter some
of these errors. For instance, try adding a <TT><FONT FACE="Courier">-DCRIPPLED_cc</FONT></TT>
flag. You might even consider turning off the <TT><FONT FACE="Courier">-O2</FONT></TT>
optimization flag in <TT><FONT FACE="Courier">config.sh</FONT></TT>
in your compiler.
<P>
If you get duplicate function definitions (a Perl function has
the same name as another function on your system), try using the
<TT><FONT FACE="Courier">-DEMBED</FONT></TT> switch to get rid
of the error. These errors are rare, but not impossible to come
by.
<P>
The worst error you could run into is an incomplete distribution.
In this case, the only recourse you have is to abandon all efforts
with your distribution and just start over with a fresh release
from the Internet. Chances are that even if you actually paid
someone for this crippled Perl release, they won't be interested
in providing you with free support.
<P>
The <TT><FONT FACE="Courier">config.sh</FONT></TT> file is the
one you need to know about if you have to modify the compiler
switches. The file is too long to list here, but I have listed
some of the switches that you should definitely take a look at
if you need to correct something:
<UL>
<LI><FONT COLOR=#000000>For the architecture type of CPU in your
machine:</FONT>
</UL>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">archname='i486-linux'</FONT></TT>
</BLOCKQUOTE>
<UL>
<LI><FONT COLOR=#000000>For your binary files' directories:</FONT>
</UL>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">bin='/usr/bin' &amp; binexp='/usr/bin'</FONT></TT>
</BLOCKQUOTE>
<UL>
<LI><FONT COLOR=#000000>For the </FONT><TT><FONT FACE="Courier">little
endian</FONT></TT> or <TT><FONT FACE="Courier">big endian</FONT></TT>
order of your machine:
</UL>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">byteorder='1234'</FONT></TT>
</BLOCKQUOTE>
<UL>
<LI><FONT COLOR=#000000>For the </FONT><TT><FONT FACE="Courier">c</FONT></TT>
flags for your compiler:
</UL>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">ccflags='-D__USE_BSD_SIGNAL -Dbool=char
-DHAS_BOOL'</FONT></TT>
</BLOCKQUOTE>
<UL>
<LI><FONT COLOR=#000000>For the preprocessor flags:</FONT>
</UL>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">cppflags='-D__USE_BSD_SIGNAL -Dbool=char
-DHAS_BOOL'</FONT></TT>
</BLOCKQUOTE>
<UL>
<LI><FONT COLOR=#000000>For any extensions you have added to Perl:</FONT>
</UL>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">extensions='DB_File Fcntl GDBM_File ODBM_File
POSIX SDBM_File Socket'</FONT></TT>
</BLOCKQUOTE>
<UL>
<LI><FONT COLOR=#000000>For the </FONT><TT><FONT FACE="Courier">gcc</FONT></TT>
version number:
</UL>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">gccversion='2.6.3'</FONT></TT>
</BLOCKQUOTE>
<UL>
<LI><FONT COLOR=#000000>For the locations where the binaries pages
will be installed:</FONT>
</UL>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">installbin='/usr/bin'<BR>
installprivlib='/usr/lib/perl5'<BR>
installscript='/usr/bin'</FONT></TT>
</BLOCKQUOTE>
<UL>
<LI><FONT COLOR=#000000>For the locations where </FONT><TT><FONT FACE="Courier">man</FONT></TT>
pages will be installed:
</UL>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">installman1dir='/usr/man/man1'<BR>
installman3dir='/usr/lib/perl5/man/man3'<BR>
man1dir='/usr/man/man1'<BR>
man1direxp='/usr/man/man1'<BR>
man1ext='1'<BR>
man3dir='/usr/lib/perl5/man/man3'<BR>
man3direxp='/usr/lib/perl5/man/man3'<BR>
man3ext='3'</FONT></TT>
</BLOCKQUOTE>
<UL>
<LI><FONT COLOR=#000000>For the libraries used to build Perl:</FONT>
</UL>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">libs='-lgdbm -ldbm -ldb -ldld -lm -lc
-lbsd'</FONT></TT>
</BLOCKQUOTE>
<UL>
<LI><FONT COLOR=#000000>For your system's generic shell:</FONT>
</UL>
<P>
<TT><FONT FACE="Courier">startsh='#!/bin/bash'</FONT></TT>
<P>
Some compilers will not compile or optimize the larger files without
some extra switches for using larger jump offsets or allocating
larger internal tables.
<P>
Perl without any extensions is referred to as <I>Miniperl</I>.
If you run into problems while building with extensions, you should
try to build Miniperl. If you can successfully build Miniperl
but the process crashes during the building of extensions, you
need to get the later versions of the extensions. In such an event,
get a completely new package and try to avoid doing piecemeal
patches, unless you know what you are doing-in which case you
should not even be reading this chapter ;-) .
<P>
Machines with incomplete <TT><FONT FACE="Courier">dbm</FONT></TT>
routines (specifically the <TT><FONT FACE="Courier">dbm_open()</FONT></TT>
function) will need to set the <TT><FONT FACE="Courier">#undef
I_ODBM</FONT></TT> preprocessor directive. For duplicate reference
error messages when linking files that call <TT><FONT FACE="Courier">malloc</FONT></TT>,
try the <TT><FONT FACE="Courier">-DHIDEMYMALLOC</FONT></TT> switch.
Both of these problems did <I>not</I> disappear on my Linux machine
until I upgraded the entire system and kernel to ELF. I did not
have to use <TT><FONT FACE="Courier">I_ODBM</FONT></TT> or the
<TT><FONT FACE="Courier">-DHIDEMYMALLOC</FONT></TT> flag after
the upgrade.
<H3><A NAME="WhatArehintsFiles"><B>What Are </B><TT><B><FONT SIZE=4 FACE="Courier">hints</FONT></B></TT><B><FONT SIZE=4>
Files?</FONT></B></A></H3>
<P>
In the Perl distribution, you'll find a <TT><FONT FACE="Courier">./hints</FONT></TT>
subdirectory. The <TT><FONT FACE="Courier">./hints</FONT></TT>
subdirectory is where platform-specific declarations are kept.
The files here are used by <TT><FONT FACE="Courier">Configure</FONT></TT>
to set things that <TT><FONT FACE="Courier">Configure</FONT></TT>
either cannot or does not guess properly. You may have to edit
these files for special versions of your computer operating system.
<P>
Generally, you should not have to use the <TT><FONT FACE="Courier">hints</FONT></TT>
file if you are using a UNIX-like operating system. Check the
contents of this directory to see whether your system is listed
and whether Perl works correctly with it. Check the <TT><FONT FACE="Courier">README.hints</FONT></TT>
file for a list of those systems for which Perl has been tested.
<P>
A sample listing of the <TT><FONT FACE="Courier">linux.sh</FONT></TT>
file is shown in Listing 24.2.
<HR>
<BLOCKQUOTE>
<B>Listing 24.2. The </B><TT><B><FONT FACE="Courier">linux.sh</FONT></B></TT><B>
</B><TT><B><FONT FACE="Courier">hints</FONT></B></TT><B> file.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">&nbsp;&nbsp;1 # hints/linux.sh<BR>
&nbsp;&nbsp;2 # Original version by rsanders<BR>
&nbsp;&nbsp;3 # Additional support by Kenneth Albanowski &lt;kjahds@kjahds.com&gt;
<BR>
&nbsp;&nbsp;4 #<BR>
&nbsp;&nbsp;5 # ELF support by H.J. Lu &lt;hjl@nynexst.com&gt;
<BR>
&nbsp;&nbsp;6 # Additional info from Nigel Head &lt;nhead@ESOC.bitnet&gt;
<BR>
&nbsp;&nbsp;7 # and Kenneth Albanowski &lt;kjahds@kjahds.com&gt;
<BR>
&nbsp;&nbsp;8 #<BR>
&nbsp;&nbsp;9 # Consolidated by Andy Dougherty &lt;doughera@lafcol.lafayette.edu&gt;
<BR>
&nbsp;10 #<BR>
&nbsp;11 # Last updated Tue May 30 14:25:02 EDT 1995<BR>
&nbsp;12 #<BR>
&nbsp;13 # If you wish to use something other than 'gcc' for your
compiler,<BR>
&nbsp;14 # you should specify it on the Configure command line.&nbsp;&nbsp;To
use<BR>
&nbsp;15 # gcc-elf, for exmample, type<BR>
&nbsp;16 # ./Configure -Dcc=gcc-elf<BR>
&nbsp;17<BR>
&nbsp;18 # perl goes into the /usr tree.&nbsp;&nbsp;See the Filesystem
Standard<BR>
&nbsp;19 # available via anonymous FTP at tsx-11.mit.edu in<BR>
&nbsp;20 # /pub/linux/docs/linux-standards/fsstnd.<BR>
&nbsp;21 # Allow a command line override, e.g. Configure -Dprefix=/foo/bar
<BR>
&nbsp;22 case &quot;$prefix&quot; in<BR>
&nbsp;23 '') prefix='/usr' ;;<BR>
&nbsp;24 esac<BR>
&nbsp;25<BR>
&nbsp;26 # Perl expects BSD style signal handling.<BR>
&nbsp;27 # gcc-2.6.3 defines _G_HAVE_BOOL to 1, but doesn't actually
supply bool.<BR>
&nbsp;28 ccflags=&quot;-D__USE_BSD_SIGNAL -Dbool=char -DHAS_BOOL
$ccflags&quot;<BR>
&nbsp;29<BR>
&nbsp;30 # The following functions are gcc built-ins, but the
Configure tests<BR>
&nbsp;31 # may fail because they don't supply proper prototypes.
<BR>
&nbsp;32 # This should be fixed as of 5.001f.&nbsp;&nbsp;I'd appreciate
reports.<BR>
&nbsp;33 d_memcmp=define<BR>
&nbsp;34 d_memcpy=define<BR>
&nbsp;35<BR>
&nbsp;36 # Configure may fail to find lstat() because it's a static/inline
<BR>
&nbsp;37 # function in &lt;sys/stat.h&gt;.<BR>
&nbsp;38 d_lstat=define<BR>
&nbsp;39<BR>
&nbsp;40 # Explanation?<BR>
&nbsp;41 d_dosuid='define'<BR>
&nbsp;42<BR>
&nbsp;43 # I think Configure gets this right now, but I'd appreciate
reports.<BR>
&nbsp;44 malloctype='void *'<BR>
&nbsp;45<BR>
&nbsp;46 # Explanation?<BR>
&nbsp;47 usemymalloc='n'<BR>
&nbsp;48<BR>
&nbsp;49 case &quot;$optimize&quot; in<BR>
&nbsp;50 '') optimize='-O2' ;;<BR>
&nbsp;51 esac<BR>
&nbsp;52<BR>
&nbsp;53 # Are we using ELF?&nbsp;&nbsp;Thanks to Kenneth Albanowski
&lt;kjahds@kjahds.com&gt;<BR>
&nbsp;54 # for this test.<BR>
&nbsp;55 cat &gt;try.c &lt;&lt;'EOM'<BR>
&nbsp;56 /* Test for whether ELF binaries are produced */<BR>
&nbsp;57 #include &lt;fcntl.h&gt;<BR>
&nbsp;58 #include &lt;stdlib.h&gt;<BR>
&nbsp;59 main() {<BR>
&nbsp;60&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char
buffer[4];<BR>
&nbsp;61&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
i=open(&quot;a.out&quot;,O_RDONLY);<BR>
&nbsp;62&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(i==-1)
<BR>
&nbsp;63&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(1);
/* fail */<BR>
&nbsp;64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(read(i,&amp;buffer[0],4)&lt;4)
<BR>
&nbsp;65&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(1);
/* fail */<BR>
&nbsp;66&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(buffer[0]
!= 127 || buffer[1] != 'E' ||<BR>
&nbsp;67&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buffer[2]
!= 'L' || buffer[3] != 'F')<BR>
&nbsp;68&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(1);
/* fail */<BR>
&nbsp;69&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(0);
/* succeed (yes, it's ELF) */<BR>
&nbsp;70 }<BR>
&nbsp;71 EOM<BR>
&nbsp;72 if ${cc:-gcc} try.c &gt;/dev/null 2&gt;&amp;1 &amp;&amp;
./a.out; then<BR>
&nbsp;73&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cat &lt;&lt;'EOM'<BR>
&nbsp;74<BR>
&nbsp;75 You appear to have ELF support.&nbsp;&nbsp;I'll try to
use it for dynamic loading.<BR>
&nbsp;76 EOM<BR>
&nbsp;77 else<BR>
&nbsp;78&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cat &lt;&lt;'EOM'<BR>
&nbsp;79<BR>
&nbsp;80 You don't have an ELF gcc.&nbsp;&nbsp;I will use dld
if possible.&nbsp;&nbsp;If you are<BR>
&nbsp;81 using a version of DLD earlier than 3.2.6, or don't have
it at all, you<BR>
&nbsp;82 should probably upgrade. If you are forced to use 3.2.4,
you should<BR>
&nbsp;83 uncomment a couple of lines in hints/linux.sh and restart
Configure so<BR>
&nbsp;84 that shared libraries will be disallowed.<BR>
&nbsp;85<BR>
&nbsp;86 EOM<BR>
&nbsp;87&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lddlflags=&quot;-r $lddlflags&quot;
<BR>
&nbsp;88&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# These empty values are
so that Configure doesn't put in the<BR>
&nbsp;89&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Linux ELF values.<BR>
&nbsp;90&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ccdlflags=' '<BR>
&nbsp;91&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cccdlflags=' '<BR>
&nbsp;92&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;so='sa'<BR>
&nbsp;93&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlext='o'<BR>
&nbsp;94&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;## If you are using DLD
3.2.4 which does not support shared libs,<BR>
&nbsp;95&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;## uncomment the next two
lines:<BR>
&nbsp;96&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ldflags=&quot;-static&quot;
<BR>
&nbsp;97&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#so='none'<BR>
&nbsp;98 fi<BR>
&nbsp;99<BR>
100 rm -f try.c a.out<BR>
101<BR>
102 if /bin/bash -c exit; then<BR>
103&nbsp;&nbsp;&nbsp;echo You appear to have a working bash. Good.
<BR>
104 else<BR>
105&nbsp;&nbsp;&nbsp;cat &lt;&lt; 'EOM'<BR>
106 Warning: it would appear you have a defective bash shell installed.
This is<BR>
107 likely to give you a failure of op/exec test #5 during the
test phase of the<BR>
108 build, Upgrading to a recent version (1.14.4 or later) should
fix the<BR>
109 problem.<BR>
110<BR>
111 EOM<BR>
112<BR>
113 fi<BR>
114<BR>
115 # In addition, on some systems there is a problem with perl
and NDBM, which<BR>
116 # causes AnyDBM and NDBM_File to lock up. This is evidenced
in the tests as<BR>
117 # AnyDBM just freezing.&nbsp;&nbsp;Currently we disable NDBM
for all linux systems.<BR>
118 # If someone can suggest a more robust test, that would be
appreciated.<BR>
119 # This will generate a harmless message:<BR>
120 # Hmm...You had some extra variables I don't know about...I'll
try to keep 'em.<BR>
121 #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Propagating
recommended variable d_dbm_open<BR>
122 d_dbm_open=undef</FONT></TT>
</BLOCKQUOTE>
<HR>
<P>
A <TT><FONT FACE="Courier">hint</FONT></TT> is simply a shell
script run by <TT><FONT FACE="Courier">Configure</FONT></TT> that
sets things it needs for your system. Usually the <TT><FONT FACE="Courier">hint</FONT></TT>
files are documented well enough to know why certain variables
are defined.
<P>
And sometimes they're not. It's usually not that hard to figure
out what the <TT><FONT FACE="Courier">define</FONT></TT> is about,
though. Case in point: the lines from the <TT><FONT FACE="Courier">linux.sh</FONT></TT>
file. Turning <TT><FONT FACE="Courier">malloc</FONT></TT> off
turns off Perl's version of <TT><FONT FACE="Courier">malloc</FONT></TT>.
There is really no need for an explanation here:
<BLOCKQUOTE>
<TT><FONT FACE="Courier"># Explanation?<BR>
usemymalloc='n'</FONT></TT>
</BLOCKQUOTE>
<P>
I use <TT><FONT FACE="Courier">linux.sh</FONT></TT> here as the
example because it's the system I happen to run. If you are on
an SCO system, you have some choices to make, depending on the
type of system you have. Here are the <TT><FONT FACE="Courier">hints</FONT></TT>
files included with <TT><FONT FACE="Courier">5.002:</FONT></TT>
<BLOCKQUOTE>
<TT><FONT 
FACE="Courier">3b1.sh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dnix.sh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;irix_6.sh&nb
sp;&nbsp;&nbsp;&nbsp;
opus.sh&nbsp;&nbsp;&nbsp;&nbsp;svr4.sh<BR>
3b1cc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dynix.sh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isc.sh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;powerunix&nbsp;&nbsp;&nbsp;&nbsp;.sh
ti1500.sh<BR>
README.hints&nbsp;&nbsp;&nbsp;&nbsp;epix.sh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isc_2.sh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sco_2_3_0&nbsp;&nbsp;&nbsp;&nbsp;.sh
titanos.sh<BR>
aix.sh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;esix4.sh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linux.sh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sco_2_3_1&nbsp;&nbsp;&nbsp;&nbsp;.sh
ultrix_4.sh<BR>
altos486.sh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fps.sh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;machten.sh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sco_2_3_2&nbsp;&nbsp;&nbsp;&nbsp;.sh
unicos.sh<BR>
apollo.sh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;freebsd.sh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mips.sh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sco_2_3_3&nbsp;&nbsp;&nbsp;&nbsp;.sh
unisysdynix.sh<BR>
aux.sh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;genix.sh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mpc.sh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sco_2_3_4&nbsp;&nbsp;&nbsp;&nbsp;.sh
utekv.sh<BR>
bsd386.sh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;greenhills.sh&nbsp;&nbsp;&nbsp;&nbsp;mpeix.sh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sco_3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.sh
uts.sh<BR>
convexos.sh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hpux_9.sh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ncr_tower.sh&nbsp;&nbsp;&nbsp;&nbsp;solaris_2.sh
<BR>
cxux.sh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i386.sh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;netbsd.sh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stellar.sh
<BR>
dec_osf.sh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;irix_4.sh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next_3.sh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sunos_4_0.sh
<BR>
dgux.sh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;irix_5.sh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next_3_0.sh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sunos_4_1.sh</FONT></TT>
</BLOCKQUOTE>
<H2><A NAME="RunningSomeTests"><B><FONT SIZE=5 COLOR=#FF0000>Running
Some Tests</FONT></B></A></H2>
<P>
Just because everything compiled doesn't mean you are out of the
woods. You have to run the regression tests on the <TT><FONT FACE="Courier">perl</FONT></TT>
you just made. You should see the message <TT><FONT FACE="Courier">All
tests successful</FONT></TT>. (See Figure 24.4.)
<P>
<A HREF="f24-4.gif" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/f24-4.gif" ><B>Figure 24.4 : </B><I>Results from a test run.</I></A>
<P>
If it doesn't say <TT><FONT FACE="Courier">All tests successful</FONT></TT>,
something went wrong. Figure 24.4 shows a sample run without any
error messages.<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Tip</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
You can't run the <TT><FONT FACE="Courier">make test</FONT></TT> command in the background because running that command disables the opening of the device <TT><FONT FACE="Courier">/dev/tty</FONT></TT>.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
In the unfortunate event that you do not see the successful message,
you have to figure out what went wrong. Go to the <TT><FONT FACE="Courier">t</FONT></TT>
directory. (I just love these directory names in UNIX.) Then run
the <TT><FONT FACE="Courier">TEST</FONT></TT> command to see the
results.
<P>
If an individual test has cratered, you can run that test manually
with this command:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">./perl op/groups.t</FONT></TT>
</BLOCKQUOTE>
<P>
Note that in the <TT><FONT FACE="Courier">t</FONT></TT> directory,
<TT><FONT FACE="Courier">./perl</FONT></TT> is linked to <TT><FONT FACE="Courier">../perl</FONT></TT>.
This is a fully working version of the real enchilada!
<H3><A NAME="FinishingItUp"><B>Finishing It Up</B></A></H3>
<P>
You've now run the test, and the doubts in your mind are a faded
memory. Let's discuss how to install Perl so that other users
on your system are able to use it.
<P>
It would be a good idea to run as root now if you are writing
in the <TT><FONT FACE="Courier">/usr</FONT></TT> tree. Of course,
you could have specified a totally different location over which
you have write privileges-in which case being root is a moot point.
Keep in mind that if you are not root, you must own the directories
where you are writing and ignore any messages about <TT><FONT FACE="Courier">chown</FONT></TT>
not working.
<P>
Now, take a deep breath and run the <TT><FONT FACE="Courier">make
install</FONT></TT> command:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">make install</FONT></TT>
</BLOCKQUOTE>
<P>
This command puts Perl into a public directory. If you used the
defaults, the location is <TT><FONT FACE="Courier">/usr/local/bin</FONT></TT>.
The <TT><FONT FACE="Courier">make install</FONT></TT> command
will also try to put the <TT><FONT FACE="Courier">man</FONT></TT>
pages in a reasonable place, possibly under <TT><FONT FACE="Courier">/usr/man</FONT></TT>.
You may have to <TT><FONT FACE="Courier">nroff</FONT></TT> the
<TT><FONT FACE="Courier">man</FONT></TT> page yourself, though.
(In newer systems, the first time you run the <TT><FONT FACE="Courier">man(1)</FONT></TT>
command, it will automatically run <TT><FONT FACE="Courier">nroff</FONT></TT>
and update the cat-files for you.)
<P>
The <TT><FONT FACE="Courier">make install</FONT></TT> command
creates the following files for you (I'm using <TT><FONT FACE="Courier">/usr/local/bin</FONT></TT>
as the default location):
<UL>
<LI><TT><FONT COLOR=#000000 FACE="Courier">perl5.002</FONT></TT>
and link <TT><FONT FACE="Courier">/usr/local/bin/perl</FONT></TT>
to it
<LI><TT><FONT FACE="Courier">suidperl</FONT></TT> if you requested
<TT><FONT FACE="Courier">setuid</FONT></TT> emulation
<LI><TT><FONT FACE="Courier">cppstdin,</FONT></TT> which is used
by <TT><FONT FACE="Courier">perl -P</FONT></TT> if your <TT><FONT FACE="Courier">cc
-E</FONT></TT> can't read from <TT><FONT FACE="Courier">stdin</FONT></TT>
<LI><TT><FONT FACE="Courier">c2ph</FONT></TT> and <TT><FONT FACE="Courier">pstruct</FONT></TT>
scripts, which are used for handling C structures in header files
<LI><TT><FONT FACE="Courier">a2p,</FONT></TT> which converts <TT><FONT FACE="Courier">awk</FONT></TT>
scripts to Perl
<LI><TT><FONT FACE="Courier">s2p,</FONT></TT> which converts <TT><FONT FACE="Courier">sed</FONT></TT>
scripts to Perl
<LI><TT><FONT FACE="Courier">find2perl,</FONT></TT> which converts
<TT><FONT FACE="Courier">find</FONT></TT> command options to the
Perl translator
<LI><TT><FONT FACE="Courier">h2xs</FONT></TT> and other header
files to Perl extensions
<LI><TT><FONT FACE="Courier">pod2html,</FONT></TT> which contains
Perl's <TT><FONT FACE="Courier">pod</FONT></TT> documentation
format to HTML
<LI><TT><FONT FACE="Courier">pod2latex,</FONT></TT> which contains
programs to convert documentation in the <TT><FONT FACE="Courier">pod</FONT></TT>
format to LaTeX
<LI><TT><FONT FACE="Courier">pod2man,</FONT></TT> which contains
programs to convert documentation in the <TT><FONT FACE="Courier">pod</FONT></TT>
format to <TT><FONT FACE="Courier">man</FONT></TT> pages
<LI><TT><FONT FACE="Courier">perldoc</FONT></TT>, a tool for reading
Perl's <TT><FONT FACE="Courier">pod</FONT></TT> documentation
</UL>
<P>
The library files go in <TT><FONT FACE="Courier">$privlib</FONT></TT>
and <TT><FONT FACE="Courier">$archlib</FONT></TT> as defined in
the <TT><FONT FACE="Courier">Configure.sh</FONT></TT> file. (This
is defaulted to <TT><FONT FACE="Courier">/usr/local/lib/perl5/</FONT></TT>.)
The Perl documentation pages go in <TT><FONT FACE="Courier">/usr/lib/perl5/pod/</FONT></TT>.
Perl's <TT><FONT FACE="Courier">*.h</FONT></TT> header files and
the <TT><FONT FACE="Courier">libperl.a</FONT></TT> library are
also installed under <TT><FONT FACE="Courier">$archlib</FONT></TT>
so that you may later build new extensions even if the Perl source
is no longer available. The <TT><FONT FACE="Courier">man</FONT></TT>
pages go in <BR>
<TT><FONT FACE="Courier">/usr/local/man/man1</FONT></TT> and <TT><FONT FACE="Courier">/usr/local/lib/perl5/man/man3</FONT></TT>.
<P>
After the installation is complete, you should see the message
<TT><FONT FACE="Courier">Installation complete</FONT></TT>, as
shown in Figure 24.5. If you do not see this message, you have
to run this script again to see what went wrong. Chances are that
either you do not have permission to write to the directories
you requested or that the directory in which you chose to install
Perl doesn't have the space, or both.
<P>
<A HREF="f24-5.gif" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/f24-5.gif" ><B>Figure 24.5 : </B><I>Installation and verification.</I></A>
<P>
This is optional. If you want to make the documentation available
in <TT><FONT FACE="Courier">man</FONT></TT>, HTML, or TeX format,
use the following commands for HTML files:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">cd pod; make html</FONT></TT>
</BLOCKQUOTE>
<P>
For the documentation in TeX format, from the Perl source directory
type the following command:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">cd pod; make tex</FONT></TT>
</BLOCKQUOTE>
<P>
<TT><FONT FACE="Courier">Man</FONT></TT> pages are available for
individual <TT><FONT FACE="Courier">pod</FONT></TT> files via
this command:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">pod2man myfile.pod | nroff -man | less</FONT></TT>
</BLOCKQUOTE>
<P>
Actually, if you're given a <TT><FONT FACE="Courier">.pod</FONT></TT>
file, running the <TT><FONT FACE="Courier">pod2html</FONT></TT>
command produces HTML files for you to peruse. I find that it's
easier to search and read these HTML files using a Web browser
than it is to mess around with TeX and <TT><FONT FACE="Courier">man</FONT></TT>
page files.
<H3><A NAME="ConfirmingtheInstallation"><B>Confirming the Installation</B></A>
</H3>
<P>
To confirm that you've indeed installed Perl on your machine,
type the <TT><FONT FACE="Courier">perl -v </FONT></TT>command.
You should see the output shown here:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">$ <B>which perl<BR>
</B>/usr/bin/perl<BR>
$ <B>perl -v<BR>
<BR>
</B>This is perl, version 5.002<BR>
<BR>
Copyright 1987-1996, Larry Wall<BR>
</FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">Perl may be copied only under the terms
of either the Artistic License or the GNU General Public License,
which may be found in the Perl 5.0 source kit.</FONT></TT>
</BLOCKQUOTE>
<H2><A NAME="TheDOSPlatform"><B><FONT SIZE=5 COLOR=#FF0000>The
DOS Platform</FONT></B></A></H2>
<P>
A beta version of Perl based on the Perl 5.000 version is available
in binary form only, from this site in Canada:
<BLOCKQUOTE>
<TT><FONT FACE="Courier"><A HREF="tppmsgs/msgs0.htm#42" tppabs="ftp://ftp.ee.umanitoba.ca/818726400/0-672/0-672-30891-6/://pub/msdos/perl/perl5">ftp://ftp.ee.umanitoba.ca://pub/msdos/perl/perl5</A>.</FONT></TT>
</BLOCKQUOTE>
<P>
The <TT><FONT FACE="Courier">perl5a.README</FONT></TT> file with
this version of Perl has a very ominous warning message with it.
The message reads verbatim:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">THIS VERSION MAY HAVE BUGS, AND HAS A
HIGHER THAN &quot;USUAL&quot; chAncE OF CORRUPTING</FONT></TT>
<TT><FONT FACE="Courier">YOUR DISK. BACK UP YOUR HARD DISK BEFORE
USING THIS VERSION.<BR>
</FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">REPEAT: BACK UP YOUR HARD DISK BEFORE
USING THIS VERSION!<BR>
</FONT></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><FONT FACE="Courier">-r--r--r--&nbsp;&nbsp;&nbsp;1 bin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1170891
Oct 28 09:37 perl5a1.zip<BR>
-r--r--r--&nbsp;&nbsp;&nbsp;1 bin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1198985
Oct 28 09:37 perl5a2.zip<BR>
-r--r--r--&nbsp;&nbsp;&nbsp;1 bin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;575899
Oct 28 09:37 perl5a3.zip<BR>
<BR>
This is, basically, a snapshot of my sources and executables,
and is intended for use by people who want a &quot;preview&quot;
of what I'm doing. It is not intended for production work, although
I imagine that some people may want to use it for that. You must
get all three .zip files. The sources and executables are all
mixed together with these files, and I have not yet made an attempt
at creating a minimal &quot;binaries + support files&quot; package.</FONT></TT>
</BLOCKQUOTE>
<P>
This was enough to warn me not to install them on my machine.
I'm still happy with <TT><FONT FACE="Courier">perl4</FONT></TT>
with DOS, thank you very much. If you're a hotshot, be my guest.
For more information about this port, please contact the author,
Darryl Okahata, at <TT><FONT FACE="Courier">darrylo@sr.hp.com</FONT></TT>.
The versions under development include those for DOS and Microsoft
windows. If you feel that you must work with Perl 5 features and
have to work under DOS, you're stuck. Perhaps you should consider
installing Windows 95 or NT on your machine and running the version
of Perl 5 for Windows NT. Please see <A HREF="ch9.htm" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/ch9.htm" >Chapter 9</A>,
&quot;Portability Issues with Windows and Perl.&quot;
<H2><A NAME="OtherPlatforms"><B><FONT SIZE=5 COLOR=#FF0000>Other
Platforms</FONT></B></A></H2>
<P>
Perl 5 is being ported to other platforms and is at various stages
of development. Some common platforms are listed here. You should
check out these locations. In general though, you'll find only
binary files and not the sources.
<P>
I found the following ports in various stages of development at
the FTP site <TT><FONT FACE="Courier">ftp.funet.fi</FONT></TT>:
<UL>
<LI>Amiga
<LI>Atari
<LI>Lynx OS
<LI>Macintosh
<LI><FONT COLOR=#000000>MS-DOS.</FONT>
<LI>MVS
<LI>NetWare
<LI>OS/2
<LI>QNX
<LI>Windows 3.11, 95, and NT
<LI>Xenix
</UL>
<P>
Check the directories in <TT><FONT FACE="Courier">/pub/languages/perl/CPAN/ports</FONT></TT>.
There may be other levels of subdirectories below these directories.
Some have documentation, some source only, and some complete packages.
For example, the <TT><FONT FACE="Courier">winNT</FONT></TT> subdirectory
has a <TT><FONT FACE="Courier">Perl 5.001m</FONT></TT> port in
<TT><FONT FACE="Courier">./winNT/perl5/perl5.001m</FONT></TT>,
whereas the <TT><FONT FACE="Courier">amiga</FONT></TT> directory
just has one file in it. As you can see, there is considerable
effort being put into porting this powerful language to other
platforms.<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
Please see <A HREF="ch9.htm" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/ch9.htm" >Chapter 9</A>, &quot;Portability Issues with Windows and Perl,&quot; for complete installation instructions and discussion of available features of Perl for Windows.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H2><A NAME="LinuxASpecialCaseforPerl5"><B><FONT SIZE=5 COLOR=#FF0000>Linux:
A Special Case for Perl 5</FONT></B></A></H2>
<P>
Notably missing from the previous list is the Linux operating
system. With the Linux operating system, you'll need the Executable
and Linking Format (ELF) binaries to use the dynamic loading features
in Perl. All major releases of the Linux kernel and libraries
will support the ELF format in the future. If you do not have
ELF binaries, you might be left behind. The motivation for going
to ELF is simple: The sheer size of static libraries makes it
very prohibitive to construct small applications anymore. Also,
the current <TT><FONT FACE="Courier">a.out</FONT></TT> format
for libraries does not permit the use of the dynamic loading function
<TT><FONT FACE="Courier">dlopen()</FONT></TT>. Using dynamic loading
is critical for the newer programs that are coming out for newer
UNIX and UNIX clone systems.
<P>
The way to tell whether you are already running ELF binaries is
to compile a short program and then run the <TT><FONT FACE="Courier">file</FONT></TT>
command on it. The ensuing output from the <TT><FONT FACE="Courier">file</FONT></TT>
command should be the following if you are running the ELF binaries:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">$ <B>file `which gcc`<BR>
</B>/usr/bin/gcc: ELF 32-bit LSB executable I386 (386 and up)
Version 1.</FONT></TT>
</BLOCKQUOTE>
<P>
Also, check the version numbers on your Linux kernel. Type the
following command to check to see what your version number is.
The non-ELF binaries will be located in the 1.2.13 version. Most
versions after 1.3.18 are ELF compatible:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">$ <B>file `which perl`<BR>
</B>/usr/bin/perl: ELF 32-bit LSB executable i386 (386 and up)
Version 1</FONT></TT>
</BLOCKQUOTE>
<P>
On ordering a Linux distribution and after going through the normal
installation process, I found that my system defaulted to 1.2.13
and no option on the installation screen allowed me the choice
to switch to an ELF system. Newer releases of Linux (March 1996
and later) give you options to install ELF binaries and source
files.
<P>
You can build the ELF kernel using the existing kernel and <TT><FONT FACE="Courier">gc</FONT></TT>
binaries. In order to build the binaries, you have to have the
following items:
<UL>
<LI><FONT COLOR=#000000>A binary ELF </FONT><TT><FONT FACE="Courier">gcc</FONT></TT>
compiler
<LI><FONT COLOR=#000000>The Linux source tree in a </FONT><TT><FONT FACE="Courier">tar</FONT></TT>
file
</UL>
<P>
The binary ELF compiler, <TT><FONT FACE="Courier">gcc</FONT></TT>,
is available from <TT><FONT FACE="Courier">sunsite.unc.edu</FONT></TT>.
The files are located in the Linux <TT><FONT FACE="Courier">/packages/Gcc</FONT></TT>
directory on most Internet sites. The latest version of the <TT><FONT FACE="Courier">gcc</FONT></TT>
compiler is 2.7.2. The binary files can be downloaded from the
Internet and unzipped in the root directory. (The <TT><FONT FACE="Courier">ELF-HOWTO</FONT></TT>
file is correct in this regard.) Just get the <TT><FONT FACE="Courier">gcc</FONT></TT>
binary files and read the instructions on how to unzip, untar,
and install the binary files.
<P>
To unbundle all the source files, you need the file <TT><FONT FACE="Courier">linux-1.3.<I>xx</I>.tar.gz</FONT></TT>.
The <TT><I><FONT FACE="Courier">xx</FONT></I></TT> in my case
is 20; however, by the time this book goes to print, a newer release
might be out. (It's probably in your best interest to get the
latest release from the Internet archives.) Next, go over to the
<TT><FONT FACE="Courier">/usr/src</FONT></TT> directory and, as
root, unzip and untar this source file you have just downloaded.
After untarring the files, your directories should look very close
to this:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">total 113<BR>
drwxr-xr-x&nbsp;&nbsp;&nbsp;6 root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1024
Feb 10 02:22 .<BR>
drwxr-xr-x&nbsp;&nbsp;18 root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1024
Feb 10 03:38 ..<BR>
-rw-r--r--&nbsp;&nbsp;&nbsp;1 root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;107229
Aug&nbsp;&nbsp;3&nbsp;&nbsp;1995 ftape-2.03b.tar.gz<BR>
drwxr-xr-x&nbsp;&nbsp;&nbsp;2 root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1024
Feb 10 02:11 ghostscript-2.6.2<BR>
lrwxrwxrwx&nbsp;&nbsp;&nbsp;1 root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;12
Feb 10 02:20 linux -&gt; linux-1.3.20<BR>
drwxr-xr-x&nbsp;&nbsp;14 root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1024
Feb 10 13:21 linux-1.3.20<BR>
drwxr-xr-x&nbsp;&nbsp;&nbsp;3 root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1024
Feb 10 02:23 sendmail<BR>
drwxr-xr-x&nbsp;&nbsp;&nbsp;6 root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;users&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2048
Feb 10 02:12 term-2.3.5</FONT></TT>
</BLOCKQUOTE>
<P>
Now confirm that your <TT><FONT FACE="Courier">gcc</FONT></TT>
is installed correctly. Type the following command to see whether
the version number is correct. The ensuing version from the following
command should be 2.7.0 or higher. If you downloaded the binaries
from <TT><FONT FACE="Courier">tsx-11.mit.edu</FONT></TT>, the
version will be 2.7.2:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">$ <B>gcc -v<BR>
</B>Reading specs from /usr/lib/gcc-lib/i486-linux/2.7.0/specs
<BR>
gcc version 2.7.0</FONT></TT>
</BLOCKQUOTE>
<P>
Now create the kernel using the following commands, in this order:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">cd /usr/src/linux<BR>
make depend<BR>
make config<BR>
make clean<BR>
make zlilo</FONT></TT>
</BLOCKQUOTE>
<P>
Depending on the type of pc you have, each command will take some
time-so be prepared to wait. After you have made the kernel, copy
it to the root. Then run setup to reinstall LILO and point to
this new kernel as the boot kernel. Next, reboot.
<P>
After rebooting, you can always use the version number check with
the <TT><FONT FACE="Courier">gcc -v</FONT></TT> command. Then
check version numbers in the <TT><FONT FACE="Courier">/lib</FONT></TT>
directory. The version numbers in your system may be higher, but
you should have at least the version numbers listed below for
the <TT><FONT FACE="Courier">libc</FONT></TT> and <TT><FONT FACE="Courier">libdl</FONT></TT>
files:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">-rwxr-xr-x&nbsp;&nbsp;&nbsp;2 24580 Feb
22 22:44 ld.so.1.7.14<BR>
lrwxrwxrwx&nbsp;&nbsp;&nbsp;1 13 Feb 10 02:15 libc.so.4 -&gt;
libc.so.4.7.2<BR>
<BR>
-rwxr-xr-x&nbsp;&nbsp;&nbsp;1 634880 Apr 29&nbsp;&nbsp;1995 libc.so.4.7.2
<BR>
-rwxr-xr-x&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;558615
Feb 22 22:46 libc.so.5<BR>
-rwxr-xr-x&nbsp;&nbsp;&nbsp;1 562683 May 18&nbsp;&nbsp;1995 libc.so.5.0.9
<BR>
-rwxr-xr-x&nbsp;&nbsp;&nbsp;2 558615 Feb 22 22:46 libc.so.5.2.18
<BR>
lrwxrwxrwx&nbsp;&nbsp;&nbsp;1 18 Feb 10 02:15 libcurses.so.0 -&gt;
libcurses.so.0.1.2<BR>
-rwxr-xr-x&nbsp;&nbsp;&nbsp;1 49152 Dec 13&nbsp;&nbsp;1994 libcurses.so.0.1.2
<BR>
lrwxrwxrwx&nbsp;&nbsp;&nbsp;1 18 Feb 10 02:09 libcurses.so.1 -&gt;
libcurses.so.1.0.0<BR>
-rwxr-xr-x&nbsp;&nbsp;&nbsp;1 52641 May 18&nbsp;&nbsp;1995 libcurses.so.1.0.0
<BR>
lrwxrwxrwx&nbsp;&nbsp;&nbsp;1 15 Feb 22 22:44 libdl.so -&gt; [icc]libdl.so.1.7.14
<BR>
lrwxrwxrwx&nbsp;&nbsp;&nbsp;1 15 Feb 22 22:44 libdl.so.1 -&gt;
libdl.so.1.7.14<BR>
-rwxr-xr-x&nbsp;&nbsp;&nbsp;1 6983 Feb 22 22:44 libdl.so.1.7.14
<BR>
-rwxr-xr-x&nbsp;&nbsp;&nbsp;1 6843 Aug 15&nbsp;&nbsp;1995 libdl.so.1.7.3
<BR>
lrwxrwxrwx&nbsp;&nbsp;&nbsp;1 14 Feb 10 02:15 libm.so.4 -&gt;
libm.so.4.6.27<BR>
-rwxr-xr-x&nbsp;&nbsp;&nbsp;1 110592 Dec 13&nbsp;&nbsp;1994 libm.so.4.6.27
<BR>
lrwxrwxrwx&nbsp;&nbsp;&nbsp;1 13 Feb 26 07:59 libm.so.5 -&gt;
libm.so.5.0.5<BR>
-rwxr-xr-x&nbsp;&nbsp;&nbsp;1 35942 May 18&nbsp;&nbsp;1995 libm.so.5.0.0
<BR>
-rwxr-xr-x&nbsp;&nbsp;&nbsp;1 34449 Feb 22 22:46 libm.so.5.0.5[
PARTIAL LIST ONLY]</FONT></TT>
</BLOCKQUOTE>
<P>
In this list, notice how the links are created from minor version
numbers, to version numbers, and then finally to the actual version
number. It's important to keep the <TT><FONT FACE="Courier">*.so</FONT></TT>
files present for those files that require the <TT><FONT FACE="Courier">.so</FONT></TT>
extension.
<P>
Also note the types of files now in the <TT><FONT FACE="Courier">/lib</FONT></TT>
directory. You'll notice both the ELF and <TT><FONT FACE="Courier">a.out</FONT></TT>
files in there. The ELF kernel is capable of loading both ELF
and <TT><FONT FACE="Courier">a.out</FONT></TT> shared libraries.
Actually, working with ELF binaries does make everything a bit
slower, but the advantage gained by loadable modules is worth
the loss in speed.
<P>
Once your system is up to ELF, run the <TT><FONT FACE="Courier">Configure</FONT></TT>
script for Perl. Make sure you answer yes to the question about
dynamic loading. Then, for the type of dynamic loading, select
the <TT><FONT FACE="Courier">dl_open</FONT></TT> option. The rest
of the questions are quite easy and should work with defaults.
The <TT><FONT FACE="Courier">Configure</FONT></TT> script will
even run the make file for you to create Perl. Run <TT><FONT FACE="Courier">make</FONT></TT>
from within <TT><FONT FACE="Courier">Configure</FONT></TT> when
prompted at the end of the script.
<P>
After the Perl files are built, run the <TT><FONT FACE="Courier">make
test</FONT></TT> command. There should be no errors once the dust
settles. If there are errors, your ELF distribution is not complete,
and you should look at the errors when creating the make file
and binaries in the <TT><FONT FACE="Courier">/usr/src/linux</FONT></TT>
tree. It will be a long night. A few files that will cause you
grief are the <TT><FONT FACE="Courier">GDBM*</FONT></TT> library
files. The sources for these files are in the <TT><FONT FACE="Courier">d</FONT></TT>
package set for Linux. Copy these source files to <TT><FONT FACE="Courier">/usr/src/linux</FONT></TT>.
Compile and install one file at a time until the errors disappear.
<P>
I actually have found that the Perl installation test has been
the most comprehensive test for checking my Linux ELF system to
see whether everything is there. Until someone comes up with a
better test, you may want to use this as your benchmark, too.
<H3><A NAME="PartialUpgradesofYourLinuxKernel"><B>Partial Upgrades
of Your Linux Kernel for Getting Perl Running</B></A></H3>
<P>
Linux source files are really not meant to be updated to ELF piece
by piece. The note in the file <TT><FONT FACE="Courier">UPGRADE.TXT</FONT></TT>
points to that. Here's what the note says:
<BLOCKQUOTE>
<TT><FONT FACE="Courier">24-Aug-95 NOTE: Trying to upgrade to
ELF Slackware from a.out Slackware will<BR>
undoubtedly cause you all kinds of problems. Don't do it.</FONT></TT>
</BLOCKQUOTE>
<P>
Believe this message. The details of doing a partial upgrade are
listed in the file <TT><FONT FACE="Courier">ELF-HOWTO</FONT></TT>.
However, the warning from the author of this note did hold. I
followed the instructions in the <TT><FONT FACE="Courier">HOWTO</FONT></TT>
file to the letter&#133;well, almost.
<P>
Even after getting the requisite binaries from the FTP sites listed
in the <TT><FONT FACE="Courier">HOWTO</FONT></TT> files, the programs
that were supposed to work, didn't. Either the binaries were incompatible
or I was missing files, or both. Modifying the <TT><FONT FACE="Courier">LDPATH</FONT></TT>
environment variable led to all sorts of problems.
<H3><A NAME="TheRealDangerDuringthePartialUpgra"><B>The Real Danger
During the Partial Upgrade</B></A></H3>
<P>
During this partial upgrade process, I accidentally deleted the
<TT><FONT FACE="Courier">/lib/ld.so</FONT></TT> file. This really
big error alone rendered my entire Linux system useless because
just about every command in the Linux <TT><FONT FACE="Courier">/bin</FONT></TT>
tree uses this <TT><FONT FACE="Courier">/lib/ld.so</FONT></TT>
file for execution. Not good.
<P>
The only way to recover from this was to perform the following
steps:
<OL>
<LI>Place a Linux floppy in drive A. (If you do not have a boot
disk, make one that works with your system and allows you to access
the CD-ROM drive on your machine.)
<LI>Do a hard reset.
<LI>Mount the hard drive from the <TT><FONT FACE="Courier">#</FONT></TT>
prompt.
<LI>Copy <TT><FONT FACE="Courier">ld.so*</FONT></TT> to the <TT><FONT FACE="Courier">/lib</FONT></TT>
directory from the <TT><FONT FACE="Courier">/live/lib</FONT></TT>
directory on your Linux CD-ROM.
<LI>Do a hard reset after the copy is over. Do not do a <TT><FONT FACE="Courier">shutdown</FONT></TT>
command.
<LI>Remove the floppy disk during the reset process.
</OL>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Caution</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
This is important enough to remember:<BR>
Do not remove the <TT><FONT FACE="Courier">/lib/ld.so</FONT></TT> file. Ever.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<H2><A NAME="Summary"><B><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></B></A>
</H2>
<P>
This chapter walked you through the installation steps for getting
Perl on your system. Hopefully, things went smoothly and you did
not have to resort to editing script files. However, in this chapter
you should have gleaned enough information to be able to fix anything
that is broken.
<P>
<HR WIDTH="100%"></P>

<CENTER><P><A HREF="ch23.htm" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/ch23.htm"><IMG SRC="pc.gif" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="#CONTENTS"><IMG SRC="cc.gif" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="index.htm" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/index.htm"><IMG SRC="hb.gif" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="ch25.htm" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/ch25.htm"><IMG 
SRC="nc.gif" tppabs="http://www.mcp.com/818726400/0-672/0-672-30891-6/nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A></P></CENTER>

<P>
<HR WIDTH="100%"></P>

</BODY>
</HTML>
