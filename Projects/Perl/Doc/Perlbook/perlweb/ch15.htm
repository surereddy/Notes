<HTML>

<HEAD>

<TITLE>Chapter 15 -- Function List</TITLE>



<META>

</HEAD>

<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">

<H1><FONT SIZE=6 COLOR=#FF0000>Chapter&nbsp;15</FONT></H1>

<H1><FONT SIZE=6 COLOR=#FF0000>Function List</FONT></H1>

<HR>

<P>

<CENTER><B><FONT SIZE=5><A NAME="CONTENTS">CONTENTS</A></FONT></B></CENTER>

<P>

<CENTER>

<TABLE>

<TR VALIGN=TOP><TD WIDTH=25%>

<UL>

<LI><A HREF="#A">-A</A>

<UL>

<LI><A HREF="#Compliance1">Compliance</A>

<LI><A HREF="#Syntax1">Syntax</A>

<LI><A HREF="#Definition1">Definition</A>

<LI><A HREF="#Example1">Example</A>

</UL>

<LI><A HREF="#B">-B</A>

<UL>

<LI><A HREF="#Compliance2">Compliance</A>

<LI><A HREF="#Syntax2">Syntax</A>

<LI><A HREF="#Definition2">Definition</A>

<LI><A HREF="#Example2">Example</A>

</UL>

<LI><A HREF="#b">-b</A>

<UL>

<LI><A HREF="#Compliance3">Compliance</A>

<LI><A HREF="#Syntax3">Syntax</A>

<LI><A HREF="#Definition3">Definition</A>

<LI><A HREF="#Example3">Example</A>

</UL>

<LI><A HREF="#C">-C</A>

<UL>

<LI><A HREF="#Compliance4">Compliance</A>

<LI><A HREF="#Syntax4">Syntax</A>

<LI><A HREF="#Definitio4">Definition</A>

<LI><A HREF="#Example4">Example</A>

</UL>

<LI><A HREF="#c">-c</A>

<UL>

<LI><A HREF="#Compliance5">Compliance</A>

<LI><A HREF="#Syntax5">Syntax</A>

<LI><A HREF="#Definition5">Definition</A>

<LI><A HREF="#Example5">Example</A>

</UL>

<LI><A HREF="#d">-d</A>

<UL>

<LI><A HREF="#Compliance6">Compliance</A>

<LI><A HREF="#Syntax6">Syntax</A>

<LI><A HREF="#Definition6">Definition</A>

<LI><A HREF="#Example6">Example</A>

</UL>

<LI><A HREF="#e">-e</A>

<UL>

<LI><A HREF="#Compliance7">Compliance</A>

<LI><A HREF="#Syntax7">Syntax</A>

<LI><A HREF="#Definition7">Definition</A>

<LI><A HREF="#Example7">Example</A>

</UL>

<LI><A HREF="#f">-f</A>

<UL>

<LI><A HREF="#Compliance8">Compliance</A>

<LI><A HREF="#Syntax8">Syntax</A>

<LI><A HREF="#Definition8">Definition</A>

<LI><A HREF="#Example8">Example</A>

</UL>

<LI><A HREF="#g">-g</A>

<UL>

<LI><A HREF="#Compliance9">Compliance</A>

<LI><A HREF="#Syntax9">Syntax</A>

<LI><A HREF="#Definition9">Definition</A>

<LI><A HREF="#Example9">Example</A>

</UL>

<LI><A HREF="#k">-k</A>

<UL>

<LI><A HREF="#Compliance10">Compliance</A>

<LI><A HREF="#Syntax10">Syntax</A>

<LI><A HREF="#Definition10">Definition</A>

<LI><A HREF="#Example10">Example</A>

</UL>

<LI><A HREF="#l">-l</A>

<UL>

<LI><A HREF="#Compliance11">Compliance</A>

<LI><A HREF="#Syntax11">Syntax</A>

<LI><A HREF="#Definition11">Definition</A>

<LI><A HREF="#Example11">Example</A>

</UL>

<LI><A HREF="#M">-M</A>

<UL>

<LI><A HREF="#Compliance12">Compliance</A>

<LI><A HREF="#Syntax12">Syntax</A>

<LI><A HREF="#Definition12">Definition</A>

<LI><A HREF="#Example12">Example</A>

</UL>

<LI><A HREF="#O">-O</A>

<UL>

<LI><A HREF="#Compliance13">Compliance</A>

<LI><A HREF="#Syntax13">Syntax</A>

<LI><A HREF="#Definition13">Definition</A>

<LI><A HREF="#Example13">Example</A>

</UL>

<LI><A HREF="#o">-o</A>

<UL>

<LI><A HREF="#Compliance14">Compliance</A>

<LI><A HREF="#Syntax14">Syntax</A>

<LI><A HREF="#Definition14">Definition</A>

<LI><A HREF="#Example14">Example</A>

</UL>

<LI><A HREF="#p">-p</A>

<UL>

<LI><A HREF="#Compliance15">Compliance</A>

<LI><A HREF="#Syntax15">Syntax</A>

<LI><A HREF="#Definition15">Definition</A>

<LI><A HREF="#Example15">Example</A>

</UL>

<LI><A HREF="#R">-R</A>

<UL>

<LI><A HREF="#Compliance16">Compliance</A>

<LI><A HREF="#Syntax16">Syntax</A>

<LI><A HREF="#Definition16">Definition</A>

<LI><A HREF="#Example16">Example</A>

</UL>

<LI><A HREF="#r">-r</A>

<UL>

<LI><A HREF="#Compliance17">Compliance</A>

<LI><A HREF="#Syntax17">Syntax</A>

<LI><A HREF="#Definition17">Definition</A>

<LI><A HREF="#Example17">Example</A>

</UL>

<LI><A HREF="#S">-S</A>

<UL>

<LI><A HREF="#Compliance18">Compliance</A>

<LI><A HREF="#Syntax18">Syntax</A>

<LI><A HREF="#Definition18">Definition</A>

<LI><A HREF="#Example18">Example</A>

</UL>

<LI><A HREF="#s1">-s</A>

<UL>

<LI><A HREF="#Compliance19">Compliance</A>

<LI><A HREF="#Syntax19">Syntax</A>

<LI><A HREF="#Definition19">Definition</A>

<LI><A HREF="#Example19">Example</A>

</UL>

<LI><A HREF="#T">-T</A>

<UL>

<LI><A HREF="#Compliance20">Compliance</A>

<LI><A HREF="#Syntax20">Syntax</A>

<LI><A HREF="#Definition20">Definition</A>

<LI><A HREF="#Example20">Example</A>

</UL>

<LI><A HREF="#t">-t</A>

<UL>

<LI><A HREF="#Compliance21">Compliance</A>

<LI><A HREF="#Syntax21">Syntax</A>

<LI><A HREF="#Definition21">Definition</A>

<LI><A HREF="#Example21">Example</A>

</UL>

<LI><A HREF="#u">-u</A>

<UL>

<LI><A HREF="#Compliance22">Compliance</A>

<LI><A HREF="#Syntax22">Syntax</A>

<LI><A HREF="#Definition22">Definition</A>

<LI><A HREF="#Example22">Example</A>

</UL>

<LI><A HREF="#W">-W</A>

<UL>

<LI><A HREF="#Compliance23">Compliance</A>

<LI><A HREF="#Syntax23">Syntax</A>

<LI><A HREF="#Definition23">Definition</A>

<LI><A HREF="#Example23">Example</A>

</UL>

<LI><A HREF="#w">-w</A>

<UL>

<LI><A HREF="#Compliance24">Compliance</A>

<LI><A HREF="#Syntax24">Syntax</A>

<LI><A HREF="#Definition24">Definition</A>

<LI><A HREF="#Example24">Example</A>

</UL>

<LI><A HREF="#X">-X</A>

<UL>

<LI><A HREF="#Compliance25">Compliance</A>

<LI><A HREF="#Syntax25">Syntax</A>

<LI><A HREF="#Definition25">Definition</A>

<LI><A HREF="#Example25">Example</A>

</UL>

<LI><A HREF="#x">-x</A>

<UL>

<LI><A HREF="#Compliance26">Compliance</A>

<LI><A HREF="#Syntax26">Syntax</A>

<LI><A HREF="#Definition26">Definition</A>

<LI><A HREF="#Example26">Example</A>

</UL>

<LI><A HREF="#z">-z</A>

<UL>

<LI><A HREF="#Compliance27">Compliance</A>

<LI><A HREF="#Syntax27">Syntax</A>

<LI><A HREF="#Definition27">Definition</A>

<LI><A HREF="#Example27">Example</A>

</UL>

<LI><A HREF="#abs">abs</A>

<UL>

<LI><A HREF="#Compliance28">Compliance</A>

<LI><A HREF="#Syntax28">Syntax</A>

<LI><A HREF="#Definition28">Definition</A>

<LI><A HREF="#Example28">Example</A>

</UL>

<LI><A HREF="#accept">accept</A>

<UL>

<LI><A HREF="#Compliance29">Compliance</A>

<LI><A HREF="#Syntax29">Syntax</A>

<LI><A HREF="#Definition29">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#alarm">alarm</A>

<UL>

<LI><A HREF="#Compliance30">Compliance</A>

<LI><A HREF="#Syntax30">Syntax</A>

<LI><A HREF="#Definition30">Definition</A>

<LI><A HREF="#Example29">Example</A>

</UL>

<LI><A HREF="#atan">atan2</A>

<UL>

<LI><A HREF="#Compliance31">Compliance</A>

<LI><A HREF="#Syntax31">Syntax</A>

<LI><A HREF="#Definition31">Definition</A>

<LI><A HREF="#Example30">Example</A>

</UL>

<LI><A HREF="#bind">bind</A>

<UL>

<LI><A HREF="#Compliance32">Compliance</A>

<LI><A HREF="#Syntax32">Syntax</A>

<LI><A HREF="#Definition32">Definition</A>

<BR>&nbsp;</UL>

<LI><A HREF="#binmode">binmode</A>

<UL>

<LI><A HREF="#Compliance33">Compliance</A>

<LI><A HREF="#Syntax33">Syntax</A>

<LI><A HREF="#Definition33">Definition</A>

<LI><A HREF="#Example31">Example</A>

</UL>

<LI><A HREF="#bless">bless</A>

<UL>

<LI><A HREF="#Compliance34">Compliance</A>

<LI><A HREF="#Syntax34">Syntax</A>

<LI><A HREF="#Definition34">Definition</A>

<LI><A HREF="#Example32">Example</A>

</UL>

<LI><A HREF="#caller">caller</A>

<UL>

<LI><A HREF="#Compliance35">Compliance</A>

<LI><A HREF="#Syntax35">Syntax</A>

<LI><A HREF="#Definition35">Definition</A>

<LI><A HREF="#Example33">Example</A>

</UL>

<LI><A HREF="#chdir">chdir</A>

<UL>

<LI><A HREF="#Compliance36">Compliance</A>

<LI><A HREF="#Syntax36">Syntax</A>

<LI><A HREF="#Definition36">Definition</A>

<LI><A HREF="#Example34">Example</A>

</UL>

<LI><A HREF="#chmod">chmod</A>

<UL>

<LI><A HREF="#Compliance37">Compliance</A>

<LI><A HREF="#Syntax37">Syntax</A>

<LI><A HREF="#Definition37">Definition</A>

<LI><A HREF="#Example35">Example</A>

</UL>

<LI><A HREF="#chomp">chomp</A>

<UL>

<LI><A HREF="#Compliance38">Compliance</A>

<LI><A HREF="#Syntax38">Syntax</A>

<LI><A HREF="#Definition38">Definition</A>

<LI><A HREF="#Example36">Example</A>

</UL>

<LI><A HREF="#chop">chop</A>

<UL>

<LI><A HREF="#Compliance39">Compliance</A>

<LI><A HREF="#Syntax39">Syntax</A>

<LI><A HREF="#Definition39">Definition</A>

<LI><A HREF="#Example37">Example</A>

</UL>

<LI><A HREF="#chown">chown</A>

<UL>

<LI><A HREF="#Compliance40">Compliance</A>

<LI><A HREF="#Syntax40">Syntax</A>

<LI><A HREF="#Definition40">Definition</A>

<LI><A HREF="#Example38">Example</A>

</UL>

<LI><A HREF="#chr">chr</A>

<UL>

<LI><A HREF="#Compliance41">Compliance</A>

<LI><A HREF="#Syntax41">Syntax</A>

<LI><A HREF="#Definition41">Definition</A>

<LI><A HREF="#Example39">Example</A>

</UL>

<LI><A HREF="#chroot">chroot</A>

<UL>

<LI><A HREF="#Compliance42">Compliance</A>

<LI><A HREF="#Syntax42">Syntax</A>

<LI><A HREF="#Definition42">Definition</A>

<LI><A HREF="#Example40">Example</A>

</UL>

<LI><A HREF="#close">close</A>

<UL>

<LI><A HREF="#Compliance43">Compliance</A>

<LI><A HREF="#Syntax43">Syntax</A>

<LI><A HREF="#Definition43">Definition</A>

<LI><A HREF="#Example41">Example</A>

</UL>

<LI><A HREF="#closedir">closedir</A>

<UL>

<LI><A HREF="#Compliance44">Compliance</A>

<LI><A HREF="#Syntax44">Syntax</A>

<LI><A HREF="#Definition44">Definition</A>

<LI><A HREF="#Example42">Example</A>

</UL>

<LI><A HREF="#connect">connect</A>

<UL>

<LI><A HREF="#Compliance45">Compliance</A>

<LI><A HREF="#Syntax45">Syntax</A>

<LI><A HREF="#Definition45">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#continue">continue</A>

<UL>

<LI><A HREF="#Compliance46">Compliance</A>

<LI><A HREF="#Syntax46">Syntax</A>

<LI><A HREF="#Definition46">Definition</A>

<LI><A HREF="#Example43">Example</A>

</UL>

<LI><A HREF="#cos">cos</A>

<UL>

<LI><A HREF="#Compliance47">Compliance</A>

<LI><A HREF="#Syntax47">Syntax</A>

<LI><A HREF="#Definition47">Definition</A>

<LI><A HREF="#Example44">Example</A>

</UL>

<LI><A HREF="#crypt">crypt</A>

<UL>

<LI><A HREF="#Compliance48">Compliance</A>

<LI><A HREF="#Syntax48">Syntax</A>

<LI><A HREF="#Definition48">Definition</A>

<LI><A HREF="#Example45">Example</A>

</UL>

<LI><A HREF="#dbmclose">dbmclose</A>

<UL>

<LI><A HREF="#Compliance49">Compliance</A>

<LI><A HREF="#Syntax49">Syntax</A>

<LI><A HREF="#Definition49">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#dbmopen">dbmopen</A>

<UL>

<LI><A HREF="#Compliance50">Compliance</A>

<LI><A HREF="#Syntax50">Syntax</A>

<LI><A HREF="#Definition50">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#defined">defined</A>

<UL>

<LI><A HREF="#Compliance51">Compliance</A>

<LI><A HREF="#Syntax51">Syntax</A>

<LI><A HREF="#Definition51">Definition</A>

<LI><A HREF="#Example46">Example</A>

</UL>

<LI><A HREF="#delete">delete</A>

<UL>

<LI><A HREF="#Compliance52">Compliance</A>

<LI><A HREF="#Syntax52">Syntax</A>

<LI><A HREF="#Definition52">Definition</A>

<LI><A HREF="#Example47">Example</A>

</UL>

<LI><A HREF="#die">die</A>

<UL>

<LI><A HREF="#Compliance53">Compliance</A>

<LI><A HREF="#Syntax53">Syntax</A>

<LI><A HREF="#Definition53">Definition</A>

<LI><A HREF="#Example48">Example</A>

</UL>

 <LI><A HREF="#do">do</A>

<UL>

<LI><A HREF="#Compliance54">Compliance</A>

<LI><A HREF="#Syntax54">Syntax</A>

<LI><A HREF="#Definition54">Definition</A>

<LI><A HREF="#Example49">Example</A>

 </UL>

<LI><A HREF="#dump">dump</A>

<UL>

<LI><A HREF="#Compliance55">Compliance</A>

<LI><A HREF="#Syntax55">Syntax</A>

<LI><A HREF="#Definition55">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#each">each</A>

<UL>

<LI><A HREF="#Compliance56">Compliance</A>

<LI><A HREF="#Syntax56">Syntax</A>

<LI><A HREF="#Definition56">Definition</A>

<LI><A HREF="#Example50">Example</A>

</UL>

<LI><A HREF="#endgrent">endgrent</A>

<UL>

<LI><A HREF="#Compliance57">Compliance</A>

<LI><A HREF="#Syntax57">Syntax</A>

<LI><A HREF="#Definition57">Definition</A>

<LI><A HREF="#Example51">Example</A>

</UL>

<LI><A HREF="#endhostent">endhostent</A>

<UL>

<LI><A HREF="#Compliance58">Compliance</A>

<LI><A HREF="#Syntax58">Syntax</A>

<LI><A HREF="#Definition58">Definition</A>

<LI><A HREF="#Example52">Example</A>

</UL>

<LI><A HREF="#endnetent">endnetent</A>

<UL>

<LI><A HREF="#Compliance59">Compliance</A>

<LI><A HREF="#Syntax59">Syntax</A>

<LI><A HREF="#Definition59">Definition</A>

<LI><A HREF="#Example53">Example</A>

</UL>

</UL>

</TD>





<TD WIDTH=25%>



<UL>

<LI><A HREF="#endprotoent">endprotoent</A>

<UL>

<LI><A HREF="#Compliance60">Compliance</A>

<LI><A HREF="#Syntax60">Syntax</A>

<LI><A HREF="#Definition60">Definition</A>

<LI><A HREF="#Example54">Example</A>

</UL>

<LI><A HREF="#endpwent">endpwent</A>

<UL>

<LI><A HREF="#Compliance61">Compliance</A>

<LI><A HREF="#Syntax61">Syntax</A>

<LI><A HREF="#Definition61">Definition</A>

<LI><A HREF="#Example55">Example</A>

</UL>

<LI><A HREF="#endservent">endservent</A>

<UL>

<LI><A HREF="#Compliance62">Compliance</A>

<LI><A HREF="#Syntax62">Syntax</A>

<LI><A HREF="#Definition62">Definition</A>

<LI><A HREF="#Example56">Example</A>

</UL>

<LI><A HREF="#eof">eof</A>

<UL>

<LI><A HREF="#Compliance63">Compliance</A>

<LI><A HREF="#Syntax63">Syntax</A>

<LI><A HREF="#Definition63">Definition</A>

<LI><A HREF="#Example57">Example</A>

</UL>

<LI><A HREF="#eval">eval</A>

<UL>

<LI><A HREF="#Compliance64">Compliance</A>

<LI><A HREF="#Syntax64">Syntax</A>

<LI><A HREF="#Definition64">Definition</A>

<LI><A HREF="#Example58">Example</A>

</UL>

<LI><A HREF="#exec">exec</A>

<UL>

<LI><A HREF="#Compliance65">Compliance</A>

<LI><A HREF="#Syntax65">Syntax</A>

<LI><A HREF="#Definition65">Definition</A>

<LI><A HREF="#Example59">Example</A>

</UL>

<LI><A HREF="#exists">exists</A>

<UL>

<LI><A HREF="#Compliance66">Compliance</A>

<LI><A HREF="#Syntax66">Syntax</A>

<LI><A HREF="#Definition66">Definition</A>

<LI><A HREF="#Example60">Example</A>

</UL>

<LI><A HREF="#exit">exit</A>

<UL>

<LI><A HREF="#Compliance67">Compliance</A>

<LI><A HREF="#Syntax67">Syntax</A>

<LI><A HREF="#Definition67">Definition</A>

<LI><A HREF="#Example61">Example</A>

</UL>

<LI><A HREF="#exp">exp</A>

<UL>

<LI><A HREF="#Compliance68">Compliance</A>

<LI><A HREF="#Syntax68">Syntax</A>

<LI><A HREF="#Definition68">Definition</A>

<LI><A HREF="#Example62">Example</A>

</UL>

<LI><A HREF="#fcntl">fcntl</A>

<UL>

<LI><A HREF="#Compliance69">Compliance</A>

<LI><A HREF="#Syntax69">Syntax</A>

<LI><A HREF="#Definition69">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#fileno">fileno</A>

<UL>

<LI><A HREF="#Compliance70">Compliance</A>

<LI><A HREF="#Syntax70">Syntax</A>

<LI><A HREF="#Definition70">Definition</A>

<LI><A HREF="#Example63">Example</A>

</UL>

<LI><A HREF="#flock">flock</A>

<UL>

<LI><A HREF="#Compliance71">Compliance</A>

<LI><A HREF="#Syntax71">Syntax</A>

<LI><A HREF="#Definition71">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#fork">fork</A>

<UL>

<LI><A HREF="#Compliance72">Compliance</A>

<LI><A HREF="#Syntax72">Syntax</A>

<LI><A HREF="#Definition72">Definition</A>

<LI><A HREF="#Example64">Example</A>

</UL>

<LI><A HREF="#format">format</A>

<UL>

<LI><A HREF="#Compliance73">Compliance</A>

<LI><A HREF="#Syntax73">Syntax</A>

<LI><A HREF="#Definition73">Definition</A>

<LI><A HREF="#Example65">Example</A>

</UL>

<LI><A HREF="#formline">formline</A>

<UL>

<LI><A HREF="#Compliance74">Compliance</A>

<LI><A HREF="#Syntax74">Syntax</A>

<LI><A HREF="#Definition74">Definition</A>

<LI><A HREF="#Example66">Example</A>

</UL>

<LI><A HREF="#getc">getc</A>

<UL>

<LI><A HREF="#Compliance75">Compliance</A>

<LI><A HREF="#Syntax75">Syntax</A>

<LI><A HREF="#Definition75">Definition</A>

<LI><A HREF="#Example67">Example</A>

</UL>

<LI><A HREF="#getgrent">getgrent</A>

<UL>

<LI><A HREF="#Compliance76">Compliance</A>

<LI><A HREF="#Syntax76">Syntax</A>

<LI><A HREF="#Definition76">Definition</A>

<LI><A HREF="#Example68">Example</A>

</UL>

<LI><A HREF="#getgrgid">getgrgid</A>

<UL>

<LI><A HREF="#Compliance77">Compliance</A>

<LI><A HREF="#Syntax77">Syntax</A>

<LI><A HREF="#Definition77">Definition</A>

<LI><A HREF="#Example69">Example</A>

</UL>

<LI><A HREF="#getgrname">getgrname</A>

<UL>

<LI><A HREF="#Compliance78">Compliance</A>

<LI><A HREF="#Syntax78">Syntax</A>

<LI><A HREF="#Definition78">Definition</A>

<LI><A HREF="#Example70">Example</A>

</UL>

<LI><A HREF="#gethostbyaddr">gethostbyaddr</A>

<UL>

<LI><A HREF="#Compliance79">Compliance</A>

<LI><A HREF="#Syntax79">Syntax</A>

<LI><A HREF="#Definition79">Definition</A>

<LI><A HREF="#ExamplePerlonly">Example(Perl5 only)</A>

</UL>

<LI><A HREF="#gethostbyname">gethostbyname</A>

<UL>

<LI><A HREF="#Compliance80">Compliance</A>

<LI><A HREF="#Syntax80">Syntax</A>

<LI><A HREF="#Definition80">Definition</A>

<LI><A HREF="#Example71">Example</A>

</UL>

<LI><A HREF="#gethostent">gethostent</A>

<UL>

<LI><A HREF="#Compliance81">Compliance</A>

<LI><A HREF="#Syntax81">Syntax</A>

<LI><A HREF="#Definition81">Definition</A>

<LI><A HREF="#Example72">Example</A>

</UL>

<LI><A HREF="#getlogin">getlogin</A>

<UL>

<LI><A HREF="#Compliance82">Compliance</A>

<LI><A HREF="#Syntax82">Syntax</A>

<LI><A HREF="#Definition82">Definition</A>

<LI><A HREF="#Example73">Example</A>

</UL>

<LI><A HREF="#getnetbyaddr">getnetbyaddr</A>

<UL>

<LI><A HREF="#Compliance83">Compliance</A>

<LI><A HREF="#Syntax83">Syntax</A>

<LI><A HREF="#Definition83">Definition</A>

<LI><A HREF="#Example74">Example</A>

</UL>

<LI><A HREF="#getnetbyname">getnetbyname</A>

<UL>

<LI><A HREF="#Compliance84">Compliance</A>

<LI><A HREF="#Syntax84">Syntax</A>

<LI><A HREF="#Definition84">Definition</A>

<LI><A HREF="#Example75">Example</A>

</UL>

<LI><A HREF="#getnetent">getnetent</A>

<UL>

<LI><A HREF="#Compliance85">Compliance</A>

<LI><A HREF="#Syntax85">Syntax</A>

<LI><A HREF="#Definition85">Definition</A>

<LI><A HREF="#Example76">Example</A>

</UL>

<LI><A HREF="#getpeername">getpeername</A>

<UL>

<LI><A HREF="#Compliance86">Compliance</A>

<LI><A HREF="#Syntax86">Syntax</A>

<LI><A HREF="#Definition86">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#getpgrp">getpgrp</A>

<UL>

<LI><A HREF="#Compliance87">Compliance</A>

<LI><A HREF="#Syntax87">Syntax</A>

<LI><A HREF="#Definition87">Definition</A>

<LI><A HREF="#Example77">Example</A>

</UL>

<LI><A HREF="#getppid">getppid</A>

<UL>

<LI><A HREF="#Compliance88">Compliance</A>

<LI><A HREF="#Syntax88">Syntax</A>

<LI><A HREF="#Definition88">Definition</A>

<LI><A HREF="#Example78">Example</A>

</UL>

<LI><A HREF="#getpriority">getpriority</A>

<UL>

<LI><A HREF="#Compliance89">Compliance</A>

<LI><A HREF="#Syntax89">Syntax</A>

<LI><A HREF="#Definition89">Definition</A>

<LI><A HREF="#Example79">Example</A>

</UL>

<LI><A HREF="#getprotobyname">getprotobyname</A>

<UL>

<LI><A HREF="#Compliance90">Compliance</A>

<LI><A HREF="#Syntax90">Syntax</A>

<LI><A HREF="#Definition90">Definition</A>

<LI><A HREF="#Example80">Example</A>

</UL>

<LI><A HREF="#getprotobynumber">getprotobynumber</A>

<UL>

<LI><A HREF="#Compliance91">Compliance</A>

<LI><A HREF="#Syntax91">Syntax</A>

<LI><A HREF="#Definition91">Definition</A>

<LI><A HREF="#Example81">Example</A>

</UL>

<LI><A HREF="#getprotoent">getprotoent</A>

<UL>

<LI><A HREF="#Compliance92">Compliance</A>

<LI><A HREF="#Syntax92">Syntax</A>

<LI><A HREF="#Definition92">Definition</A>

<LI><A HREF="#Example82">Example</A>

</UL>

<LI><A HREF="#getpwent">getpwent</A>

<UL>

<LI><A HREF="#Compliance93">Compliance</A>

<LI><A HREF="#Syntax93">Syntax</A>

<LI><A HREF="#Definition93">Definition</A>

<LI><A HREF="#Example83">Example</A>

</UL>

<LI><A HREF="#getpwnam">getpwnam</A>

<UL>

<LI><A HREF="#Compliance94">Compliance</A>

<LI><A HREF="#Syntax94">Syntax</A>

<LI><A HREF="#Definition94">Definition</A>

<LI><A HREF="#Example84">Example</A>

</UL>

<LI><A HREF="#getpwuid">getpwuid</A>

<UL>

<LI><A HREF="#Compliance95">Compliance</A>

<LI><A HREF="#Syntax95">Syntax</A>

<LI><A HREF="#Definition95">Definition</A>

<LI><A HREF="#Example85">Example</A>

</UL>

<LI><A HREF="#getservbyname">getservbyname</A>

<UL>

<LI><A HREF="#Compliance96">Compliance</A>

<LI><A HREF="#Syntax96">Syntax</A>

<LI><A HREF="#Definition96">Definition</A>

<LI><A HREF="#Example86">Example</A>

</UL>

<LI><A HREF="#getservbyport">getservbyport</A>

<UL>

<LI><A HREF="#Compliance97">Compliance</A>

<LI><A HREF="#Syntax97">Syntax</A>

<LI><A HREF="#Definition97">Definition</A>

<LI><A HREF="#Example87">Example</A>

</UL>

<LI><A HREF="#getservent">getservent</A>

<UL>

<LI><A HREF="#Compliance98">Compliance</A>

<LI><A HREF="#Syntax98">Syntax</A>

<LI><A HREF="#Definition98">Definition</A>

<LI><A HREF="#Example88">Example</A>

</UL>

<LI><A HREF="#getsockname">getsockname</A>

<UL>

<LI><A HREF="#Compliance99">Compliance</A>

<LI><A HREF="#Syntax99">Syntax</A>

<LI><A HREF="#Definition99">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#getsockopt">getsockopt</A>

<UL>

<LI><A HREF="#Compliance100">Compliance</A>

<LI><A HREF="#Syntax100">Syntax</A>

<LI><A HREF="#Definition100">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#glob">glob</A>

<UL>

<LI><A HREF="#Compliance101">Compliance</A>

<LI><A HREF="#Syntax101">Syntax</A>

<LI><A HREF="#Definition101">Definition</A>

<LI><A HREF="#Example89">Example</A>

</UL>

<LI><A HREF="#gmtime">gmtime</A>

<UL>

<LI><A HREF="#Compliance102">Compliance</A>

<LI><A HREF="#Syntax102">Syntax</A>

<LI><A HREF="#Definition102">Definition</A>

<LI><A HREF="#Example90">Example</A>

</UL>

<LI><A HREF="#goto">goto</A>

<UL>

<LI><A HREF="#Compliance103">Compliance</A>

<LI><A HREF="#Syntax103">Syntax</A>

<LI><A HREF="#Definition103">Definition</A>

<LI><A HREF="#Example91">Example</A>

</UL>

<LI><A HREF="#grep">grep</A>

<UL>

<LI><A HREF="#Compliance104">Compliance</A>

<LI><A HREF="#Syntax104">Syntax</A>

<LI><A HREF="#Definition104">Definition</A>

<LI><A HREF="#Example92">Example</A>

</UL>

<LI><A HREF="#hex">hex</A>

<UL>

<LI><A HREF="#Compliance105">Compliance</A>

<LI><A HREF="#Syntax105">Syntax</A>

<LI><A HREF="#Definition105">Definition</A>

<LI><A HREF="#Example93">Example</A>

</UL>

<LI><A HREF="#import">import</A>

<UL>

<LI><A HREF="#Compliance106">Compliance</A>

<LI><A HREF="#Syntax106">Syntax</A>

<LI><A HREF="#Definition106">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#index">index</A>

<UL>

<LI><A HREF="#Compliance107">Compliance</A>

<LI><A HREF="#Syntax107">Syntax</A>

<LI><A HREF="#Definition107">Definition</A>

<LI><A HREF="#Example94">Example</A>

</UL>

<LI><A HREF="#int">int</A>

<UL>

<LI><A HREF="#Compliance108">Compliance</A>

<LI><A HREF="#Syntax108">Syntax</A>

<LI><A HREF="#Definition108">Definition</A>

<LI><A HREF="#Example95">Example</A>

</UL>

<LI><A HREF="#ioctl">ioctl</A>

<UL>

<LI><A HREF="#Compliance109">Compliance</A>

<LI><A HREF="#Syntax109">Syntax</A>

<LI><A HREF="#Definition109">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#join">join</A>

<UL>

<LI><A HREF="#Compliance110">Compliance</A>

<LI><A HREF="#Syntax110">Syntax</A>

<LI><A HREF="#Definition110">Definition</A>

<LI><A HREF="#Example96">Example</A>

</UL>

<LI><A HREF="#keys">keys</A>

<UL>

<LI><A HREF="#Compliance111">Compliance</A>

<LI><A HREF="#Syntax111">Syntax</A>

<LI><A HREF="#Definition111">Definition</A>

<LI><A HREF="#Example97">Example</A>

</UL>

<LI><A HREF="#kill">kill</A>

<UL>

<LI><A HREF="#Compliance112">Compliance</A>

<LI><A HREF="#Syntax112">Syntax</A>

<LI><A HREF="#Definition112">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#last">last</A>

<UL>

<LI><A HREF="#Compliance113">Compliance</A>

<LI><A HREF="#Syntax113">Syntax</A>

<LI><A HREF="#Definition113">Definition</A>

<LI><A HREF="#Example98">Example</A>

</UL>

<LI><A HREF="#lc">lc</A>

<UL>

<LI><A HREF="#Compliance114">Compliance</A>

<LI><A HREF="#Syntax114">Syntax</A>

<LI><A HREF="#Definition114">Definition</A>

<LI><A HREF="#Example99">Example</A>

</UL>

<LI><A HREF="#lcfirst">lcfirst</A>

<UL>

<LI><A HREF="#Compliance115">Compliance</A>

<LI><A HREF="#Syntax115">Syntax</A>

<LI><A HREF="#Definition115">Definition</A>

<LI><A HREF="#Example100">Example</A>

</UL>

<LI><A HREF="#length">length</A>

<UL>

<LI><A HREF="#Compliance116">Compliance</A>

<LI><A HREF="#Syntax116">Syntax</A>

<LI><A HREF="#Definition116">Definition</A>

<LI><A HREF="#Example101">Example</A>

</UL>

<LI><A HREF="#link">link</A>

<UL>

<LI><A HREF="#Compliance117">Compliance</A>

<LI><A HREF="#Syntax117">Syntax</A>

<LI><A HREF="#Definition117">Definition</A>

<LI><A HREF="#Example102">Example</A>

</UL>

<LI><A HREF="#listen">listen</A>

<UL>

<LI><A HREF="#Compliance118">Compliance</A>

<LI><A HREF="#Syntax118">Syntax</A>

<LI><A HREF="#Definition118">Definition</A>

<BR>&nbsp;

</UL>



</UL>

</TD>





<TD WIDTH=25%>

<UL>

<LI><A HREF="#local">local</A>

<UL>

<LI><A HREF="#Compliance119">Compliance</A>

<LI><A HREF="#Syntax119">Syntax</A>

<LI><A HREF="#Definition119">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#localtime">localtime</A>

<UL>

<LI><A HREF="#Compliance120">Compliance</A>

<LI><A HREF="#Syntax120">Syntax</A>

<LI><A HREF="#Definition120">Definition</A>

<LI><A HREF="#Example103">Example</A>

</UL>

<LI><A HREF="#log">log</A>

<UL>

<LI><A HREF="#Compliance121">Compliance</A>

<LI><A HREF="#Syntax121">Syntax</A>

<LI><A HREF="#Definition121">Definition</A>

<LI><A HREF="#Example104">Example</A>

</UL>

<LI><A HREF="#lstat">lstat</A>

<UL>

<LI><A HREF="#Compliance122">Compliance</A>

<LI><A HREF="#Syntax122">Syntax</A>

<LI><A HREF="#Definition122">Definition</A>

<LI><A HREF="#Example105">Example</A>

</UL>

<LI><A HREF="#m">m//</A>

<UL>

<LI><A HREF="#Compliance123">Compliance</A>

<LI><A HREF="#Syntax123">Syntax</A>

<LI><A HREF="#Definition123">Definition</A>

<LI><A HREF="#Example106">Example</A>

</UL>

<LI><A HREF="#map">map</A>

<UL>

<LI><A HREF="#Compliance124">Compliance</A>

<LI><A HREF="#Syntax124">Syntax</A>

<LI><A HREF="#Definition124">Definition</A>

<LI><A HREF="#Example107">Example</A>

</UL>

<LI><A HREF="#mkdir">mkdir</A>

<UL>

<LI><A HREF="#Compliance125">Compliance</A>

<LI><A HREF="#Syntax125">Syntax</A>

<LI><A HREF="#Definition125">Definition</A>

<LI><A HREF="#Example108">Example</A>

</UL>

<LI><A HREF="#msgctl">msgctl</A>

<UL>

<LI><A HREF="#Compliance126">Compliance</A>

<LI><A HREF="#Syntax126">Syntax</A>

<LI><A HREF="#Definition126">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#msgget">msgget</A>

<UL>

<LI><A HREF="#Compliance127">Compliance</A>

<LI><A HREF="#Syntax127">Syntax</A>

<LI><A HREF="#Definition127">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#msgrcv">msgrcv</A>

<UL>

<LI><A HREF="#Compliance128">Compliance</A>

<LI><A HREF="#Syntax128">Syntax</A>

<LI><A HREF="#Definition128">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#msgsnd">msgsnd</A>

<UL>

<LI><A HREF="#Compliance129">Compliance</A>

<LI><A HREF="#Syntax129">Syntax</A>

<LI><A HREF="#Definition129">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#my">my</A>

<UL>

<LI><A HREF="#Compliance130">Compliance</A>

<LI><A HREF="#Syntax130">Syntax</A>

<LI><A HREF="#Definition130">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#next">next</A>

<UL>

<LI><A HREF="#Compliance131">Compliance</A>

<LI><A HREF="#Syntax131">Syntax</A>

<LI><A HREF="#Definition131">Definition</A>

<LI><A HREF="#Example109">Example</A>

</UL>

<LI><A HREF="#no">no</A>

<UL>

<LI><A HREF="#Compliance132">Compliance</A>

<LI><A HREF="#Syntax132">Syntax</A>

<LI><A HREF="#Definition132">Definition</A>

<LI><A HREF="#Example110">Example</A>

</UL>

<LI><A HREF="#oct">oct</A>

<UL>

<LI><A HREF="#Compliance133">Compliance</A>

<LI><A HREF="#Syntax133">Syntax</A>

<LI><A HREF="#Definition133">Definition</A>

<LI><A HREF="#Example111">Example</A>

</UL>

<LI><A HREF="#open">open</A>

<UL>

<LI><A HREF="#Compliance134">Compliance</A>

<LI><A HREF="#Syntax134">Syntax</A>

<LI><A HREF="#Definition134">Definition</A>

<LI><A HREF="#Example112">Example</A>

</UL>

<LI><A HREF="#opendir">opendir</A>

<UL>

<LI><A HREF="#Compliance135">Compliance</A>

<LI><A HREF="#Syntax135">Syntax</A>

<LI><A HREF="#Definition135">Definition</A>

<LI><A HREF="#Example113">Example</A>

</UL>

<LI><A HREF="#ord">ord</A>

<UL>

<LI><A HREF="#Compliance136">Compliance</A>

<LI><A HREF="#Syntax136">Syntax</A>

<LI><A HREF="#Definition136">Definition</A>

<LI><A HREF="#Example114">Example</A>

</UL>



<LI><A HREF="#pack">pack</A>

<UL>

<LI><A HREF="#Compliance137">Compliance</A>

<LI><A HREF="#Syntax137">Syntax</A>

<LI><A HREF="#Definition137">Definition</A>

<LI><A HREF="#Example115">Example</A>

</UL>

<LI><A HREF="#package">package</A>

<UL>

<LI><A HREF="#Compliance138">Compliance</A>

<LI><A HREF="#Syntax138">Syntax</A>

<LI><A HREF="#Definition138">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#pipe">pipe</A>

<UL>

<LI><A HREF="#Compliance139">Compliance</A>

<LI><A HREF="#Syntax139">Syntax</A>

<LI><A HREF="#Definition139">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#pop">pop</A>

<UL>

<LI><A HREF="#Compliance140">Compliance</A>

<LI><A HREF="#Syntax140">Syntax</A>

<LI><A HREF="#Definition140">Definition</A>

<LI><A HREF="#Example116">Example</A>

</UL>

<LI><A HREF="#pos">pos</A>

<UL>

<LI><A HREF="#Compliance141">Compliance</A>

<LI><A HREF="#Syntax141">Syntax</A>

<LI><A HREF="#Definition141">Definition</A>

<LI><A HREF="#Example117">Example</A>

</UL>

<LI><A HREF="#print">print</A>

<UL>

<LI><A HREF="#Compliance142">Compliance</A>

<LI><A HREF="#Syntax142">Syntax</A>

<LI><A HREF="#Definition142">Definition</A>

<LI><A HREF="#Example118">Example</A>

</UL>

<LI><A HREF="#printf">printf</A>

<UL>

<LI><A HREF="#Compliance143">Compliance</A>

<LI><A HREF="#Syntax143">Syntax</A>

<LI><A HREF="#Definition143">Definition</A>

<LI><A HREF="#Example119">Example</A>

</UL>

<LI><A HREF="#push">push</A>

<UL>

<LI><A HREF="#Compliance144">Compliance</A>

<LI><A HREF="#Syntax144">Syntax</A>

<LI><A HREF="#Definition144">Definition</A>

<LI><A HREF="#Example120">Example</A>

</UL>

<LI><A HREF="#qSTRING">q/STRING/</A>

<UL>

<LI><A HREF="#Compliance145">Compliance</A>

<LI><A HREF="#Syntax145">Syntax</A>

<LI><A HREF="#Definition145">Definition</A>

<LI><A HREF="#Example121">Example</A>

</UL>

<LI><A HREF="#qqSTRING">qq/STRING/</A>

<UL>

<LI><A HREF="#Compliance146">Compliance</A>

<LI><A HREF="#Syntax146">Syntax</A>

<LI><A HREF="#Definition146">Definition</A>

<LI><A HREF="#Example122">Example</A>

</UL>

<LI><A HREF="#quotemeta">quotemeta</A>

<UL>

<LI><A HREF="#Compliance147">Compliance</A>

<LI><A HREF="#Syntax147">Syntax</A>

<LI><A HREF="#Definition147">Definition</A>

<LI><A HREF="#Example123">Example</A>

</UL>

<LI><A HREF="#qwSTRING">qw/STRING/</A>

<UL>

<LI><A HREF="#Compliance148">Compliance</A>

<LI><A HREF="#Syntax148">Syntax</A>

<LI><A HREF="#Definition148">Definition</A>

<LI><A HREF="#Example124">Example</A>

</UL>

<LI><A HREF="#qxSTRING">qx/STRING/</A>

<UL>

<LI><A HREF="#Compliance149">Compliance</A>

<LI><A HREF="#Syntax149">Syntax</A>

<LI><A HREF="#Definition149">Definition</A>

<LI><A HREF="#Example125">Example</A>

</UL>

<LI><A HREF="#rand">rand</A>

<UL>

<LI><A HREF="#Compliance150">Compliance</A>

<LI><A HREF="#Syntax150">Syntax</A>

<LI><A HREF="#Definition150">Definition</A>

<LI><A HREF="#Example126">Example</A>

</UL>

<LI><A HREF="#read">read</A>

<UL>

<LI><A HREF="#Compliance151">Compliance</A>

<LI><A HREF="#Syntax151">Syntax</A>

<LI><A HREF="#Definition151">Definition</A>

<LI><A HREF="#Example127">Example</A>

</UL>

<LI><A HREF="#readdir">readdir</A>

<UL>

<LI><A HREF="#Compliance152">Compliance</A>

<LI><A HREF="#Syntax152">Syntax</A>

<LI><A HREF="#Definition152">Definition</A>

<LI><A HREF="#Example128">Example</A>

</UL>

<LI><A HREF="#readlink">readlink</A>

<UL>

<LI><A HREF="#Compliance153">Compliance</A>

<LI><A HREF="#Syntax153">Syntax</A>

<LI><A HREF="#Definition153">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#recv">recv</A>

<UL>

<LI><A HREF="#Compliance154">Compliance</A>

<LI><A HREF="#Syntax154">Syntax</A>

<LI><A HREF="#Definition154">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#redo">redo</A>

<UL>

<LI><A HREF="#Compliance155">Compliance</A>

<LI><A HREF="#Syntax155">Syntax</A>

<LI><A HREF="#Definition155">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#ref">ref</A>

<UL>

<LI><A HREF="#Compliance156">Compliance</A>

<LI><A HREF="#Syntax156">Syntax</A>

<LI><A HREF="#Definition156">Definition</A>

<LI><A HREF="#Example129">Example</A>

</UL>

<LI><A HREF="#rename">rename</A>

<UL>

<LI><A HREF="#Compliance157">Compliance</A>

<LI><A HREF="#Syntax157">Syntax</A>

<LI><A HREF="#Definition157">Definition</A>

<LI><A HREF="#Example130">Example</A>

</UL>

<LI><A HREF="#require">require</A>

<UL>

<LI><A HREF="#Compliance158">Compliance</A>

<LI><A HREF="#Syntax158">Syntax</A>

<LI><A HREF="#Definition158">Definition</A>

<LI><A HREF="#Example131">Example</A>

</UL>

<LI><A HREF="#reset">reset</A>

<UL>

<LI><A HREF="#Compliance159">Compliance</A>

<LI><A HREF="#Syntax159">Syntax</A>

<LI><A HREF="#Definition159">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#return">return</A>

<UL>

<LI><A HREF="#Compliance160">Compliance</A>

<LI><A HREF="#Syntax160">Syntax</A>

<LI><A HREF="#Definition160">Definition</A>

<LI><A HREF="#Example132">Example</A>

</UL>

<LI><A HREF="#reverse">reverse</A>

<UL>

<LI><A HREF="#Compliance161">Compliance</A>

<LI><A HREF="#Syntax161">Syntax</A>

<LI><A HREF="#Definition161">Definition</A>

<LI><A HREF="#Example133">Example</A>

</UL>

<LI><A HREF="#rewinddir">rewinddir</A>

<UL>

<LI><A HREF="#Compliance162">Compliance</A>

<LI><A HREF="#Syntax162">Syntax</A>

<LI><A HREF="#Definition162">Definition</A>

<LI><A HREF="#Example134">Example</A>

</UL>

<LI><A HREF="#rindex">rindex</A>

<UL>

<LI><A HREF="#Compliance163">Compliance</A>

<LI><A HREF="#Syntax163">Syntax</A>

<LI><A HREF="#Definition163">Definition</A>

<LI><A HREF="#Example135">Example</A>

</UL>

<LI><A HREF="#rmdir">rmdir</A>

<UL>

<LI><A HREF="#Compliance164">Compliance</A>

<LI><A HREF="#Syntax164">Syntax</A>

<LI><A HREF="#Definition164">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#s2">s///</A>

<UL>

<LI><A HREF="#Compliance165">Compliance</A>

<LI><A HREF="#Syntax165">Syntax</A>

<LI><A HREF="#Definition165">Definition</A>

<LI><A HREF="#Example136">Example</A>

</UL>

<LI><A HREF="#scalar">scalar</A>

<UL>

<LI><A HREF="#Compliance166">Compliance</A>

<LI><A HREF="#Syntax166">Syntax</A>

<LI><A HREF="#Definition166">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#seek">seek</A>

<UL>

<LI><A HREF="#Compliance167">Compliance</A>

<LI><A HREF="#Syntax167">Syntax</A>

<LI><A HREF="#Definition167">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#seekdir">seekdir</A>

<UL>

<LI><A HREF="#Compliance168">Compliance</A>

<LI><A HREF="#Syntax168">Syntax</A>

<LI><A HREF="#Definition168">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#select">select</A>

<UL>

<LI><A HREF="#Compliance169">Compliance</A>

<LI><A HREF="#Syntax169">Syntax</A>

<LI><A HREF="#Definition169">Definition</A>

<LI><A HREF="#Example137">Example</A>

</UL>

<LI><A HREF="#semctl">semctl</A>

<UL>

<LI><A HREF="#Compliance170">Compliance</A>

<LI><A HREF="#Syntax170">Syntax</A>

<LI><A HREF="#Definition170">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#semget">semget</A>

<UL>

<LI><A HREF="#Compliance171">Compliance</A>

<LI><A HREF="#Syntax171">Syntax</A>

<LI><A HREF="#Definition171">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#semop">semop</A>

<UL>

<LI><A HREF="#Compliance172">Compliance</A>

<LI><A HREF="#Syntax172">Syntax</A>

<LI><A HREF="#Definition172">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#send">send</A>

<UL>

<LI><A HREF="#Compliance173">Compliance</A>

<LI><A HREF="#Syntax173">Syntax</A>

<LI><A HREF="#Definition173">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#setgrent">setgrent</A>

<UL>

<LI><A HREF="#Compliance174">Compliance</A>

<LI><A HREF="#Syntax174">Syntax</A>

<LI><A HREF="#Definition174">Definition</A>

<LI><A HREF="#Example138">Example</A>

</UL>

<LI><A HREF="#sethostent">sethostent</A>

<UL>

<LI><A HREF="#Compliance175">Compliance</A>

<LI><A HREF="#Syntax175">Syntax</A>

<LI><A HREF="#Definition175">Definition</A>

<LI><A HREF="#Example139">Example</A>

</UL>

<LI><A HREF="#setnetent">setnetent</A>

<UL>

<LI><A HREF="#Compliance176">Compliance</A>

<LI><A HREF="#Syntax176">Syntax</A>

<LI><A HREF="#Definition176">Definition</A>

<LI><A HREF="#Example140">Example</A>

</UL>

<LI><A HREF="#setpgrp">setpgrp</A>

<UL>

<LI><A HREF="#Compliance177">Compliance</A>

<LI><A HREF="#Syntax177">Syntax</A>

<LI><A HREF="#Definition177">Definition</A>

<BR>&nbsp;

</UL>

</UL>

</TD>





<TD WIDTH=25%>

<UL>

<LI><A HREF="#setpriority">setpriority</A>

<UL>

<LI><A HREF="#Compliance178">Compliance</A>

<LI><A HREF="#Syntax178">Syntax</A>

<LI><A HREF="#Definition178">Definition</A>

<LI><A HREF="#Example141">Example</A>

</UL>

<LI><A HREF="#setprotoent">setprotoent</A>

<UL>

<LI><A HREF="#Compliance179">Compliance</A>

<LI><A HREF="#Syntax179">Syntax</A>

<LI><A HREF="#Definition179">Definition</A>

<LI><A HREF="#Example142">Example</A>

</UL>

<LI><A HREF="#setpwent">setpwent</A>

<UL>

<LI><A HREF="#Compliance180">Compliance</A>

<LI><A HREF="#Syntax180">Syntax</A>

<LI><A HREF="#Definition180">Definition</A>

<LI><A HREF="#Example143">Example</A>

</UL>

<LI><A HREF="#setservent">setservent</A>

<UL>

<LI><A HREF="#Compliance181">Compliance</A>

<LI><A HREF="#Syntax181">Syntax</A>

<LI><A HREF="#Definition181">Definition</A>

<LI><A HREF="#Example144">Example</A>

</UL>

<LI><A HREF="#setsockopt">setsockopt</A>

<UL>

<LI><A HREF="#Compliance182">Compliance</A>

<LI><A HREF="#Syntax182">Syntax</A>

<LI><A HREF="#Definition182">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#shift">shift</A>

<UL>

<LI><A HREF="#Compliance183">Compliance</A>

<LI><A HREF="#Syntax183">Syntax</A>

<LI><A HREF="#Definition183">Definition</A>

<LI><A HREF="#Example145">Example</A>

</UL>

<LI><A HREF="#shmctl">shmctl</A>

<UL>

<LI><A HREF="#Compliance184">Compliance</A>

<LI><A HREF="#Syntax184">Syntax</A>

<LI><A HREF="#Definition184">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#shmget">shmget</A>

<UL>

<LI><A HREF="#Compliance185">Compliance</A>

<LI><A HREF="#Syntax185">Syntax</A>

<LI><A HREF="#Definition185">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#shmread">shmread</A>

<UL>

<LI><A HREF="#Compliance186">Compliance</A>

<LI><A HREF="#Syntax186">Syntax</A>

<LI><A HREF="#Definition186">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#shmwrite">shmwrite</A>

<UL>

<LI><A HREF="#Compliance187">Compliance</A>

<LI><A HREF="#Syntax187">Syntax</A>

<LI><A HREF="#Definition187">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#shutdown">shutdown</A>

<UL>

<LI><A HREF="#Compliance188">Compliance</A>

<LI><A HREF="#Syntax188">Syntax</A>

<LI><A HREF="#Definition188">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#sin">sin</A>

<UL>

<LI><A HREF="#Compliance189">Compliance</A>

<LI><A HREF="#Syntax189">Syntax</A>

<LI><A HREF="#Definition189">Definition</A>

<LI><A HREF="#Example146">Example</A>

</UL>

<LI><A HREF="#sleep">sleep</A>

<UL>

<LI><A HREF="#Compliance190">Compliance</A>

<LI><A HREF="#Syntax190">Syntax</A>

<LI><A HREF="#Definition190">Definition</A>

<LI><A HREF="#Example147">Example</A>

</UL>

<LI><A HREF="#socket">socket</A>

<UL>

<LI><A HREF="#Compliance191">Compliance</A>

<LI><A HREF="#Syntax191">Syntax</A>

<LI><A HREF="#Definition191">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#socketpair">socketpair</A>

<UL>

<LI><A HREF="#Compliance192">Compliance</A>

<LI><A HREF="#Syntax192">Syntax</A>

<LI><A HREF="#Definition192">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#sort">sort</A>

<UL>

<LI><A HREF="#Compliance193">Compliance</A>

<LI><A HREF="#Syntax193">Syntax</A>

<LI><A HREF="#Definition193">Definition</A>

<LI><A HREF="#Example148">Example</A>

</UL>

<LI><A HREF="#splice">splice</A>

<UL>

<LI><A HREF="#Compliance194">Compliance</A>

<LI><A HREF="#Syntax194">Syntax</A>

<LI><A HREF="#Definition194">Definition</A>

<LI><A HREF="#Example149">Example</A>

</UL>

<LI><A HREF="#split">split</A>

<UL>

<LI><A HREF="#Compliance195">Compliance</A>

<LI><A HREF="#Syntax195">Syntax</A>

<LI><A HREF="#Definition195">Definition</A>

<LI><A HREF="#Examples">Examples</A>

</UL>

<LI><A HREF="#sprintf">sprintf</A>

<UL>

<LI><A HREF="#Compliance196">Compliance</A>

<LI><A HREF="#Syntax196">Syntax</A>

<LI><A HREF="#Definition196">Definition</A>

<LI><A HREF="#Example150">Example</A>

</UL>

<LI><A HREF="#sqrt">sqrt</A>

<UL>

<LI><A HREF="#Compliance197">Compliance</A>

<LI><A HREF="#Syntax197">Syntax</A>

<LI><A HREF="#Definition197">Definition</A>

<LI><A HREF="#Example151">Example</A>

</UL>

<LI><A HREF="#srand">srand</A>

<UL>

<LI><A HREF="#Compliance198">Compliance</A>

<LI><A HREF="#Syntax198">Syntax</A>

<LI><A HREF="#Definition198">Definition</A>

<LI><A HREF="#Example152">Example</A>

</UL>

<LI><A HREF="#stat">stat</A>

<UL>

<LI><A HREF="#Compliance199">Compliance</A>

<LI><A HREF="#Syntax199">Syntax</A>

<LI><A HREF="#Definition199">Definition</A>

<LI><A HREF="#Example153">Example</A>

</UL>

<LI><A HREF="#study">study</A>

<UL>

<LI><A HREF="#Compliance200">Compliance</A>

<LI><A HREF="#Syntax200">Syntax</A>

<LI><A HREF="#Definition200">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#sub">sub</A>

<UL>

<LI><A HREF="#Compliance201">Compliance</A>

<LI><A HREF="#Syntax201">Syntax</A>

<LI><A HREF="#Definition201">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#substr">substr</A>

<UL>

<LI><A HREF="#Compliance202">Compliance</A>

<LI><A HREF="#Syntax202">Syntax</A>

<LI><A HREF="#Definition202">Definition</A>

<LI><A HREF="#Example154">Example</A>

</UL>

<LI><A HREF="#symlink">symlink</A>

<UL>

<LI><A HREF="#Compliance203">Compliance</A>

<LI><A HREF="#Syntax203">Syntax</A>

<LI><A HREF="#Definition203">Definition</A>

<LI><A HREF="#Example155">Example</A>

</UL>

<LI><A HREF="#syscall">syscall</A>

<UL>

<LI><A HREF="#Compliance204">Compliance</A>

<LI><A HREF="#Syntax204">Syntax</A>

<LI><A HREF="#Definition204">Definition</A>

<LI><A HREF="#Example156">Example</A>

</UL>

<LI><A HREF="#sysopen">sysopen</A>

<UL>

<LI><A HREF="#Compliance205">Compliance</A>

<LI><A HREF="#Syntax205">Syntax</A>

<LI><A HREF="#Definition205">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#sysread">sysread</A>

<UL>

<LI><A HREF="#Compliance206">Compliance</A>

<LI><A HREF="#Syntax206">Syntax</A>

<LI><A HREF="#Definition206">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#system">system</A>

<UL>

<LI><A HREF="#Compliance207">Compliance</A>

<LI><A HREF="#Syntax207">Syntax</A>

<LI><A HREF="#Definition207">Definition</A>

<LI><A HREF="#Example157">Example</A>

</UL>



<LI><A HREF="#syswrite">syswrite</A>

<UL>

<LI><A HREF="#Compliance208">Compliance</A>

<LI><A HREF="#Syntax208">Syntax</A>

<LI><A HREF="#Definition208">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#tell">tell</A>

<UL>

<LI><A HREF="#Compliance209">Compliance</A>

<LI><A HREF="#Syntax209">Syntax</A>

<LI><A HREF="#Definition209">Definition</A>

<LI><A HREF="#Example158">Example</A>

</UL>

<LI><A HREF="#telldir">telldir</A>

<UL>

<LI><A HREF="#Compliance210">Compliance</A>

<LI><A HREF="#Syntax210">Syntax</A>

<LI><A HREF="#Definition210">Definition</A>

<LI><A HREF="#Example159">Example</A>

</UL>

<LI><A HREF="#tie">tie</A>

<UL>

<LI><A HREF="#Compliance211">Compliance</A>

<LI><A HREF="#Syntax211">Syntax</A>

<LI><A HREF="#Definition211">Definition</A>

<LI><A HREF="#Example160">Example</A>

</UL>

<LI><A HREF="#tied">tied</A>

<UL>

<LI><A HREF="#Compliance212">Compliance</A>

<LI><A HREF="#Syntax212">Syntax</A>

<LI><A HREF="#Definition212">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#time">time</A>

<UL>

<LI><A HREF="#Compliance213">Compliance</A>

<LI><A HREF="#Syntax213">Syntax</A>

<LI><A HREF="#Definition213">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#times">times</A>

<UL>

<LI><A HREF="#Compliance214">Compliance</A>

<LI><A HREF="#Syntax214">Syntax</A>

<LI><A HREF="#Definition214">Definition</A>

<LI><A HREF="#Example161">Example</A>

</UL>

<LI><A HREF="#tr">tr///</A>

<UL>

<LI><A HREF="#Compliance215">Compliance</A>

<LI><A HREF="#Syntax215">Syntax</A>

<LI><A HREF="#Definition215">Definition</A>

<LI><A HREF="#Examples">Examples</A>

</UL>

<LI><A HREF="#truncate">truncate</A>

<UL>

<LI><A HREF="#Compliance216">Compliance</A>

<LI><A HREF="#Syntax216">Syntax</A>

<LI><A HREF="#Definition216">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#uc">uc</A>

<UL>

<LI><A HREF="#Compliance217">Compliance</A>

<LI><A HREF="#Syntax217">Syntax</A>

<LI><A HREF="#Definition217">Definition</A>

<LI><A HREF="#Example162">Example</A>

</UL>

<LI><A HREF="#ucfirst">ucfirst</A>

<UL>

<LI><A HREF="#Compliance218">Compliance</A>

<LI><A HREF="#Syntax218">Syntax</A>

<LI><A HREF="#Definition218">Definition</A>

<LI><A HREF="#Example163">Example</A>

</UL>

<LI><A HREF="#umask">umask</A>

<UL>

<LI><A HREF="#Compliance219">Compliance</A>

<LI><A HREF="#Syntax219">Syntax</A>

<LI><A HREF="#Definition219">Definition</A>

<LI><A HREF="#Example164">Example</A>

</UL>

<LI><A HREF="#undef">undef</A>

<UL>

<LI><A HREF="#Compliance220">Compliance</A>

<LI><A HREF="#Syntax220">Syntax</A>

<LI><A HREF="#Definition220">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#unlink">unlink</A>

<UL>

<LI><A HREF="#Compliance221">Compliance</A>

<LI><A HREF="#Syntax221">Syntax</A>

<LI><A HREF="#Definition221">Definition</A>

<LI><A HREF="#Example165">Example</A>

</UL>

<LI><A HREF="#unpack">unpack</A>

<UL>

<LI><A HREF="#Compliance222">Compliance</A>

<LI><A HREF="#Syntax222">Syntax</A>

<LI><A HREF="#Definition222">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#unshift">unshift</A>

<UL>

<LI><A HREF="#Compliance223">Compliance</A>

<LI><A HREF="#Syntax223">Syntax</A>

<LI><A HREF="#Definition223">Definition</A>

<LI><A HREF="#Example166">Example</A>

</UL>

<LI><A HREF="#untie">untie</A>

<UL>

<LI><A HREF="#Compliance224">Compliance</A>

<LI><A HREF="#Syntax224">Syntax</A>

<LI><A HREF="#Definition224">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#use">use</A>

<UL>

<LI><A HREF="#Compliance225">Compliance</A>

<LI><A HREF="#Syntax225">Syntax</A>

<LI><A HREF="#Definition225">Definition</A>

<LI><A HREF="#Example167">Example</A>

</UL>

<LI><A HREF="#utime">utime</A>

<UL>

<LI><A HREF="#Compliance226">Compliance</A>

<LI><A HREF="#Syntax226">Syntax</A>

<LI><A HREF="#Definition226">Definition</A>

<LI><A HREF="#Example168">Example</A>

</UL>

<LI><A HREF="#values">values</A>

<UL>

<LI><A HREF="#Compliance227">Compliance</A>

<LI><A HREF="#Syntax227">Syntax</A>

<LI><A HREF="#Definition227">Definition</A>

<LI><A HREF="#Example169">Example</A>

</UL>

<LI><A HREF="#vec">vec</A>

<UL>

<LI><A HREF="#Compliance228">Compliance</A>

<LI><A HREF="#Syntax228">Syntax</A>

<LI><A HREF="#Definition228">Definition</A>

<LI><A HREF="#Example170">Example</A>

</UL>

<LI><A HREF="#wait">wait</A>

<UL>

<LI><A HREF="#Compliance229">Compliance</A>

<LI><A HREF="#Syntax229">Syntax</A>

<LI><A HREF="#Definition229">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#waitpid">waitpid</A>

<UL>

<LI><A HREF="#Compliance230">Compliance</A>

<LI><A HREF="#Syntax230">Syntax</A>

<LI><A HREF="#Definition230">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#wantarray">wantarray</A>

<UL>

<LI><A HREF="#Compliance231">Compliance</A>

<LI><A HREF="#Syntax231">Syntax</A>

<LI><A HREF="#Definition231">Definition</A>

<LI><A HREF="#Example171">Example</A>

</UL>

<LI><A HREF="#warn">warn</A>

<UL>

<LI><A HREF="#Compliance232">Compliance</A>

<LI><A HREF="#Syntax232">Syntax</A>

<LI><A HREF="#Definition232">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#write">write</A>

<UL>

<LI><A HREF="#Compliance233">Compliance</A>

<LI><A HREF="#Syntax233">Syntax</A>

<LI><A HREF="#Definition233">Definition</A>

<BR>&nbsp;

</UL>

<LI><A HREF="#y">y///</A>

<UL>

<LI><A HREF="#Compliance234">Compliance</A>

<LI><A HREF="#Syntax234">Syntax</A>

<LI><A HREF="#Definition234">Definition</A>

<BR>&nbsp;

</UL>

</UL>

</TR>

</TABLE></CENTER>



<HR>



<P>

Perl has a large number of functions that come as standard with

most implementations, and an even wider range of additional modules,

each with its own additional functions. This chapter lists all

the standard functions alphabetically for reference.

<P>

Each function is assigned a category. There are two main categories;

list operators, which can take more than one argument, and named

unary operators, which can only take one argument. A secondary

category is noted in parentheses so you can see, at a glance,

the type of operation the function performs. This is a very rough

categorization, as many functions might overlap in any category

scheme.

<P>

For each function the form of the arguments is listed. If there

are multiple forms of calling the function, there will be multiple

lines describing each form. The meanings of the arguments are

described in the text.

<P>

The type of value returned by the function is listed. This is

usually specified in more detail in the function description.

<P>

Two categories of functions, those dealing with sockets and those

dealing with System V inter-process communications, are not dealt

with in great detail. Both of these categories of functions are

direct counterparts of UNIX system functions.

<H2><A NAME="A"><FONT SIZE=5 COLOR=#FF0000>

-A</FONT></A></H2>

<H3><A NAME="Compliance1">

Compliance</A></H3>

<H3><A NAME="Syntax1">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (file test)

Arguments&nbsp;&nbsp;handle

Arguments&nbsp;&nbsp;filename

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;integer (age of file in days since last

             &nbsp;access relative to $BASETIME)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition1">

Definition</A></H3>

<P>

The <TT>file test</TT> operator takes one file <TT>handle</TT>

or <TT>filename</TT> as an argument. It returns <TT>age of file

in days since last access relative to $BASETIME</TT>. All <TT>file

test</TT> operators can take a special argument underscore, which

means that the test is carried out on the same file <TT>handle</TT>

as the last <TT>file test</TT>, <TT>stat()</TT>, or <TT>lstat()</TT>

call. If no argument is supplied, <TT>$_</TT> is used.

<H3><A NAME="Example1">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print &quot;-A &quot;, -A &quot;/etc/fstab&quot;, &quot;\n&quot;;

</PRE>

</BLOCKQUOTE>

<H2><A NAME="B"><FONT SIZE=5 COLOR=#FF0000>

-B</FONT></A></H2>

<H3><A NAME="Compliance2">

Compliance</A></H3>

<H3><A NAME="Syntax2">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (file test)

Arguments&nbsp;&nbsp;handle

Arguments&nbsp;&nbsp;filename

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition2">

Definition</A></H3>

<P>

The <TT>file test</TT> operator takes one file <TT>handle</TT>

or <TT>filename</TT> as an argument. It returns <TT>1</TT> (true)

if the file is binary. It returns <TT>''</TT> (false) if the file

is not binary. The first characters of the file are checked to

see if the high bit is set and if a suitable number do have the

high bit set the file is assumed to be binary. If the file is

empty it is returned as binary. Because this test involves reading

the file itself, it is best to test to learn if the file exists

as a plain file (<TT>-f</TT>), first. All <TT>file test</TT> operators

can take a special argument underscore, which means that the test

is carried out on the same file <TT>handle</TT> as the last <TT>file

test</TT>, <TT>stat()</TT>, or <TT>lstat()</TT> call. If no argument

is supplied, <TT>$_</TT> is used.

<H3><A NAME="Example2">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

(-B &quot;/etc/fstab&quot;) ? print(&quot;-B fstab is binary\n&quot;) :

 

	print(&quot;-B fstab is not binary\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="b"><FONT SIZE=5 COLOR=#FF0000>

-b</FONT></A></H2>

<H3><A NAME="Compliance3">

Compliance</A></H3>

<H3><A NAME="Syntax3">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (file test)

Arguments&nbsp;&nbsp;handle

Arguments&nbsp;&nbsp;filename

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition3">

Definition</A></H3>

<P>

The <TT>file test</TT> operator takes one file <TT>handle</TT>

or <TT>filename</TT> as an argument. It returns <TT>1</TT> (true)

if the file is a block special file (that is, a UNIX <TT>/dev</TT>

device file). It returns <TT>''</TT> (false) if the file is not

a block special file. All <TT>file test</TT> operators can take

a special argument underscore, which means that the test is carried

out on the same file <TT>handle</TT> as the last <TT>file test</TT>,

<TT>stat()</TT>, or <TT>lstat()</TT> call. If no argument is supplied,

<TT>$_</TT> is used.

<H3><A NAME="Example3">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

(-b &quot;/dev/hda1&quot;) ? print(&quot;-b hda1 is block\n&quot;) :

 

	print(&quot;-b hda1 is not block\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="C"><FONT SIZE=5 COLOR=#FF0000>

-C</FONT></A></H2>

<H3><A NAME="Compliance4">

Compliance</A></H3>

<H3><A NAME="Syntax4">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (file test)

Arguments&nbsp;&nbsp;handle

Arguments&nbsp;&nbsp;filename

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;integer (age of file in days since last

             &nbsp;inode change relative to $BASETIME)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition4">

Definition</A></H3>

<P>

The <TT>file test</TT> operator takes one file <TT>handle</TT>

or <TT>filename</TT> as an argument. It returns <TT>age of file

in days since last inode change relative to $BASETIME</TT>. All

<TT>file test</TT> operators can take a special argument underscore,

which means that the test is carried out on the same file <TT>handle</TT>

as the last <TT>file test</TT>, <TT>stat()</TT>, or <TT>lstat()</TT>

call. If no argument is supplied, <TT>$_</TT> is used.

<H3><A NAME="Example4">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print &quot;-C &quot;, -C &quot;/etc/fstab&quot;, &quot;\n&quot;;

</PRE>

</BLOCKQUOTE>

<H2><A NAME="c"><FONT SIZE=5 COLOR=#FF0000>

-c</FONT></A></H2>

<H3><A NAME="Compliance5">

Compliance</A></H3>

<H3><A NAME="Syntax5">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (file test)

Arguments&nbsp;&nbsp;handle

Arguments&nbsp;&nbsp;filename

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition5">

Definition</A></H3>

<P>

The <TT>file test</TT> operator takes one file <TT>handle</TT>

or <TT>filename</TT> as an argument. It returns <TT>1</TT> (true)

if the file is a character special file. It returns <TT>''</TT>

(false) if the file is not a character special file. All <TT>file

test</TT> operators can take a special argument underscore, which

means that the test is carried out on the same file <TT>handle</TT>

as the last <TT>file test</TT>, <TT>stat()</TT>, or <TT>lstat()</TT>

call. If no argument is supplig&#170;, <TT>$_</TT> is used.

<H3><A NAME="Example5">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

(-c &quot;/dev/tty0&quot;) ? print(&quot;-c tty0 is char\n&quot;) : 

	print(&quot;-c tty0 is not char\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="d"><FONT SIZE=5 COLOR=#FF0000>

-d</FONT></A></H2>

<H3><A NAME="Compliance6">

Compliance</A></H3>

<H3><A NAME="Syntax6">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (file test)

Arguments&nbsp;&nbsp;handle

Arguments&nbsp;&nbsp;filename

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition6">

Definition</A></H3>

<P>

The <TT>file test</TT> operator takes one file <TT>handle</TT>

or <TT>filename</TT> as an argument. It returns <TT>1</TT> (true)

if the file is a directory. It returns <TT>''</TT> (false) if

the file is not a directory. All <TT>file test</TT> operators

can take a special argument underscore, which means that the test

is carried out on the same file <TT>handle</TT> as the last <TT>file

test</TT>, <TT>stat()</TT>, or <TT>lstat()</TT> call. If no argument

is supplied, <TT>$_</TT> is used.

<H3><A NAME="Example6">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

(-d &quot;/&quot;) ? print(&quot;-d / is dir\n&quot;) : print(&quot;-d / is not dir\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="e"><FONT SIZE=5 COLOR=#FF0000>

-e</FONT></A></H2>

<H3><A NAME="Compliance7">

Compliance</A></H3>

<H3><A NAME="Syntax7">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (file test)

Arguments&nbsp;&nbsp;handle

Arguments&nbsp;&nbsp;filename

Arguments&nbsp;&nbsp;none

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition7">

Definition</A></H3>

<P>

The <TT>file test</TT> operator takes one file <TT>handle</TT>

or <TT>filename</TT> as an argument. It returns <TT>1</TT> (true)

if file exists. It returns <TT>''</TT> (false) if the file does

not exist. All <TT>file test</TT> operators can take a special

argument underscore, which means that the test is carried out

on the same file <TT>handle</TT> as the last <TT>file test</TT>,

<TT>stat()</TT>, or <TT>lstat()</TT> call. If no argument is supplied,

<TT>$_</TT> is used.

<H3><A NAME="Example7">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

(-e &quot;/&quot;) ? print(&quot;-e / exists\n&quot;) : print(&quot;-e / exists\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="f"><FONT SIZE=5 COLOR=#FF0000>

-f</FONT></A></H2>

<H3><A NAME="Compliance8">

Compliance</A></H3>

<H3><A NAME="Syntax8">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (file test)

Arguments&nbsp;&nbsp;handle

Arguments&nbsp;&nbsp;filename

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition8">

Definition</A></H3>

<P>

The <TT>file test</TT> operator takes one file <TT>handle</TT>

or <TT>filename</TT> as an argument. It returns <TT>1</TT> (true)

if the file is a plain file. It returns <TT>''</TT> (false) if

the file is not a plain file. A plain file is any file that is

not a special block device (<TT>-b</TT>), a special character

device (<TT>-c</TT>), a directory (<TT>-d</TT>), a symbolic link

(<TT>-l</TT>), a pipe (<TT>-p</TT>), a named socket (<TT>-S</TT>),

or a direct link to an I/O terminal (<TT>-t</TT>). All <TT>file

test</TT> operators can take a special argument underscore, which

means that the test is carried out on the same file <TT>handle</TT>

as the last <TT>file test</TT>, <TT>stat()</TT>, or <TT>lstat()</TT>

call. If no argument is supplied, <TT>$_</TT> is used.

<H3><A NAME="Example8">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

(-f &quot;/&quot;) ? print(&quot;-f / is plain\n&quot;) : print(&quot;-f / is not plain\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="g"><FONT SIZE=5 COLOR=#FF0000>

-g</FONT></A></H2>

<H3><A NAME="Compliance9">

Compliance</A></H3>

<H3><A NAME="Syntax9">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (file test)

Arguments&nbsp;&nbsp;handle

Arguments&nbsp;&nbsp;filename

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition9">

Definition</A></H3>

<P>

The <TT>file test</TT> operator takes one file <TT>handle</TT>

or <TT>filename</TT> as an argument. It returns <TT>1</TT> (true)

if the file has the <TT>setgid</TT> bit set. It returns <TT>''</TT>

(false) if the file does not have the <TT>setgid</TT> bit set.

In UNIX, <TT>setgid</TT> allows an executable to run as if it

was being run by the group, which owns the executable itself while

executing (for example, if a binary is owned by the group <TT>wwwstat</TT>,

and the binary has the <TT>getgid</TT> bit set, then that binary

has access to all files that the <TT>wwwstat</TT> group can access

while the binary is running, even when the binary is run by someone

who is not actually a member of the <TT>wwwstat</TT> group). All

<TT>file test</TT> operators can take a special argument underscore,

which means that the test is carried out on the same file <TT>handle</TT>

as the last <TT>file test</TT>, <TT>stat()</TT>, or <TT>lstat()</TT>

call. If no argument is supplied, <TT>$_</TT> is used.

<H3><A NAME="Example9">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

(-g &quot;/vmlinuz&quot;) ? print(&quot;-g /vmlinuz has setgid\n&quot;) :

	 print(&quot;-g /vmlinuz has not setgid\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="k"><FONT SIZE=5 COLOR=#FF0000>

-k</FONT></A></H2>

<H3><A NAME="Compliance10">

Compliance</A></H3>

<H3><A NAME="Syntax10">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (file test)

Arguments&nbsp;&nbsp;handle

Arguments&nbsp;&nbsp;filename

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition10">

Definition</A></H3>

<P>

The <TT>file test</TT> operator takes one file <TT>handle</TT>

or <TT>filename</TT> as an argument. It returns <TT>1</TT> (true)

if the sticky bit is set. It returns <TT>''</TT> (false) if the

sticky bit is not set. In UNIX, the sticky bit can mark an executable

file to be held in memory when exited (for example, if the binary

<TT>ls</TT> is marked as sticky, when the first person runs it,

it is loaded from disk to memory and executed, but when the execution

finishes, the binary stays in memory so that when the next person

runs <TT>ls</TT> it does not need to be loaded into memory again

because it is already there). This is normally set for frequently

used commands to optimize execution speed. All <TT>file test</TT>

operators can take a special argument underscore, which means

that the test is carried out on the same file <TT>handle</TT>

as the last <TT>file test</TT>, <TT>stat()</TT>, or <TT>lstat()</TT>

call. If no argument is supplied, <TT>$_</TT> is used.

<H3><A NAME="Example10">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

(-k &quot;/vmlinuz&quot;) ? print(&quot;-k /vmlinuz is sticky\n&quot;) : 

	print(&quot;-k /vmlinuz is not sticky\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="l"><FONT SIZE=5 COLOR=#FF0000>

-l</FONT></A></H2>

<H3><A NAME="Compliance11">

Compliance</A></H3>

<H3><A NAME="Syntax11">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (file test)

Arguments&nbsp;&nbsp;handle

Arguments&nbsp;&nbsp;filename

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition11">

Definition</A></H3>

<P>

The <TT>file test</TT> operator takes one file <TT>handle</TT>

or <TT>filename</TT> as an argument. It returns <TT>1</TT> (true)

if the file is a symbolic link. It returns <TT>''</TT> (false)

if the file is not a symbolic link. All <TT>file test</TT> operators

can take a special argument underscore, which means that the test

is carried out on the same file <TT>handle</TT> as the last <TT>file

test</TT>, <TT>stat()</TT>, or <TT>lstat()</TT> call. If no argument

is supplied, <TT>$_</TT> is used.

<H3><A NAME="Example11">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

(-l &quot;/vmlinuz&quot;) ? print(&quot;-l /vmlinuz is symlink\n&quot;) : 

	print(&quot;-l /vmlinuz is not symlink\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="M"><FONT SIZE=5 COLOR=#FF0000>

-M</FONT></A></H2>

<H3><A NAME="Compliance12">

Compliance</A></H3>

<H3><A NAME="Syntax12">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (file test)

Arguments&nbsp;&nbsp;handle

Arguments&nbsp;&nbsp;filename

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;integer (age of file in days relative to $BASETIME)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition12">

Definition</A></H3>

<P>

The <TT>file test</TT> operator takes one file <TT>handle</TT>

or <TT>filename</TT> as an argument. It returns the <TT>age of

the file in days relative to $BASETIME</TT>. All <TT>file test</TT>

operators can take a special argument underscore, which means

that the test is carried out on the same file <TT>handle</TT>

as the last <TT>file test</TT>, <TT>stat()</TT>, or <TT>lstat()</TT>

call. If no argument is supplied, <TT>$_</TT> is used.

<H3><A NAME="Example12">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print &quot;-M &quot;, -M &quot;/etc/fstab&quot;, &quot;\n&quot;;

</PRE>

</BLOCKQUOTE>

<H2><A NAME="O"><FONT SIZE=5 COLOR=#FF0000>

-O</FONT></A></H2>

<H3><A NAME="Compliance13">

Compliance</A></H3>

<H3><A NAME="Syntax13">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (file test)

Arguments&nbsp;&nbsp;handle

Arguments&nbsp;&nbsp;filename

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition13">

Definition</A></H3>

<P>

The <TT>file test</TT> operator takes one file <TT>handle</TT>

or <TT>filename</TT> as an argument. It returns <TT>1</TT> (true)

if the file is owned by the real UID/GID and it returns <TT>''</TT>

(false) otherwise. For the superuser it always returns true. All

<TT>file test</TT> operators can take a special argument underscore,

which means that the test is carried out on the same file <TT>handle</TT>

as the last <TT>file test</TT>, <TT>stat()</TT>, or <TT>lstat()</TT>

call. If no argument is supplied, <TT>$_</TT> is used.

<H3><A NAME="Example13">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

(-o &quot;/vmlinuz&quot;) ? print(&quot;-o /vmlinuz is owned by real uid/gid\n&quot;) : 

	print(&quot;-o /vmlinuz is not owned by real uid/gid\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="o"><FONT SIZE=5 COLOR=#FF0000>

-o</FONT></A></H2>

<H3><A NAME="Compliance14">

Compliance</A></H3>

<H3><A NAME="Syntax14">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (file test)

Arguments&nbsp;&nbsp;handle

Arguments&nbsp;&nbsp;filename

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition14">

Definition</A></H3>

<P>

The <TT>file test</TT> operator takes one file <TT>handle</TT>

or <TT>filename</TT> as an argument. This function returns <TT>1</TT>

(true) if the file is owned by the effective UID/GID and it returns

<TT>''</TT> (false) otherwise. For the superuser it always returns

true. All <TT>file test</TT> operators can take a special argument

underscore, which means that the test is carried out on the same

file <TT>handle</TT> as the last <TT>file test</TT>, <TT>stat()</TT>,

or <TT>lstat()</TT> call. If no argument is supplied, <TT>$_</TT>

is used.

<H3><A NAME="Example14">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

(-O &quot;/vmlinuz&quot;) ? print(&quot;-O /vmlinuz is owned by effective uid/gid\n&quot;) : 

	print(&quot;-o /vmlinuz is not owned by effective uid/gid\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="p"><FONT SIZE=5 COLOR=#FF0000>

-p</FONT></A></H2>

<H3><A NAME="Compliance15">

Compliance</A></H3>

<H3><A NAME="Syntax15">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (file test)

Arguments&nbsp;&nbsp;handle

Arguments&nbsp;&nbsp;filename

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition15">

Definition</A></H3>

<P>

The <TT>file test</TT> operator takes one file <TT>handle</TT>

or <TT>filename</TT> as an argument. It returns <TT>1</TT> (true)

if the file is a named pipe. It returns <TT>''</TT> (false) if

the file is not a named pipe. All <TT>file test</TT> operators

can take a special argument underscore, which means that the test

is carried out on the same file <TT>handle</TT> as the last <TT>file

test</TT>, <TT>stat()</TT>, or <TT>lstat()</TT> call. If no argument

is supplied, <TT>$_</TT> is used.

<H3><A NAME="Example15">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

(-p &quot;/vmlinuz&quot;) ? print(&quot;-p /vmlinuz is named pipe\n&quot;) : 

	print(&quot;-p /vmlinuz is not named pipe\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="R"><FONT SIZE=5 COLOR=#FF0000>

-R</FONT></A></H2>

<H3><A NAME="Compliance16">

Compliance</A></H3>

<H3><A NAME="Syntax16">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (file test)

Arguments&nbsp;&nbsp;handle

Arguments&nbsp;&nbsp;filename

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition16">

Definition</A></H3>

<P>

The <TT>file test</TT> operator takes one file <TT>handle</TT>

or <TT>filename</TT> as an argument. It returns <TT>1</TT> (true)

if the file is readable by the effective UID/GID and it returns

<TT>''</TT> (false) otherwise. For the superuser it always returns

true. All <TT>file test</TT> operators can take a special argument

underscore, which means that the test is carried out on the same

file <TT>handle</TT> as the last <TT>file test</TT>, <TT>stat()</TT>,

or <TT>lstat()</TT> call. If no argument is supplied, <TT>$_</TT>

is used.

<H3><A NAME="Example16">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

(-R &quot;/vmlinuz&quot;) ? print(&quot;-R /vmlinuz is readable by effective uid/gid\n&quot;) : 

	print(&quot;-R /vmlinuz is not readable by effective uid/gid\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="r"><FONT SIZE=5 COLOR=#FF0000>

-r</FONT></A></H2>

<H3><A NAME="Compliance17">

Compliance</A></H3>

<H3><A NAME="Syntax17">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (file test)

Arguments&nbsp;&nbsp;handle

Arguments&nbsp;&nbsp;filename

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition17">

Definition</A></H3>

<P>

The <TT>file test</TT> operator takes one file <TT>handle</TT>

or <TT>filename</TT> as an argument. It returns <TT>1</TT> (true)

if the file is readable by the real UID/GID and it returns <TT>''</TT>

(false) otherwise. For the superuser it always returns true. All

<TT>file test</TT> operators can take a special argument underscore,

which means that the test is carried out on the same file <TT>handle</TT>

as the last <TT>file test</TT>, <TT>stat()</TT>, or <TT>lstat()</TT>

call. If no argument is supplied, <TT>$_</TT> is used.

<H3><A NAME="Example17">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

(-r &quot;/vmlinuz&quot;) ? print(&quot;-r /vmlinuz is readable by real uid/gid\n&quot;) : 

	print(&quot;-r /vmlinuz is not readable by real uid/gid\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="S"><FONT SIZE=5 COLOR=#FF0000>

-S</FONT></A></H2>

<H3><A NAME="Compliance18">

Compliance</A></H3>

<H3><A NAME="Syntax18">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (file test)

Arguments&nbsp;&nbsp;handle

Arguments&nbsp;&nbsp;filename

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition18">

Definition</A></H3>

<P>

The <TT>file test</TT> operator takes one file <TT>handle</TT>

or <TT>filename</TT> as an argument. It returns <TT>1</TT> (true)

if the file is a symbolic link. It returns <TT>''</TT> (false)

if the file is not a symbolic link. All <TT>file test</TT> operators

can take a special argument underscore, which means that the test

is carried out on the same file <TT>handle</TT> as the last <TT>file

test</TT>, <TT>stat()</TT>, or <TT>lstat()</TT> call. If no argument

is supplied, <TT>$_</TT> is used.

<H3><A NAME="Example18">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

(-S &quot;/vmlinuz&quot;) ? print(&quot;-S /vmlinuz is socket\n&quot;) : 

	print(&quot;-S /vmlinuz is not socket\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="s1"><FONT SIZE=5 COLOR=#FF0000>

-s</FONT></A></H2>

<H3><A NAME="Compliance19">

Compliance</A></H3>

<H3><A NAME="Syntax19">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (file test)

Arguments&nbsp;&nbsp;handle

Arguments&nbsp;&nbsp;filename

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;integer (size) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition19">

Definition</A></H3>

<P>

The <TT>file test</TT> operator takes one file <TT>handle</TT>

or <TT>filename</TT> as an argument. It returns <TT>size</TT>

in bytes as an integer if the file has a non-zero size. It returns

<TT>''</TT> (false) if the file has zero size. All <TT>file test</TT>

operators can take a special argument underscore, which means

that the test is carried out on the same file <TT>handle</TT>

as the last <TT>file test</TT>, <TT>stat()</TT>, or <TT>lstat()</TT>

call. If no argument is supplied, <TT>$_</TT> is used.

<H3><A NAME="Example19">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

(-s &quot;/vmlinuz&quot;) ? print(&quot;-s /vmlinuz has non-zero size\n&quot;) : 

	print(&quot;-s /vmlinuz does not have non-zero size\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="T"><FONT SIZE=5 COLOR=#FF0000>

-T</FONT></A></H2>

<H3><A NAME="Compliance20">

Compliance</A></H3>

<H3><A NAME="Syntax20">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (file test)

Arguments&nbsp;&nbsp;handle

Arguments&nbsp;&nbsp;filename

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition20">

Definition</A></H3>

<P>

The <TT>file test</TT> operator takes one file <TT>handle</TT>

or <TT>filename</TT> as an argument. It returns <TT>1</TT> (true)

if the file is a text file. It returns <TT>''</TT> (false) if

the file is not a text file. The first characters of the file

are checked to see if the high bit is set, and if a suitable number

is not set the file is assumed to be text. If the file is empty,

true is returned. Because this test involves reading the file

itself, it is best to test to learn if the file exists as a plain

file (<TT>-f</TT>) first. All <TT>file test</TT> operators can

take a special argument underscore, which means that the test

is carried out on the same file <TT>handle</TT> as the last <TT>file

test</TT>, <TT>stat()</TT>, or <TT>lstat()</TT> call. If no argument

is supplied, <TT>$_</TT> is used.

<H3><A NAME="Example20">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

(-T &quot;/vmlinuz&quot;) ? print(&quot;-T /vmlinuz is text file\n&quot;) : 

	print(&quot;-T /vmlinuz is not text file\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="t"><FONT SIZE=5 COLOR=#FF0000>

-t</FONT></A></H2>

<H3><A NAME="Compliance21">

Compliance</A></H3>

<H3><A NAME="Syntax21">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (file test)

Arguments&nbsp;&nbsp;handle

Arguments&nbsp;&nbsp;filename

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition21">

Definition</A></H3>

<P>

The <TT>file test</TT> operator takes one file <TT>handle</TT>

or <TT>filename</TT> as an argument. It returns <TT>1</TT> (true)

if the file is a terminal tty device. It returns <TT>''</TT> (false)

if the file is not. All <TT>file test</TT> operators can take

a special argument underscore, which means that the test is carried

out on the same file <TT>handle</TT> as the last <TT>file test</TT>,

<TT>stat()</TT>, or <TT>lstat()</TT> call. If no argument is supplied,

<TT>STDIN</TT> is used.

<H3><A NAME="Example21">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

(-t &quot;/vmlinuz&quot;) ? print(&quot;-t /vmlinuz is tty\n&quot;) : 

	print(&quot;-t /vmlinuz is not tty\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="u"><FONT SIZE=5 COLOR=#FF0000>

-u</FONT></A></H2>

<H3><A NAME="Compliance22">

Compliance</A></H3>

<H3><A NAME="Syntax22">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (file test)

Arguments&nbsp;&nbsp;handle

Arguments&nbsp;&nbsp;filename

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition22">

Definition</A></H3>

<P>

The <TT>file test</TT> operator takes one file <TT>handle</TT>

or <TT>filename</TT> as an argument. It returns <TT>1</TT> (true)

if the file has the setuid bit set. It returns <TT>''</TT> (false)

if the files does not have the setuid bit set. In UNIX, setuid

allows an executable to take on the uid of the user ownership

of the executable itself while executing. All <TT>file test</TT>

operators can take a special argument underscore, which means

that the test is carried out on the same file <TT>handle</TT>

as the last <TT>file test</TT>, <TT>stat()</TT>, or <TT>lstat()</TT>

call. If no argument is supplied, <TT>$_</TT> is used.

<H3><A NAME="Example22">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

(-u &quot;/vmlinuz&quot;) ? print(&quot;-u /vmlinuz has suid set\n&quot;) : 

	print(&quot;-u /vmlinuz does not have suid set\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="W"><FONT SIZE=5 COLOR=#FF0000>

-W</FONT></A></H2>

<H3><A NAME="Compliance23">

Compliance</A></H3>

<H3><A NAME="Syntax23">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (file test)

Arguments&nbsp;&nbsp;handle

Arguments&nbsp;&nbsp;filename

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition23">

Definition</A></H3>

<P>

The <TT>file test</TT> operator takes one file <TT>handle</TT>

or <TT>filename</TT> as an argument. It returns <TT>1</TT> (true)

if the file is writable by the real uid/gid. It returns <TT>''</TT>

(false) otherwise. For the superuser it always returns true. All

<TT>file test</TT> operators can take a special argument underscore,

which means that the test is carried out on the same file <TT>handle</TT>

as the last <TT>file test</TT>, <TT>stat()</TT>, or <TT>lstat()</TT>

call. If no argument is supplied, <TT>$_</TT> is used.

<H3><A NAME="Example23">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

(-W &quot;/vmlinuz&quot;) ? print(&quot;-W /vmlinuz is writable by real uid/gid\n&quot;) : 

	print(&quot;-W /vmlinuz is not writable by real UID/GID\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="w"><FONT SIZE=5 COLOR=#FF0000>

-w</FONT></A></H2>

<H3><A NAME="Compliance24">

Compliance</A></H3>

<H3><A NAME="Syntax24">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (file test)

Arguments&nbsp;&nbsp;handle

Arguments&nbsp;&nbsp;filename

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition24">

Definition</A></H3>

<P>

The <TT>file test</TT> operator takes one file <TT>handle</TT>

or <TT>filename</TT> as an argument. It returns <TT>1</TT> (true)

if the file is writable by the effective uid/gid. It returns <TT>''</TT>

(false) otherwise. For the superuser it always returns true. All

<TT>file test</TT> operators can take a special argument underscore,

which means that the test is carried out on the same file <TT>handle</TT>

as the last <TT>file test</TT>, <TT>stat()</TT>, or <TT>lstat()</TT>

call. If no argument is supplied, <TT>$_</TT> is used.

<H3><A NAME="Example24">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

(-w &quot;/vmlinuz&quot;) ? print(&quot;-w /vmlinuz is writable by effective uid/gid\n&quot;) :

	 print(&quot;-l /vmlinuz is not writable by effective uid/gid\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="X"><FONT SIZE=5 COLOR=#FF0000>

-X</FONT></A></H2>

<H3><A NAME="Compliance25">

Compliance</A></H3>

<H3><A NAME="Syntax25">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (file test)

Arguments&nbsp;&nbsp;handle

Arguments&nbsp;&nbsp;filename

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition25">

Definition</A></H3>

<P>

The <TT>file test</TT> operator takes one file <TT>handle</TT>

or <TT>filename</TT> as an argument. It returns <TT>1</TT> (true)

if the file is executable by the real uid/gid. It returns <TT>''</TT>

(false) otherwise. For the superuser it always returns true. All

<TT>file test</TT> operators can take a special argument underscore,

which means that the test is carried out on the same file <TT>handle</TT>

as the last <TT>file test</TT>, <TT>stat()</TT>, or <TT>lstat()</TT>

call. If no argument is supplied, <TT>$_</TT> is used.

<H3><A NAME="Example25">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

(-X _) ? print(&quot;-X /bin/ls is executable by real uid/gid\n&quot;) : 

	print(&quot;-X /bin/ls is not executable by real uid/gid\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="x"><FONT SIZE=5 COLOR=#FF0000>

-x</FONT></A></H2>

<H3><A NAME="Compliance26">

Compliance</A></H3>

<H3><A NAME="Syntax26">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (file test)

Arguments&nbsp;&nbsp;handle

Arguments&nbsp;&nbsp;filename

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition26">

Definition</A></H3>

<P>

The <TT>file test</TT> operator takes one file <TT>handle</TT>

or <TT>filename</TT> as an argument. It returns <TT>1</TT> (true)

if the file is executable by the effective uid/gid. It returns

<TT>''</TT> (false) otherwise. For the superuser it always returns

true. All <TT>file test</TT> operators can take a special argument

underscore, which means that the test is carried out on the same

file <TT>handle</TT> as the last <TT>file test</TT>, <TT>stat()</TT>,

or <TT>lstat()</TT> call. If no argument is supplied, <TT>$_</TT>

is used.

<H3><A NAME="Example26">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

(-x &quot;/bin/ls&quot;) ? print(&quot;-x /bin/ls is executable by effective uid/gid\n&quot;) : 

	print(&quot;-x /bin/ls is not executable by effective uid/gid\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="z"><FONT SIZE=5 COLOR=#FF0000>

-z</FONT></A></H2>

<H3><A NAME="Compliance27">

Compliance</A></H3>

<H3><A NAME="Syntax27">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (file test)

Arguments&nbsp;&nbsp;handle

Arguments&nbsp;&nbsp;filename

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition27">

Definition</A></H3>

<P>

The <TT>file test</TT> operator takes one file <TT>handle</TT>

or <TT>filename</TT> as an argument. It returns <TT>1</TT> (true)

if the file has zero size. It returns <TT>''</TT> (false) otherwise.

All <TT>file test</TT> operators can take a special argument underscore,

which means that the test is carried out on the same file <TT>handle</TT>

as the last <TT>file test</TT>, <TT>stat()</TT> or <TT>lstat()</TT>

call. If no argument is supplied, <TT>$_</TT> is used.

<H3><A NAME="Example27">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

(-z &quot;/vmlinuz&quot;) ? print(&quot;-z /vmlinuz has zero size\n&quot;) : 

	print(&quot;-z /vmlinuz does not have zero size\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="abs"><FONT SIZE=5 COLOR=#FF0000>

abs</FONT></A></H2>

<H3><A NAME="Compliance28">

Compliance</A></H3>

<H3><A NAME="Syntax28">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (numeric)

Arguments&nbsp;&nbsp;numeric value

Return Value&nbsp;&nbsp;numeric

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition28">

Definition</A></H3>

<P>

This function returns the absolute value of its argument (it ignores

any sign).

<H3><A NAME="Example28">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;abs(-10) = &quot;,abs(-10),&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="accept"><FONT SIZE=5 COLOR=#FF0000>

accept</FONT></A></H2>

<H3><A NAME="Compliance29">

Compliance</A></H3>

<H3><A NAME="Syntax29">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (socket)

Arguments&nbsp;&nbsp;newsocket, genericsocket

Return Value&nbsp;&nbsp;integer (address of socket), '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition29">

Definition</A></H3>

<P>

This function performs the low-level UNIX socket call <TT>accept()</TT>.

<H2><A NAME="alarm"><FONT SIZE=5 COLOR=#FF0000>

alarm</FONT></A></H2>

<H3><A NAME="Compliance30">

Compliance</A></H3>

<H3><A NAME="Syntax30">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (process)

Arguments&nbsp;&nbsp;integer (seconds)

Return Value&nbsp;&nbsp;integer (seconds to previous alarm)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition30">

Definition</A></H3>

<P>

This function sets up a UNIX <TT>SIGALRM</TT> signal to be generated

in the number of seconds specified. It is possible for Perl to

trap such signals by calling specific signal handling subroutines,

such as <TT>trap()</TT>. Subseqent calls reset the <TT>alarm()</TT>

time, retaining the number of seconds which were needed before

the previous <TT>SIGALRM</TT> would have been generated. A call

with zero seconds as an argument cancels the current <TT>alarm()</TT>.

<H3><A NAME="Example29">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;alarm(10) &quot;,alarm(10),

&quot; (to illustrate it needs to trapped c.f. trap)\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="atan"><FONT SIZE=5 COLOR=#FF0000>

atan2</FONT></A></H2>

<H3><A NAME="Compliance31">

Compliance</A></H3>

<H3><A NAME="Syntax31">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (numeric)

Arguments&nbsp;&nbsp;numeric, numeric

Return Value&nbsp;&nbsp;numeric

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition31">

Definition</A></H3>

<P>

The <TT>atan2</TT> function returns the arctangent of the arguments.

<H3><A NAME="Example30">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;atan2(60,2) = &quot;,atan2(60,2),&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="bind"><FONT SIZE=5 COLOR=#FF0000>

bind</FONT></A></H2>

<H3><A NAME="Compliance32">

Compliance</A></H3>

<H3><A NAME="Syntax32">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (socket)

Arguments&nbsp;&nbsp;sockethandle, numeric (network address)

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition32">

Definition</A></H3>

<P>

This function binds a network address to the socket handle, see

the UNIX <TT>bind()</TT> call.

<H2><A NAME="binmode"><FONT SIZE=5 COLOR=#FF0000>

binmode</FONT></A></H2>

<H3><A NAME="Compliance33">

Compliance</A></H3>

<H3><A NAME="Syntax33">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (i/o)

Arguments&nbsp;&nbsp;handle

Return Value&nbsp;&nbsp;1 (success) or undefined (error)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition33">

Definition</A></H3>

<P>

On systems that distinguish between text and binary files, this

function forces binary mode treatment of the given file <TT>handle</TT>.

In systems which do make the distinction, text files have the

end of line characters (Carriage Return, Linefeed) automatically

translated to the UNIX end of line character (Linefeed) when reading

from the file (and vice versa when writing to the file); binary

mode files do not have this automatic transformation.

<H3><A NAME="Example31">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

open(FIL,&quot;file.dat&quot;);

binmode(FIL);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="bless"><FONT SIZE=5 COLOR=#FF0000>

bless</FONT></A></H2>

<H3><A NAME="Compliance34">

Compliance</A></H3>

<H3><A NAME="Syntax34">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (class)

Arguments&nbsp;&nbsp;variable

Arguments&nbsp;&nbsp;variable, classname

Return Value&nbsp;&nbsp;reference

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition34">

Definition</A></H3>

<P>

This function assigns a class to the referenced object. This class

is either explicitly stated in the call, or the name of the current

package is used if a second argument is not used in the call.

The reference is returned.<BR>

<P>

<CENTER>

<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>

<TR VALIGN=TOP><TD><B>TIP</B></TD></TR>

<TR VALIGN=TOP><TD>

<BLOCKQUOTE>

Explictly state the class (use the two-argument version of the call) if the code can be inherited by other classes, because the class in the single-argument call would not return the required value.</BLOCKQUOTE>



</TD></TR>

</TABLE></CENTER>

<P>

<H3><A NAME="Example32">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

$tmp = {};

bless $tmp, ATMPCLASS;

print &quot;bless() \$tmp is now in class &quot;,ref($tmp),&quot;\n&quot;;

</PRE>

</BLOCKQUOTE>

<H2><A NAME="caller"><FONT SIZE=5 COLOR=#FF0000>

caller</FONT></A></H2>

<H3><A NAME="Compliance35">

Compliance</A></H3>

<H3><A NAME="Syntax35">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (scope)

Arguments&nbsp;&nbsp;expression

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

Return Value&nbsp;&nbsp;(package, filename, line)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition35">

Definition</A></H3>

<P>

This function is used to test the current scope of a subroutine

call. If evaluated in a scalar context, it returns <TT>1</TT>

or <TT>''</TT> depending on if the current code has been called

as a subroutine (this includes code which is included using a

<TT>require()</TT> or an <TT>eval()</TT> call). In an array context

it supplies details of the calling context in a list comprising

the <TT>package</TT> name, <TT>filename</TT>, and <TT>line</TT>

of the call.

<H3><A NAME="Example33">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

sub testcaller {

    ($package, $file, $line) = caller;

}

&amp;testcaller;

print &quot;caller() Package=$package File=$file Line=$line \n&quot;;

</PRE>

</BLOCKQUOTE>

<H2><A NAME="chdir"><FONT SIZE=5 COLOR=#FF0000>

chdir</FONT></A></H2>

<H3><A NAME="Compliance36">

Compliance</A></H3>

<H3><A NAME="Syntax36">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (files)

Arguments&nbsp;&nbsp;expression

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition36">

Definition</A></H3>

<P>

This function changes the current directory to the directory specified.

If no argument is given this call changes the current directory

to be the home directory of the current user. It returns <TT>1</TT>

upon success and <TT>''</TT> otherwise.

<H3><A NAME="Example34">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

chdir(&quot;/&quot;) ? print(&quot;It worked.\n&quot;) : print(&quot;It didn't work.\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="chmod"><FONT SIZE=5 COLOR=#FF0000>

chmod</FONT></A></H2>

<H3><A NAME="Compliance37">

Compliance</A></H3>

<H3><A NAME="Syntax37">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (files)

Arguments&nbsp;&nbsp;list

Return Value&nbsp;&nbsp;numeric

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition37">

Definition</A></H3>

<P>

The first element in the list is the UNIX octal number representing

the file permission. This function applies the mode specified

by the octal number to all the files in the list that follows.

It returns the number of files successfully modified.

<H3><A NAME="Example35">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print &quot;chmod() changed &quot;,

chmod(0744,&quot;/tmp/test1.txt&quot;,&quot;/tmp/test2.txt&quot;),&quot; files.\n&quot;;

</PRE>

</BLOCKQUOTE>

<H2><A NAME="chomp"><FONT SIZE=5 COLOR=#FF0000>

chomp</FONT></A></H2>

<H3><A NAME="Compliance38">

Compliance</A></H3>

<H3><A NAME="Syntax38">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (string)

Arguments&nbsp;&nbsp;list

Arguments&nbsp;&nbsp;variable

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;numeric

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition38">

Definition</A></H3>

<P>

This is an alternative to the <TT>chop()</TT> function. It removes

characters at the end of strings corresponding to the <TT>$INPUT_LINE_SEPARATOR</TT>

(<TT>$/</TT>). It returns the number of characters removed. It

can be given a list of strings upon which to perform this operation.

When given no arguments, the operation is performed on <TT>$_</TT>.

<H3><A NAME="Example36">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

$tmp=&quot;Aaagh!\n&quot;;

$ret = chomp $tmp;

print(&quot;chomp() &quot;, $tmp, &quot; returned &quot;, $ret, &quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="chop"><FONT SIZE=5 COLOR=#FF0000>

chop</FONT></A></H2>

<H3><A NAME="Compliance39">

Compliance</A></H3>

<H3><A NAME="Syntax39">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (string)

Arguments&nbsp;&nbsp;list

Arguments&nbsp;&nbsp;variable

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;character

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition39">

Definition</A></H3>

<P>

This function removes the last character of a string and returns

that character. If given a list of arguments, the operation is

performed on each one and the last character chopped is returned.

<H3><A NAME="Example37">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

$tmp = &quot;1234&quot;;

$ret = chop $tmp;

print(&quot;chop() &quot;, $tmp, &quot; returned &quot;, $ret, &quot;\n&quot;);

<BR>

</PRE>

</BLOCKQUOTE>

<P>

<CENTER>

<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>

<TR VALIGN=TOP><TD><B>TIP</B></TD></TR>

<TR VALIGN=TOP><TD>

<BLOCKQUOTE>

Use <TT>chomp()</TT> (with <TT>$/</TT> set to <TT>&quot;\n&quot;</TT>) rather than <TT>chop()</TT> if you are unsure that the string has a trailing newline because <TT>chop()</TT> will remove the last character regardless, but <TT>chomp()</TT>only removes 
it if it is a newline.

</BLOCKQUOTE>



</TD></TR>

</TABLE></CENTER>

<P>

<H2><A NAME="chown"><FONT SIZE=5 COLOR=#FF0000>

chown</FONT></A></H2>

<H3><A NAME="Compliance40">

Compliance</A></H3>

<H3><A NAME="Syntax40">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (files)

Arguments&nbsp;&nbsp;list

Return Value&nbsp;&nbsp;numeric

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition40">

Definition</A></H3>

<P>

This function changes the ownership of the specified files. The

first two elements of the list define the user ID and the group

ID to set this ownership; the subsequent items in the list are

the file names that are changed. The return value is the number

of files successfully changed.

<H3><A NAME="Example38">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;chown() &quot;); 

chown(1,1,&quot;/tmp/test1.txt&quot;) ? print(&quot;Worked\n&quot;) : print(&quot;Didn't work\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="chr"><FONT SIZE=5 COLOR=#FF0000>

chr</FONT></A></H2>

<H3><A NAME="Compliance41">

Compliance</A></H3>

<H3><A NAME="Syntax41">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (string)

Arguments&nbsp;&nbsp;numeric

Return Value&nbsp;&nbsp;character

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition41">

Definition</A></H3>

<P>

This function returns the character indicated by the numeric argument.

<H3><A NAME="Example39">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

$E = chr(69);

print(&quot;chr() $E \n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="chroot"><FONT SIZE=5 COLOR=#FF0000>

chroot</FONT></A></H2>

<H3><A NAME="Compliance42">

Compliance</A></H3>

<H3><A NAME="Syntax42">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (files)

Arguments&nbsp;&nbsp;directoryname

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition42">

Definition</A></H3>

<P>

This function is equivalent to the UNIX <TT>chroot()</TT> function.

Given a directory name, this directory is treated as the root

directory by all subseqent file system references, thus effectively

hiding the rest of the file system outside the specified directory.

This restriction applies to all subprocesses of the current process

as well.<BR>

<P>

<CENTER>

<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>

<TR VALIGN=TOP><TD><B>TIP</B></TD></TR>

<TR VALIGN=TOP><TD>

<BLOCKQUOTE>

Normal UNIX security limits this function to the superuser, and it is normally used to make processes safer by only allowing them access to the subdirectory tree relevant to their purpose.</BLOCKQUOTE>



</TD></TR>

</TABLE></CENTER>

<P>

<H3><A NAME="Example40">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;chroot() &quot;);

chroot(&quot;/&quot;) ? print(&quot;Worked.\n&quot;) : print(&quot;Didn't work.\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="close"><FONT SIZE=5 COLOR=#FF0000>

close</FONT></A></H2>

<H3><A NAME="Compliance43">

Compliance</A></H3>

<H3><A NAME="Syntax43">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (files)

Arguments&nbsp;&nbsp;handle

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition43">

Definition</A></H3>

<P>

This function closes the file opened with the file <TT>handle</TT>.

This operation flushes all buffered output. If the file <TT>handle</TT>

refers to a pipe, the Perl program waits until the process being

piped has finished.

<H3><A NAME="Example41">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

open(INF,&quot;/tmp/test1.txt&quot;);

$ret = close(INF);

print(&quot;close() Returned &quot;,$ret,&quot; on success\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="closedir"><FONT SIZE=5 COLOR=#FF0000>

closedir</FONT></A></H2>

<H3><A NAME="Compliance44">

Compliance</A></H3>

<H3><A NAME="Syntax44">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (file)

Arguments&nbsp;&nbsp;handle

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition44">

Definition</A></H3>

<P>

This function closes the directory opened by <TT>opendir()</TT>

by specifying the relevant directory <TT>handle</TT>.

<H3><A NAME="Example42">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

opendir(IND,&quot;/tmp&quot;);

$ret = closedir(IND);

print(&quot;closedir() Returned &quot;,$ret,&quot; on success\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="connect"><FONT SIZE=5 COLOR=#FF0000>

connect</FONT></A></H2>

<H3><A NAME="Compliance45">

Compliance</A></H3>

<H3><A NAME="Syntax45">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (socket)

Arguments&nbsp;&nbsp;socket, name

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition45">

Definition</A></H3>

<P>

This function is equivalent to the UNIX function call, which initiates

a connection with a process, assuming that the process that is

connected is waiting to accept.

<H2><A NAME="continue"><FONT SIZE=5 COLOR=#FF0000>

continue</FONT></A></H2>

<H3><A NAME="Compliance46">

Compliance</A></H3>

<H3><A NAME="Syntax46">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;flow control

Arguments&nbsp;&nbsp;block

Return Value&nbsp;&nbsp;n/a

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition46">

Definition</A></H3>

<P>

A <TT>continue</TT> block is a syntax structure that allows a

condition to be attached to another block (normally a <TT>while</TT>

block). Any statements in the <TT>continue</TT> block are evaluated

before the attached block is repeated.

<H3><A NAME="Example43">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

$i=0;

print &quot;continue() &quot;;

while ($i&lt;10) {

      if ($i % 2)

         { print &quot;${i}o &quot;; next; }

      else

         {print &quot;${i}e &quot;;}

} continue {$i++}

print &quot;\n&quot;;

</PRE>

</BLOCKQUOTE>

<H2><A NAME="cos"><FONT SIZE=5 COLOR=#FF0000>

cos</FONT></A></H2>

<H3><A NAME="Compliance47">

Compliance</A></H3>

<H3><A NAME="Syntax47">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (numeric)

Arguments&nbsp;&nbsp;expression

Return Value&nbsp;&nbsp;numeric

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition47">

Definition</A></H3>

<P>

This function returns the cosine value of the numeric expression

supplied as an argument.

<H3><A NAME="Example44">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print &quot;cos() &quot;,cos(60),&quot;\n&quot;;

</PRE>

</BLOCKQUOTE>

<H2><A NAME="crypt"><FONT SIZE=5 COLOR=#FF0000>

crypt</FONT></A></H2>

<H3><A NAME="Compliance48">

Compliance</A></H3>

<H3><A NAME="Syntax48">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator

Arguments&nbsp;&nbsp;string, string

Return Value&nbsp;&nbsp;string

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition48">

Definition</A></H3>

<P>

This function is equivalent to the <TT>crypt()</TT> UNIX call

(where available). It encrypts a <TT>string</TT> (the first argument)

using a key (usually the first two letters of the first <TT>string</TT>

itself) and returns the encrypted <TT>string</TT>.

<H3><A NAME="Example45">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print &quot;crypt() Password PA: &quot;,crypt(&quot;Password&quot;,&quot;PA&quot;),&quot;\n&quot;;

</PRE>

</BLOCKQUOTE>

<H2><A NAME="dbmclose"><FONT SIZE=5 COLOR=#FF0000>

dbmclose</FONT></A></H2>

<H3><A NAME="Compliance49">

Compliance</A></H3>

<H3><A NAME="Syntax49">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (i/o)

Arguments&nbsp;&nbsp;arrayname

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition49">

Definition</A></H3>

<P>

This function undoes the linking of an associative array to a

dbm file (see <TT>dbmopen()</TT>).<BR>

<P>

<CENTER>

<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>

<TR VALIGN=TOP><TD><B>NOTE</B></TD></TR>

<TR VALIGN=TOP><TD>

<BLOCKQUOTE>

This is depreciated in Perl 5; use <TT>untie()</TT> instead.

</BLOCKQUOTE>



</TD></TR>

</TABLE></CENTER>

<P>

<H2><A NAME="dbmopen"><FONT SIZE=5 COLOR=#FF0000>

dbmopen</FONT></A></H2>

<H3><A NAME="Compliance50">

Compliance</A></H3>

<H3><A NAME="Syntax50">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (i/o)

Arguments&nbsp;&nbsp;arrayname, dbname, mode

Return Value&nbsp;&nbsp;fatal error if dbm not supported (Perl 4)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition50">

Definition</A></H3>

<P>

This function links the associative array referred to by <TT>arrayname,</TT>

to the dbm database (or equivalent) referred to by <TT>dbname</TT>

(this name should not include the suffix). If the database does

not exist, a new one with the specified mode will be opened (the

mode being an octal <TT>chmod()</TT> style file protection).

<P>

This is depreciated in Perl 5; use <TT>tie()</TT> instead.

<H2><A NAME="defined"><FONT SIZE=5 COLOR=#FF0000>

defined</FONT></A></H2>

<H3><A NAME="Compliance51">

Compliance</A></H3>

<H3><A NAME="Syntax51">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (misc)

Arguments&nbsp;&nbsp;expression

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition51">

Definition</A></H3>

<P>

This function returns a Boolean value depending on whether the

argument is defined or not. There is a subtle distinction between

an undefined and a defined null value. Some functions return an

undefined null to indicate errors, while others return a defined

null to indicate a particular result (use a comparison with the

null string to test for this, rather than using <TT>defined()</TT>)

<H3><A NAME="Example46">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

@iexist = (1,2,3);

print(&quot;defined() The array \@iexist &quot;);

defined @iexist ? print(&quot;exists.\n&quot;) : print(&quot;does not exist.\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="delete"><FONT SIZE=5 COLOR=#FF0000>

delete</FONT></A></H2>

<H3><A NAME="Compliance52">

Compliance</A></H3>

<H3><A NAME="Syntax52">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (hash)

Arguments&nbsp;&nbsp;expression

Return Value&nbsp;&nbsp;value

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition52">

Definition</A></H3>

<P>

Use this function to delete an element from a hash array, given

the key for the element to delete, returning the value of the

deleted element.

<H3><A NAME="Example47">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

%Hash = (1, One, 2, Two, 3, Three);

print(&quot;delete() Deleted &quot;,delete($Hash{1}),&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="die"><FONT SIZE=5 COLOR=#FF0000>

die</FONT></A></H2>

<H3><A NAME="Compliance53">

Compliance</A></H3>

<H3><A NAME="Syntax53">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (i/o)

Arguments&nbsp;&nbsp;list

Return Value&nbsp;&nbsp;errorlevel

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition53">

Definition</A></H3>

<P>

This function terminates execution of the Perl script when called

printing the value of the <TT>list</TT> argument to <TT>STDERR</TT>

(as if called with <TT>print(STDERR, list)</TT>). The exit value

is the current value of <TT>$OS_ERROR ($!)</TT>, which may have

been set by a previous function. If this has a value of zero it

returns <TT>$CHILD_ERROR ($?)</TT>. If this is zero, it exits

with <TT>errorlevel</TT> 255. If the error message string specified

by the list does not end in a newline, the text <TT>&quot;at $PROGRAM_NAME

at line line</TT>, where <TT>line</TT> is the line number of the

Perl script.

<H3><A NAME="Example48">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

die(&quot;die() Now we can give an example of die()...exiting&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="do"><FONT SIZE=5 COLOR=#FF0000>

do</FONT></A></H2>

<H3><A NAME="Compliance54">

Compliance</A></H3>

<H3><A NAME="Syntax54">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;(flow)

Arguments&nbsp;&nbsp;block

Arguments&nbsp;&nbsp;subroutine(list)

Arguments&nbsp;&nbsp;expression

Return Value&nbsp;&nbsp;special

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition54">

Definition</A></H3>

<P>

This is a syntax structure that allows repeated execution of a

block of statements. The value returned is the result of the last

statement in the block. Normally an exit condition is supplied

after the <TT>block</TT>. The second form where the argument is

<TT>subroutine()</TT> is a depreciated form. The third form executes

the contents of the file name specified by the expression (but

it is better to use <TT>use()</TT> or <TT>require()</TT> instead,

because this has better error checking).

<H3><A NAME="Example49">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

$i=1;

print(&quot;do &quot;);

$return = do {

  print $i, &quot; &quot;;

  $i++;

} until $i==3;

print(&quot;Returned $return\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="dump"><FONT SIZE=5 COLOR=#FF0000>

dump</FONT></A></H2>

<H3><A NAME="Compliance55">

Compliance</A></H3>

<H3><A NAME="Syntax55">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (misc)

Arguments&nbsp;&nbsp;label

Return Value&nbsp;&nbsp;N/A

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition55">

Definition</A></H3>

<P>

This function causes the program to create a binary image core

dump. This then allows the dumped image to be reloaded using the

<TT>undump()</TT> function (if supported) which can effectively

allow the use of precompiled Perl images. When reloaded, the program

begins execution from the <TT>label</TT> specified. It is possible

to set up a program which initializes data structures to <TT>dump()</TT>

after the initialization so that execution is faster when reloading

the dumped image.

<H2><A NAME="each"><FONT SIZE=5 COLOR=#FF0000>

each</FONT></A></H2>

<H3><A NAME="Compliance56">

Compliance</A></H3>

<H3><A NAME="Syntax56">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (hash)

Arguments&nbsp;&nbsp;variable

Return Value&nbsp;&nbsp;key, value

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition56">

Definition</A></H3>

<P>

This function allows iteration over the elements in an associative

array. Each time it is evaluated, it returns another list of two

elements (a <TT>key</TT>, value pair from the associative array).

When all the elements have been returned, it returns a null list.

<H3><A NAME="Example50">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

%NumberWord = (1, One, 2, Two, 3, Three);

print(&quot;each() &quot;);

while (($number,$wordform)=each(%NumberWord)) {

  print(&quot;$number:$wordform &quot;);

}

print(&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="endgrent"><FONT SIZE=5 COLOR=#FF0000>

endgrent</FONT></A></H2>

<H3><A NAME="Compliance57">

Compliance</A></H3>

<H3><A NAME="Syntax57">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;(system files)

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition57">

Definition</A></H3>

<P>

This function closes the <TT>/etc/group</TT> file used by <TT>getgrent()</TT>

and other group-related functions. It is equivalent to the UNIX

system call.

<H3><A NAME="Example51">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

($name,$pw,$gid,@members)=getgrent();

$returned = endgrent();

print(&quot;endgrent() Closes /etc/group [$name,$gid]&quot;,

	&quot; file returning $returned.\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="endhostent"><FONT SIZE=5 COLOR=#FF0000>

endhostent</FONT></A></H2>

<H3><A NAME="Compliance58">

Compliance</A></H3>

<H3><A NAME="Syntax58">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;(system files)

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition58">

Definition</A></H3>

<P>

This function closes the TCP socket used by name server queries

<TT>gethostbyname()</TT> and host- related functions. It is equivalent

to the UNIX system call.

<H3><A NAME="Example52">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

$host = gethostbyname(&quot;lynch&quot;);

$returned = endhostent();

print(&quot;endhostent() Closes /etc/hosts [$host]&quot;,

	&quot; returning $returned.\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="endnetent"><FONT SIZE=5 COLOR=#FF0000>

endnetent</FONT></A></H2>

<H3><A NAME="Compliance59">

Compliance</A></H3>

<H3><A NAME="Syntax59">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;(system files)

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition59">

Definition</A></H3>

<P>

This function closes the <TT>/etc/networks</TT> file used by <TT>getnetent()</TT>

and network-related functions. This function is equivalent to

the UNIX system call.

<H3><A NAME="Example53">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

($name,$alias,$net,$net) = getnetent();

$returned = endnetent();

print(&quot;endnetent() Closes /etc/networks [$name]&quot;,

	&quot; returning $returned.\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="endprotoent"><FONT SIZE=5 COLOR=#FF0000>

endprotoent</FONT></A></H2>

<H3><A NAME="Compliance60">

Compliance</A></H3>

<H3><A NAME="Syntax60">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;(system files)

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition60">

Definition</A></H3>

<P>

This function closes the <TT>/etc/protocols</TT> file used by

<TT>getprotoent()</TT> and protocol-related functions. It is equivalent

to the UNIX system call.

<H3><A NAME="Example54">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

($name, $alias, $protocol) = getprotoent();

$returned = endprotoent();

print(&quot;endprotoent() Closes /etc/protocols &quot;,

	&quot;[$name,$alias,$protocol] file returning $returned.\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="endpwent"><FONT SIZE=5 COLOR=#FF0000>

endpwent</FONT></A></H2>

<H3><A NAME="Compliance61">

Compliance</A></H3>

<H3><A NAME="Syntax61">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;(system files)

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition61">

Definition</A></H3>

<P>

This function closes the <TT>/etc/passwd</TT> file used by <TT>getpwent()</TT>

and password-related functions. It is equivalent to the UNIX system

call.

<H3><A NAME="Example55">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

($name,$pass,$uid,$gid,$quota,$name,$gcos,$logindir,$shell) = getpwent();

$returned = endpwent();

print(&quot;endpwent() Closes /etc/passwd [$logindir,$shell] &quot;,

	&quot;file returning $returned.\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="endservent"><FONT SIZE=5 COLOR=#FF0000>

endservent</FONT></A></H2>

<H3><A NAME="Compliance62">

Compliance</A></H3>

<H3><A NAME="Syntax62">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;(system files)

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition62">

Definition</A></H3>

<P>

This function closes the <TT>/etc/servers</TT> file used by <TT>getservent()</TT>

and related functions. It is equivalent to the UNIX system call.

<H3><A NAME="Example56">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

($name,$aliases,$port,$protocol) = getservent();

$returned = endservent();

print(&quot;endservent() Closes /etc/servers [$name]&quot;,

	&quot; file returning $returned.\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="eof"><FONT SIZE=5 COLOR=#FF0000>

eof</FONT></A></H2>

<H3><A NAME="Compliance63">

Compliance</A></H3>

<H3><A NAME="Syntax63">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (i/o)

Arguments&nbsp;&nbsp;handle

Arguments&nbsp;&nbsp;()

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition63">

Definition</A></H3>

<P>

This function tests if the file pointer to file specified by the

file <TT>handle</TT> is at the end of the file. This is done by

reading the next character and then undoing this operation (so

is only suitable on files where this can be done safely). If no

argument is supplied the file tested is the last file that was

read. If the empty list is supplied then this tests if all the

last files that supplied an argument to the Perl script are <TT>eof()</TT>

(that is, it can be used as a termination condition in a <TT>while</TT>

loop).

<H3><A NAME="Example57">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

open INF, &quot;/tmp/test1.txt&quot;;

if (eof INF) 

  {print &quot;eof() TRUE\n&quot;;}

else

  {print &quot;eof() FALSE\n&quot;;}

close INF;

</PRE>

</BLOCKQUOTE>

<H2><A NAME="eval"><FONT SIZE=5 COLOR=#FF0000>

eval</FONT></A></H2>

<H3><A NAME="Compliance64">

Compliance</A></H3>

<H3><A NAME="Syntax64">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (flow)

Arguments&nbsp;&nbsp;expression

Arguments&nbsp;&nbsp;block

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;special

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition64">

Definition</A></H3>

<P>

This function treats the expression like a Perl program and executes

it by returning the <TT>return value</TT> of the last statement

executed. As the context of this execution is the same as that

of the script itself, variable definitions and subroutine definitions

persist. Syntax errors and runtime errors (including <TT>die()</TT>)

are trapped and an undefined result is returned. If such an error

does occur, <TT>$EVAL_ERROR ($@)</TT> is set. If no errors are

found, <TT>$@</TT> is equal to a defined null string. If no expression

is supplied, <TT>$_</TT> is the default argument. If the block

syntax is used, the expressions in the block are evaluated only

once within the script, which may be more efficient for certain

situations.<BR>

<P>

<CENTER>

<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>

<TR VALIGN=TOP><TD><B>TIP</B></TD></TR>

<TR VALIGN=TOP><TD>

<BLOCKQUOTE>

<TT>eval()</TT> traps possible error conditions that would otherwise crash a program. Therefore, it can be used to test if certain features are available that would cause runtime errors if used when not available.

</BLOCKQUOTE>



</TD></TR>

</TABLE></CENTER>

<P>

<H3><A NAME="Example58">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

$ans = 3;

eval &quot;$ans = ;&quot;;

if ($@ eq &quot;&quot;)

  {print &quot;eval() returned success.\n&quot;;}

else

  {print &quot;eval() error: $@&quot;;}

</PRE>

</BLOCKQUOTE>

<H2><A NAME="exec"><FONT SIZE=5 COLOR=#FF0000>

exec</FONT></A></H2>

<H3><A NAME="Compliance65">

Compliance</A></H3>

<H3><A NAME="Syntax65">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (process)

Arguments&nbsp;&nbsp;list

Return Value&nbsp;&nbsp;N/A

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition65">

Definition</A></H3>

<P>

This function passes control from the script to an external system

command. There is no retain from this call so there is no return

value. Note that <TT>system()</TT> calls external commands and

does return to the next line in the calling Perl program.

<P>

This is equivalent to the UNIX system call <TT>execvp()</TT>.

<H3><A NAME="Example59">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

exec(&quot;cat /etc/motd&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="exists"><FONT SIZE=5 COLOR=#FF0000>

exists</FONT></A></H2>

<H3><A NAME="Compliance66">

Compliance</A></H3>

<H3><A NAME="Syntax66">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (hash)

Arguments&nbsp;&nbsp;expression

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition66">

Definition</A></H3>

<P>

This function tests if a given key value exists in an associative

array, returning a Boolean value.

<H3><A NAME="Example60">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

%test = ( One, 1, Two, 2);

if (exists $test{One}) 

  {print &quot;exists() returned success.\n&quot;;}

else

  {print &quot;exists() returned an error.\n&quot;;}

</PRE>

</BLOCKQUOTE>

<H2><A NAME="exit"><FONT SIZE=5 COLOR=#FF0000>

exit</FONT></A></H2>

<H3><A NAME="Compliance67">

Compliance</A></H3>

<H3><A NAME="Syntax67">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (flow)

Arguments&nbsp;&nbsp;expression

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;value

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition67">

Definition</A></H3>

<P>

This function evaluates the expression given as an argument and

exits the program with that error. The default value for the error

is 0 if no argument is supplied. Note that <TT>die()</TT> allows

an error message.

<H3><A NAME="Example61">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

exit(16);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="exp"><FONT SIZE=5 COLOR=#FF0000>

exp</FONT></A></H2>

<H3><A NAME="Compliance68">

Compliance</A></H3>

<H3><A NAME="Syntax68">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (numeric)

Arguments&nbsp;&nbsp;expression

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;numeric

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition68">

Definition</A></H3>

<P>

This function returns the natural log base (<TT>e</TT>) to the

power of expression (or of <TT>$_</TT> if none specified).

<H3><A NAME="Example62">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print &quot;exp() e**1 is &quot;,exp(1),&quot;\n&quot;;

</PRE>

</BLOCKQUOTE>

<H2><A NAME="fcntl"><FONT SIZE=5 COLOR=#FF0000>

fcntl</FONT></A></H2>

<H3><A NAME="Compliance69">

Compliance</A></H3>

<H3><A NAME="Syntax69">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (i/o)

Arguments&nbsp;&nbsp;handle, function, packed_parameters

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition69">

Definition</A></H3>

<P>

This function is equivalent to the UNIX <TT>fnctl()</TT> call.

In Perl 5, use the <TT>fntcl</TT> module. In Perl 4, there should

be some mechanism for linking the Perl functions to the system

functions. This is usually executed when Perl is installed.

<H2><A NAME="fileno"><FONT SIZE=5 COLOR=#FF0000>

fileno</FONT></A></H2>

<H3><A NAME="Compliance70">

Compliance</A></H3>

<H3><A NAME="Syntax70">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (i/o)

Arguments&nbsp;&nbsp;handle

Return Value&nbsp;&nbsp;descriptor

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition70">

Definition</A></H3>

<P>

This function returns the file descriptor given a file <TT>handle</TT>.

<H3><A NAME="Example63">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;fileno() &quot;,fileno(INF),&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="flock"><FONT SIZE=5 COLOR=#FF0000>

flock</FONT></A></H2>

<H3><A NAME="Compliance71">

Compliance</A></H3>

<H3><A NAME="Syntax71">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (i/o)

Arguments&nbsp;&nbsp;handle, operation

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition71">

Definition</A></H3>

<P>

This calls the UNIX <TT>flock()</TT> function to access file locks.

The <TT>handle</TT> is a Perl file <TT>handle</TT>. The operation

is any valid <TT>flock()</TT> operation: place exclusive lock,

place shared lock, unlock. These operations are represented by

numeric values.

<H2><A NAME="fork"><FONT SIZE=5 COLOR=#FF0000>

fork</FONT></A></H2>

<H3><A NAME="Compliance72">

Compliance</A></H3>

<H3><A NAME="Syntax72">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;(process)

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;pid

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition72">

Definition</A></H3>

<P>

The <TT>fork</TT> function calls the UNIX <TT>fork()</TT> function

or equivalent to fork a subprocess at this point. Returns the

process ID (pid) of the child process to the calling process;

returns 0 to the child process itself. The calling program should

<TT>wait()</TT> on any child process it <TT>forks</TT> to avoid

creating zombie processes.

<H3><A NAME="Example64">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

$pid = fork;

# Child only prints this

if ($pid != 0) { 

  print(&quot;fork() Forking a process duplicates o/p: $pid \n&quot;);

}

waitpid($pid,0);

# Child exits here

if ($$ != $origpid) { die; }

</PRE>

</BLOCKQUOTE>

<H2><A NAME="format"><FONT SIZE=5 COLOR=#FF0000>

format</FONT></A></H2>

<H3><A NAME="Compliance73">

Compliance</A></H3>

<H3><A NAME="Syntax73">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category:&nbsp;&nbsp;list operator (i/o)

Arguments:&nbsp;&nbsp;format

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition73">

Definition</A></H3>

<P>

This function declares an output <TT>format</TT> specification.

These formats are used in conjunction with the <TT>write()</TT>

function to control the output of variables and text to conform

to a standard layout structure. Normally, the specification includes

some variables, specifying how many characters to output and whether

to justify these left, right, or centered. When <TT>write()</TT>

is called, the actual values of the variables are used. This is

useful for printing simple text reports and tables. The <TT>format</TT>

specification itself is terminated by a period on a line by itself.

The specification itself is in pairs of lines, the first describing

the layout, and the second describing the variables to use in

this layout.

<H3><A NAME="Example65">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

format STDOUT =

format() @&gt;&gt;&gt;&gt;&gt;&gt;&gt; @&gt;&gt;&gt;&gt;&gt;&gt;&gt; @&gt;&gt;&gt;&gt;&gt;&gt;&gt;

         $t1,     $t2,      $t3

.

$t1 = One;

$t2 = Two;

$t3 = 3;

write;

</PRE>

</BLOCKQUOTE>

<H2><A NAME="formline"><FONT SIZE=5 COLOR=#FF0000>

formline</FONT></A></H2>

<H3><A NAME="Compliance74">

Compliance</A></H3>

<H3><A NAME="Syntax74">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category:&nbsp;&nbsp; list operator (i/o)

Arguments:&nbsp;&nbsp;picture, list

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition74">

Definition</A></H3>

<P>

This function is not usually called explictly (it is an implicit

part of the <TT>format</TT> mechanism). It allows direct manipulation

of the <TT>format</TT> process by adding values to the <TT>format</TT>

accumulator (<TT>$^A</TT>).

<H3><A NAME="Example66">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

$tmp = formline &lt;&lt;'FINISH', Alpha, Beta, Gamma;

formline()  @&gt;&gt;&gt;&gt;&gt;&gt; @&gt;&gt;&gt;&gt;&gt;&gt; @&gt;&gt;&gt;&gt;&gt;&gt;

FINISH

print $^A;

</PRE>

</BLOCKQUOTE>

<H2><A NAME="getc"><FONT SIZE=5 COLOR=#FF0000>

getc</FONT></A></H2>

<H3><A NAME="Compliance75">

Compliance</A></H3>

<H3><A NAME="Syntax75">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (i/o)

Arguments&nbsp;&nbsp;handle

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;character

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition75">

Definition</A></H3>

<P>

This function returns the next character in specified file <TT>handle</TT>.

The file defaults to <TT>STDIN</TT> if none is specified. If there

are no more characters, null is returned.

<H3><A NAME="Example67">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

open INF, &quot;/etc/motd&quot;;

print &quot;getc() &quot;,getc(INF),&quot;\n&quot;;

close INF;

</PRE>

</BLOCKQUOTE>

<H2><A NAME="getgrent"><FONT SIZE=5 COLOR=#FF0000>

getgrent</FONT></A></H2>

<H3><A NAME="Compliance76">

Compliance</A></H3>

<H3><A NAME="Syntax76">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (system files)

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;name

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition76">

Definition</A></H3>

<P>

This returns the next group name (or undefined) in the <TT>/etc/group</TT>

system file. In a list context, it returns extra information taken

from this file (or null list). This function is equivalent to

the UNIX system call <TT>getgrent()</TT>.

<H3><A NAME="Example68">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

($name,$pw,$gid,@members)=getgrent();

print(&quot;getgrent() Examines /etc/group [$name,$gid] file.\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="getgrgid"><FONT SIZE=5 COLOR=#FF0000>

getgrgid</FONT></A></H2>

<H3><A NAME="Compliance77">

Compliance</A></H3>

<H3><A NAME="Syntax77">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (system files)

Arguments&nbsp;&nbsp;gid

Return Value&nbsp;&nbsp;name

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition77">

Definition</A></H3>

<P>

This function returns the next group name (or undefined) in the

<TT>/etc/group</TT> system file with the supplied group ID (<TT>gid</TT>).

In a list context it returns extra information taken from this

file (or null list). Equivalent to the UNIX system call <TT>getgrgid()</TT>.

<H3><A NAME="Example69">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

($grname,$grpw,$gid,@members) = getgrgid(0);

print(&quot;getgrgid() Returns group name given GID [$grname]\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="getgrname"><FONT SIZE=5 COLOR=#FF0000>

getgrname</FONT></A></H2>

<H3><A NAME="Compliance78">

Compliance</A></H3>

<H3><A NAME="Syntax78">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (system files)

Arguments&nbsp;&nbsp;name

Return Value&nbsp;&nbsp;gid

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition78">

Definition</A></H3>

<P>

This function returns the next group ID, <TT>gid</TT>, (or undefined)

in the <TT>/etc/group</TT> system file with the supplied group

name. In a list context, it returns extra information taken from

this file (or null list). It is equivalent to the UNIX system

call <TT>getgrname()</TT>.

<H3><A NAME="Example70">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

($grname,$grpw,$gid,@members) = getgrnam(&quot;root&quot;);

print(&quot;getgrnam() Returns group GID given name [$gid]\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="gethostbyaddr"><FONT SIZE=5 COLOR=#FF0000>

gethostbyaddr</FONT></A></H2>

<H3><A NAME="Compliance79">

Compliance</A></H3>

<H3><A NAME="Syntax79">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (system files)

Arguments&nbsp;&nbsp;address

Return Value&nbsp;&nbsp;name

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition79">

Definition</A></H3>

<P>

It returns the host <TT>name</TT>, (or undefined) in the <TT>/etc/hosts</TT>

system file (or via a Domain Name Server lookup) with the supplied

host address. In a list context, The function returns extra information

taken from this file (or null list). It is equivalent to the UNIX

system call <TT>gethostbyaddr()</TT>.

<H3><A NAME="ExamplePerlonly">

Example (Perl 5 only)</A></H3>

<BLOCKQUOTE>

<PRE>

use Socket;

@a=(140,203,7,103);

$addr=pack('C4',@a);

($name,$alias,$adrtype,$length,@address)=gethostbyaddr($addr,AF_INET);

print(&quot;gethostbyaddr() [$alias].\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="gethostbyname"><FONT SIZE=5 COLOR=#FF0000>

gethostbyname</FONT></A></H2>

<H3><A NAME="Compliance80">

Compliance</A></H3>

<H3><A NAME="Syntax80">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (system files)

Arguments&nbsp;&nbsp;name

Return Value&nbsp;&nbsp;address

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition80">

Definition</A></H3>

<P>

This function returns the host <TT>address</TT>, (or undefined)

in the <TT>/etc/hosts</TT> system file (or via a Domain Name Server

lookup) with the supplied host <TT>name</TT>. In a list context,

it returns extra information taken from this file (or null list).

This function is equivalent to the UNIX system call <TT>gethostbyname()</TT>.

<H3><A NAME="Example71">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

($name,$alias,$adrtype,$length,@address)=gethostbyname(&quot;lynch&quot;);

print(&quot;gethostbyname() [$alias].\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="gethostent"><FONT SIZE=5 COLOR=#FF0000>

gethostent</FONT></A></H2>

<H3><A NAME="Compliance81">

Compliance</A></H3>

<H3><A NAME="Syntax81">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;(system files)

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;name

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition81">

Definition</A></H3>

<P>

<TT>gethostent</TT> returns the next host <TT>name</TT>, (or undefined)

in the <TT>/etc/hosts</TT> system file (or via a Domain Name Server

lookup). In a list context, it returns extra information taken

from this file (or null list). This function is equivalent to

the UNIX system call <TT>gethostent()</TT>.

<H3><A NAME="Example72">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

($name,$alias,$adrtype,$length,@address)=gethostbyname(&quot;lynch&quot;);

print(&quot;gethostent() [$alias].\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="getlogin"><FONT SIZE=5 COLOR=#FF0000>

getlogin</FONT></A></H2>

<H3><A NAME="Compliance82">

Compliance</A></H3>

<H3><A NAME="Syntax82">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;(system files)

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;name

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition82">

Definition</A></H3>

<P>

This function returns the current login name from the <TT>/etc/utmp</TT>

system file. It is better to than the <TT>getpwuid()</TT> function

for more information on the login because the information stored

in <TT>/etc/utmp</TT> is limited.

<H3><A NAME="Example73">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print (&quot;getlogin() &quot;,getlogin(),&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="getnetbyaddr"><FONT SIZE=5 COLOR=#FF0000>

getnetbyaddr</FONT></A></H2>

<H3><A NAME="Compliance83">

Compliance</A></H3>

<H3><A NAME="Syntax83">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;(system files)

Arguments&nbsp;&nbsp;address

Return Value&nbsp;&nbsp;name

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition83">

Definition</A></H3>

<P>

<TT>getnetbyaddr</TT> returns the network <TT>name</TT> from the

<TT>/etc/networks</TT> system file given a network <TT>address</TT>.

In a list context, it returns extra information from this file.

This function is equivalent to UNIX's <TT>getnetbyaddr()</TT>

call.

<H3><A NAME="Example74">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

($name,$alias,$addrtype,$net) = getnetent();

($name,$alias,$addrtype,$net) = getnetbyaddr($net,$addrtype);

print(&quot;getnetbyaddr() Reads /etc/networks [$name]\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="getnetbyname"><FONT SIZE=5 COLOR=#FF0000>

getnetbyname</FONT></A></H2>

<H3><A NAME="Compliance84">

Compliance</A></H3>

<H3><A NAME="Syntax84">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (system files)

Arguments&nbsp;&nbsp;name

Return Value&nbsp;&nbsp;address

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition84">

Definition</A></H3>

<P>

Returns the network <TT>address</TT> from the /etc/networks system

file, given a network <TT>name</TT>. In a list, context returns

extra information from this file. Equivalent to the UNIX <TT>getnetbyname()</TT>

call.

<H3><A NAME="Example75">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

($name,$alias,$addrtype,$net) = getnetbyname(&quot;localnet&quot;);

print(&quot;getnetbyname() Reads /etc/networks [$name]\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="getnetent"><FONT SIZE=5 COLOR=#FF0000>

getnetent</FONT></A></H2>

<H3><A NAME="Compliance85">

Compliance</A></H3>

<H3><A NAME="Syntax85">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;(system files)

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;name

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition85">

Definition</A></H3>

<P>

This function returns the next network name from the <TT>/etc/networks</TT>

system file. In a list context, it returns extra information from

this file. <TT>getnetent</TT> is equivalent to the UNIX <TT>getnetent()</TT>

call.

<H3><A NAME="Example76">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

($name,$alias,$addrtype,$net) = getnetent();

print(&quot;getnetent() Reads /etc/networks [$name,$addrtype]\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="getpeername"><FONT SIZE=5 COLOR=#FF0000>

getpeername</FONT></A></H2>

<H3><A NAME="Compliance86">

Compliance</A></H3>

<H3><A NAME="Syntax86">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (socket)

Arguments&nbsp;&nbsp;socket

Return Value&nbsp;&nbsp;name

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition86">

Definition</A></H3>

<P>

<TT>getpeername</TT> is equivalent to the UNIX system <TT>getpeername()</TT>

system call.

<H2><A NAME="getpgrp"><FONT SIZE=5 COLOR=#FF0000>

getpgrp</FONT></A></H2>

<H3><A NAME="Compliance87">

Compliance</A></H3>

<H3><A NAME="Syntax87">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (process)

Arguments&nbsp;&nbsp;pid

Return Value&nbsp;&nbsp;gid

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition87">

Definition</A></H3>

<P>

This function returns the group ID (<TT>gid</TT>) of the process

with the process ID (<TT>pid</TT>).

<H3><A NAME="Example77">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;getpgrp() &quot;,getpgrp(0),&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="getppid"><FONT SIZE=5 COLOR=#FF0000>

getppid</FONT></A></H2>

<H3><A NAME="Compliance88">

Compliance</A></H3>

<H3><A NAME="Syntax88">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;(process)

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;pid

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition88">

Definition</A></H3>

<P>

<TT>getppid</TT> returns the process ID (<TT>pid</TT>) of the

parent process of the current process.

<H3><A NAME="Example78">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;getppid() &quot;,getppid(),&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="getpriority"><FONT SIZE=5 COLOR=#FF0000>

getpriority</FONT></A></H2>

<H3><A NAME="Compliance89">

Compliance</A></H3>

<H3><A NAME="Syntax89">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (process)

Arguments&nbsp;&nbsp;type, id

Return Value&nbsp;&nbsp;priority

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition89">

Definition</A></H3>

<P>

This function calls the UNIX <TT>getpriority()</TT> function.

The type is one of <TT>PRIO_PROCESS</TT>, <TT>PRIO_PGGRP</TT>,

and <TT>PRIO_USER</TT>. The <TT>id</TT> is the relevent ID for

this (<TT>pid</TT> for <TT>PRIO_PROCESS</TT>, <TT>pid</TT> for

<TT>PRIO_PGGRP</TT>, <TT>uid</TT> for <TT>PRIO_USER</TT>). If

zero is used as the <TT>id</TT>, the current process, process

group, or user is used.

<H3><A NAME="Example79">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;getpriority() &quot;,getpriority(0,0),&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="getprotobyname"><FONT SIZE=5 COLOR=#FF0000>

getprotobyname</FONT></A></H2>

<H3><A NAME="Compliance90">

Compliance</A></H3>

<H3><A NAME="Syntax90">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (system files)

Arguments&nbsp;&nbsp;name

Return Value&nbsp;&nbsp;protocol

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition90">

Definition</A></H3>

<P>

This function returns the protocol number from the <TT>/etc/protocols</TT>

system file, given the protocol name. In a list context, it returns

extra information from this file. <TT>getprotobyname</TT> is equivalent

to the UNIX <TT>getprotobyname()</TT> call.

<H3><A NAME="Example80">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

($name, $alias, $protocol) = getprotobyname(&quot;IP&quot;);

print(&quot;getprotobyname() /etc/protocols [$name,$alias,$protocol].\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="getprotobynumber"><FONT SIZE=5 COLOR=#FF0000>

getprotobynumber</FONT></A></H2>

<H3><A NAME="Compliance91">

Compliance</A></H3>

<H3><A NAME="Syntax91">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (system files)

Arguments&nbsp;&nbsp;protocol

Return Value&nbsp;&nbsp;name

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition91">

Definition</A></H3>

<P>

This function returns the <TT>protocol</TT> name from the <TT>/etc/protocols</TT>

system file, given the protocol number. In a list context, it

returns extra information from this file. <TT>getprotobynumber</TT>

is equivalent to the UNIX <TT>getprotobynumber()</TT> call.

<H3><A NAME="Example81">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

($name, $alias, $protocol) = getprotobynumber(0);

print(&quot;getprotobynumber() /etc/protocols [$name,$alias,$protocol].\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="getprotoent"><FONT SIZE=5 COLOR=#FF0000>

getprotoent</FONT></A></H2>

<H3><A NAME="Compliance92">

Compliance</A></H3>

<H3><A NAME="Syntax92">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;(system files)

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;name

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition92">

Definition</A></H3>

<P>

This returns the next protocol name from the <TT>/etc/protocols</TT>

system file. In a list context, it returns extra information from

this file. This function is equivalent to UNIX's <TT>getprotoent()</TT>

call.

<H3><A NAME="Example82">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

($name, $alias, $protocol) = getprotoent();

print(&quot;getprotoent() Closes /etc/protocols [$name,$alias,$protocol].\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="getpwent"><FONT SIZE=5 COLOR=#FF0000>

getpwent</FONT></A></H2>

<H3><A NAME="Compliance93">

Compliance</A></H3>

<H3><A NAME="Syntax93">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;(system files)

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;name

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition93">

Definition</A></H3>

<P>

<TT>getpwent</TT> returns the user <TT>name</TT> from the next

entry in the <TT>/etc/passwd</TT> system file. In a list context,

it returns extra information from this file. This function is

equivalent to the UNIX <TT>getpwent()</TT> call.

<H3><A NAME="Example83">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

($name,$pass,$uid,$gid,$quota,$name,$gcos,$logindir,$shell) = getpwent();

print(&quot;getpwent() /etc/passwd [$logindir,$shell].\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="getpwnam"><FONT SIZE=5 COLOR=#FF0000>

getpwnam</FONT></A></H2>

<H3><A NAME="Compliance94">

Compliance</A></H3>

<H3><A NAME="Syntax94">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (system files)

Arguments&nbsp;&nbsp;name

Return Value&nbsp;&nbsp;uid

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition94">

Definition</A></H3>

<P>

This function returns the user ID (<TT>uid</TT>) from the <TT>/etc/passwd</TT>

system file given the user <TT>name</TT>. In a list context, it

returns extra information from this file. It is equivalent to

the UNIX <TT>getpwnam()</TT> call.

<H3><A NAME="Example84">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

($name,$pass,$uid,$gid,$quota,$name,$gcos,$logindir,$shell) 

	= getpwnam(&quot;root&quot;);

print(&quot;getpwnam() /etc/passwd [$logindir,$shell].\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="getpwuid"><FONT SIZE=5 COLOR=#FF0000>

getpwuid</FONT></A></H2>

<H3><A NAME="Compliance95">

Compliance</A></H3>

<H3><A NAME="Syntax95">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (system files)

Arguments&nbsp;&nbsp;uid

Return Value&nbsp;&nbsp;name

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition95">

Definition</A></H3>

<P>

<TT>getpwiud</TT> returns the user <TT>name</TT> from the <TT>/etc/passwd</TT>

system file given the user ID (<TT>uid</TT>). In a list context,

<TT>getpwuid</TT> returns extra information from this file. This

function is equivalent to the UNIX <TT>getpwnam()</TT> call.

<H3><A NAME="Example85">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

($name,$pass,$uid,$gid,$quota,$name,$gcos,$logindir,$shell) 

	= getpwuid(0);

print(&quot;getpwuid() /etc/passwd [$logindir,$shell].\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="getservbyname"><FONT SIZE=5 COLOR=#FF0000>

getservbyname</FONT></A></H2>

<H3><A NAME="Compliance96">

Compliance</A></H3>

<H3><A NAME="Syntax96">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (system files)

Arguments&nbsp;&nbsp;name, protocol

Return Value&nbsp;&nbsp;port

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition96">

Definition</A></H3>

<P>

<TT>getservbyname</TT> returns the port number of the service

from the <TT>/etc/services</TT> system file given the <TT>service

name</TT> and the <TT>protocol name</TT>. In a list context, it

 returns extra information from this file. This function is equivalent

to UNIX's <TT>getservbyname()</TT> call.

<H3><A NAME="Example86">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

($name,$aliases,$port,$protocol) = getservbyname(&quot;tcpmux&quot;,&quot;tcp&quot;);

print(&quot;getservbyname() /etc/servers [$name].\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="getservbyport"><FONT SIZE=5 COLOR=#FF0000>

getservbyport</FONT></A></H2>

<H3><A NAME="Compliance97">

Compliance</A></H3>

<H3><A NAME="Syntax97">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (system files)

Arguments&nbsp;&nbsp;port, protocol

Return Value&nbsp;&nbsp;name

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition97">

Definition</A></H3>

<P>

<TT>getservbyport</TT> returns the service name of the service

from the <TT>/etc/services</TT> system file given the <TT>port

number</TT> and the <TT>protocol name</TT>. In a list context,

it returns extra information from this file. It is equivalent

to the UNIX <TT>getservbyport()</TT> call.

<H3><A NAME="Example87">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

($name,$aliases,$port,$protocol) = getservbyport(512,&quot;tcp&quot;);

print(&quot;getservbyport() Problem with this! [$name]\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="getservent"><FONT SIZE=5 COLOR=#FF0000>

getservent</FONT></A></H2>

<H3><A NAME="Compliance98">

Compliance</A></H3>

<H3><A NAME="Syntax98">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;(system files)

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;name

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition98">

Definition</A></H3>

<P>

This function returns the next service name of the service from

the <TT>/etc/services</TT> system file. In a list context, it

returns extra information from this file. It is equivalent to

the UNIX <TT>getservet()</TT> call.

<H3><A NAME="Example88">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

($name,$aliases,$port,$protocol) = getservent();

print(&quot;getservent() /etc/servers [$name].\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="getsockname"><FONT SIZE=5 COLOR=#FF0000>

getsockname</FONT></A></H2>

<H3><A NAME="Compliance99">

Compliance</A></H3>

<H3><A NAME="Syntax99">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (socket)

Arguments&nbsp;&nbsp;socket

Return Value&nbsp;&nbsp;address

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition99">

Definition</A></H3>

<P>

This function is equivalent to the UNIX <TT>getsockname()</TT>

system call and returns the address of the socket.

<H2><A NAME="getsockopt"><FONT SIZE=5 COLOR=#FF0000>

getsockopt</FONT></A></H2>

<H3><A NAME="Compliance100">

Compliance</A></H3>

<H3><A NAME="Syntax100">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (socket)

Arguments&nbsp;&nbsp;socket, level, optionname

Return Value&nbsp;&nbsp;option

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition100">

Definition</A></H3>

<P>

This function is equivalent to the UNIX <TT>getsockopt()</TT>

system call and returns the socket option requested. However,

if an error has happened, the function's return is undefined.

<H2><A NAME="glob"><FONT SIZE=5 COLOR=#FF0000>

glob</FONT></A></H2>

<H3><A NAME="Compliance101">

Compliance</A></H3>

<H3><A NAME="Syntax101">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (files)

Arguments&nbsp;&nbsp;expression

Return Value&nbsp;&nbsp;list

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition101">

Definition</A></H3>

<P>

This function returns the <TT>list</TT> of files resulting from

expanding the expression with any wildcards. This is equivalent

to <TT>&lt;*.*&gt;</TT>.

<H3><A NAME="Example89">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

@files = glob(&quot;/tmp/*.txt&quot;);

print &quot;glob() &quot;,$files[1],&quot;\n&quot;;

</PRE>

</BLOCKQUOTE>

<H2><A NAME="gmtime"><FONT SIZE=5 COLOR=#FF0000>

gmtime</FONT></A></H2>

<H3><A NAME="Compliance102">

Compliance</A></H3>

<H3><A NAME="Syntax102">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (time)

Arguments&nbsp;&nbsp;expression

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;list

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition102">

Definition</A></H3>

<P>

Given a time as an argument (measured in seconds since 1 Jan 1970),

<TT>gmtime</TT> returns a <TT>list</TT> of nine elements with

that time broken down into seconds, minutes, hours, day of month,

month, year, day of week, day of year, and daylight saving-enabled

(daylight saving-enabled is either <TT>1</TT> for on or <TT>0</TT>

for off). If no argument is used, the current time is reported.

If the system supports POSIX time zones, the time returned is

localized for the Greenwich Mean Time.

<P>

In a scalar context, the <TT>ctime()</TT> style output (a string

describing the time in readable form) is returned.

<H3><A NAME="Example90">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

($sec,$min,$hour,$mday,$mon,$year,$wday,$ydat,$isdst) = gmtime();

print &quot;gmtime() 19$year-$mon-$mday\n&quot;;

</PRE>

</BLOCKQUOTE>

<H2><A NAME="goto"><FONT SIZE=5 COLOR=#FF0000>

goto</FONT></A></H2>

<H3><A NAME="Compliance103">

Compliance</A></H3>

<H3><A NAME="Syntax103">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;(flow)

Arguments&nbsp;&nbsp;label

Arguments&nbsp;&nbsp;expression

Arguments&nbsp;&nbsp;&amp;name

Return Value&nbsp;&nbsp;N/A

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition103">

Definition</A></H3>

<P>

The first form transfers control flow in the program to the specified

<TT>label</TT>. The second allows the evaluation of an <TT>expression</TT>

to supply the label name to transfer control to. The third form

is a way of passing control from one subroutine to another subroutine

so that, to the original caller, it appears that the second subroutine

was called directly.

<H3><A NAME="Example91">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print &quot;goto &quot;;

$count = 1;

TESTGOTO: {

   print $count, &quot; &quot;;

   $label = &quot;TESTGOTO&quot;;

   if ($count &lt; 2) {

   	$count++;

	goto $label;

   }

   else {

	goto FINISH;}

}

FINISH: print &quot;\n&quot;;

</PRE>

</BLOCKQUOTE>

<H2><A NAME="grep"><FONT SIZE=5 COLOR=#FF0000>

grep</FONT></A></H2>

<H3><A NAME="Compliance104">

Compliance</A></H3>

<H3><A NAME="Syntax104">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (lists)

Arguments&nbsp;&nbsp;expression, list

Arguments&nbsp;&nbsp;block, list

Return Value&nbsp;&nbsp;list

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition104">

Definition</A></H3>

<P>

This function evaluates the <TT>expression</TT> or <TT>block</TT>

for each of the elements in the supplied list, returning a list

of the elements that were evaulated as <TT>TRUE</TT>. The most

common use for this is with a pattern match operation as the expression,

and a list of strings to be processed.

<H3><A NAME="Example92">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

@a = (&quot;One&quot;,&quot;Two&quot;,&quot;Three&quot;,&quot;Four&quot;,&quot;Five&quot;);

print(&quot;grep(), &quot;,grep(/^T.*/,@a), &quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="hex"><FONT SIZE=5 COLOR=#FF0000>

hex</FONT></A></H2>

<H3><A NAME="Compliance105">

Compliance</A></H3>

<H3><A NAME="Syntax105">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (numeric)

Arguments&nbsp;&nbsp;expression

Return Value&nbsp;&nbsp;numeric

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition105">

Definition</A></H3>

<P>

This function evaluates the expression as a hexadecimal string

and returns the decimal equivalent.

<H3><A NAME="Example93">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;hex() &quot;,hex(&quot;ff&quot;), &quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="import"><FONT SIZE=5 COLOR=#FF0000>

import</FONT></A></H2>

<H3><A NAME="Compliance106">

Compliance</A></H3>

<H3><A NAME="Syntax106">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (scope)

Arguments&nbsp;&nbsp;list

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition106">

Definition</A></H3>

<P>

In the Perl 5 module system, each module has a local <TT>import()</TT>

method. This is called when <TT>use()</TT> includes modules.

<H2><A NAME="index"><FONT SIZE=5 COLOR=#FF0000>

index</FONT></A></H2>

<H3><A NAME="Compliance107">

Compliance</A></H3>

<H3><A NAME="Syntax107">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (string)

Arguments&nbsp;&nbsp;string substring

Arguments&nbsp;&nbsp;string substring position

Return Value&nbsp;&nbsp;position

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition107">

Definition</A></H3>

<P>

<TT>index</TT> returns the position in the supplied string where

the <TT>substring</TT> first occurs. If a position is supplied

as an argument, the search begins at this element (thus repeated

calls can find all occurrences if the found position is passed

back as the argument to the subsequent calls). If the <TT>substring</TT>

is not found, the return value is <TT>-1</TT>. All array element

numbers are based on <TT>$[</TT>, which is normally set to zero.

If this value is altered it will change the way <TT>index()</TT>

works. This is because index will start its search from <TT>$[</TT>

if no position argument is supplied, and it will return <TT>$[-1</TT>

when there is no match found.

<H3><A NAME="Example94">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

$ans1 = index(&quot;abcdefghijiklmdef:-)&quot;,&quot;def&quot;);

$ans2 = index(&quot;abcdefghijiklmdef&quot;,&quot;def&quot;,$ans1+3);

print(&quot;index() def is at $ans1 and next at $ans2\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="int"><FONT SIZE=5 COLOR=#FF0000>

int</FONT></A></H2>

<H3><A NAME="Compliance108">

Compliance</A></H3>

<H3><A NAME="Syntax108">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (numeric)

Arguments&nbsp;&nbsp;expression

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;integer

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition108">

Definition</A></H3>

<P>

This function returns the integer part of the expression. It uses

<TT>$_</TT> as the argument if none is specified.

<H3><A NAME="Example95">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;int() &quot;,int(345.678), &quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="ioctl"><FONT SIZE=5 COLOR=#FF0000>

ioctl</FONT></A></H2>

<H3><A NAME="Compliance109">

Compliance</A></H3>

<H3><A NAME="Syntax109">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (files)

Arguments&nbsp;&nbsp;handle, function, parameter

Return Value&nbsp;&nbsp;numeric

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition109">

Definition</A></H3>

<P>

This function calls the UNIX <TT>ioctl()</TT> function with the

specified packed parameter. It returns undefined if the operating

system returns <TT>-1</TT>. It returns the string <TT>0 but true</TT>

if the operating system returns <TT>0</TT>. Otherwise, it returns

the value returned by the operating system.

<H2><A NAME="join"><FONT SIZE=5 COLOR=#FF0000>

join</FONT></A></H2>

<H3><A NAME="Compliance110">

Compliance</A></H3>

<H3><A NAME="Syntax110">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (lists)

Arguments&nbsp;&nbsp;expression, list

Return Value&nbsp;&nbsp;string

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition110">

Definition</A></H3>

<P>

This function returns the string comprising each element in the

list joined with the string expression.

<H3><A NAME="Example96">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

@listone = (0, 1, 2, 3);

print(&quot;join() &quot;,join(&quot;-&quot;,@listone),&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="keys"><FONT SIZE=5 COLOR=#FF0000>

keys</FONT></A></H2>

<H3><A NAME="Compliance111">

Compliance</A></H3>

<H3><A NAME="Syntax111">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (hash)

Arguments&nbsp;&nbsp;array

Return Value&nbsp;&nbsp;list

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition111">

Definition</A></H3>

<P>

This function returns a list comprising each <TT>key</TT> in the

associative array passed as a parameter. In a scalar context,

the number of keys is returned. The returned list is ordered by

the internal storage requirements, so it is often useful to sort

this array before processing.

<H3><A NAME="Example97">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

%assocone = (

	One, 1,

	Two, 2,

	Three, 3,

	Four, 4

	);

print(&quot;keys() &quot;,join(&quot;-&quot;,keys(%assocone)),&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="kill"><FONT SIZE=5 COLOR=#FF0000>

kill</FONT></A></H2>

<H3><A NAME="Compliance112">

Compliance</A></H3>

<H3><A NAME="Syntax112">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (process)

Arguments&nbsp;&nbsp;signal, list

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition112">

Definition</A></H3>

<P>

This function kills the processes with the <TT>pids</TT> in the

supplied list by sending the signal level specified. If the signal

level is negative, the process groups are killed.

<H2><A NAME="last"><FONT SIZE=5 COLOR=#FF0000>

last</FONT></A></H2>

<H3><A NAME="Compliance113">

Compliance</A></H3>

<H3><A NAME="Syntax113">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;(flow)

Arguments&nbsp;&nbsp;label

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;N/A

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition113">

Definition</A></H3>

<P>

This causes control to exit the loop specified by <TT>label</TT>

(or the innermost loop if none is specified).

<H3><A NAME="Example98">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

i=1;

print(&quot;last() &quot;);

loop: while (I&lt;10) {

	last loop if i=3;

	print(i);

}

print(&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="lc"><FONT SIZE=5 COLOR=#FF0000>

lc</FONT></A></H2>

<H3><A NAME="Compliance114">

Compliance</A></H3>

<H3><A NAME="Syntax114">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (string)

Arguments&nbsp;&nbsp;expression

Return Value&nbsp;&nbsp;string

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition114">

Definition</A></H3>

<P>

This function returns the lowercase version of any supplied expression.

<H3><A NAME="Example99">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print&quot;lc() &quot;,lc(&quot;ABCDef&quot;), &quot;\n&quot;;

</PRE>

</BLOCKQUOTE>

<H2><A NAME="lcfirst"><FONT SIZE=5 COLOR=#FF0000>

lcfirst</FONT></A></H2>

<H3><A NAME="Compliance115">

Compliance</A></H3>

<H3><A NAME="Syntax115">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (string)

Arguments&nbsp;&nbsp;expression

Return Value&nbsp;&nbsp;string

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition115">

Definition</A></H3>

<P>

This function returns the <TT>string</TT> with the first character

of the expression lowercased.

<H3><A NAME="Example100">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print&quot;lcfirst() &quot;,lcfisrt(&quot;ABCDef&quot;), &quot;\n&quot;;

</PRE>

</BLOCKQUOTE>

<H2><A NAME="length"><FONT SIZE=5 COLOR=#FF0000>

length</FONT></A></H2>

<H3><A NAME="Compliance116">

Compliance</A></H3>

<H3><A NAME="Syntax116">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (string)

Arguments&nbsp;&nbsp;expression

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;numeric

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition116">

Definition</A></H3>

<P>

<TT>length</TT> returns the length of the string specified by

expression. If no expression is supplied, <TT>$_</TT> is evaluated.

<H3><A NAME="Example101">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;length() &quot;,length(&quot;01234&quot;),&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="link"><FONT SIZE=5 COLOR=#FF0000>

link</FONT></A></H2>

<H3><A NAME="Compliance117">

Compliance</A></H3>

<H3><A NAME="Syntax117">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (files)

Arguments&nbsp;&nbsp;filename, linkname

Return Value&nbsp;&nbsp;numeric

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition117">

Definition</A></H3>

<P>

This function creates a new link named after the second argument

linking to the <TT>filename</TT> specified in the first argument;

returns <TT>1</TT> or <TT>0</TT> for success or failure.

<H3><A NAME="Example102">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

$result = link(&quot;/usr/local&quot;,:&quot;/tmp/link&quot;);

print(&quot;link() $result\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="listen"><FONT SIZE=5 COLOR=#FF0000>

listen</FONT></A></H2>

<H3><A NAME="Compliance118">

Compliance</A></H3>

<H3><A NAME="Syntax118">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (socket)

Arguments&nbsp;&nbsp;socket, queuesize

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition118">

Definition</A></H3>

<P>

This is equivalent to the UNIX <TT>listen()</TT> system call.

If you are using <TT>accept</TT>s on a socket, <TT>listen</TT>

tells the system that it is available.

<H2><A NAME="local"><FONT SIZE=5 COLOR=#FF0000>

local</FONT></A></H2>

<H3><A NAME="Compliance119">

Compliance</A></H3>

<H3><A NAME="Syntax119">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (scope)

Arguments&nbsp;&nbsp;expression

Return Value&nbsp;&nbsp;N/A

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition119">

Definition</A></H3>

<P>

Modifies all the variables listed to be local to the current block.

If there is more than one element, the list must be enclosed in

parentheses. Any errors would be syntax errors. Although <TT>local()</TT>

does prevent pollution of the global namespace with variables

in subroutines, <TT>my()</TT> is safer than <TT>local()</TT> because

it also creates new copies of the variables for each recursive

call of a subroutine.

<H2><A NAME="localtime"><FONT SIZE=5 COLOR=#FF0000>

localtime</FONT></A></H2>

<H3><A NAME="Compliance120">

Compliance</A></H3>

<H3><A NAME="Syntax120">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (time)

Arguments&nbsp;&nbsp;expression

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;list

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition120">

Definition</A></H3>

<P>

Given a time as an argument (measured in seconds since 1 Jan 1970),

this function returns a list of nine elements with that time broken

down into seconds, minutes, hours, day of month, month, year,

day of week, day of year, and daylight saving-enabled (daylight

saving-enabled is either <TT>1</TT> for on or <TT>0</TT> for off).

If no argument is used, the current time is reported. If the system

supports POSIX time zones, the time returned is localized for

the current time zone.

<P>

In a scalar context, the <TT>ctime()</TT> style output is returned

(a string describing the time in readable form).

<H3><A NAME="Example103">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

($sec,$min,$hour,$mday,$mon,$year,$wday,$ydat,$isdst) = localtime();

print &quot;localtime() 19$year-$mon-$mday\n&quot;;

</PRE>

</BLOCKQUOTE>

<H2><A NAME="log"><FONT SIZE=5 COLOR=#FF0000>

log</FONT></A></H2>

<H3><A NAME="Compliance121">

Compliance</A></H3>

<H3><A NAME="Syntax121">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (numeric)

Arguments&nbsp;&nbsp;expression

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;numeric

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition121">

Definition</A></H3>

<P>

This returns the logarithm (using the natural logarithm base e)

of the <TT>expression</TT> (or of <TT>$_</TT> if none specified).

<H3><A NAME="Example104">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;log() &quot;,log(2.5),&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="lstat"><FONT SIZE=5 COLOR=#FF0000>

lstat</FONT></A></H2>

<H3><A NAME="Compliance122">

Compliance</A></H3>

<H3><A NAME="Syntax122">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (files)

Arguments&nbsp;&nbsp;handle

Arguments&nbsp;&nbsp;expression

Return Value&nbsp;&nbsp;list

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition122">

Definition</A></H3>

<P>

The <TT>lstat</TT> function returns the file statstics of the

file pointed to by the file <TT>handle</TT> (or a file <TT>handle</TT>

produced by evaluating the expression). This is equivalent to

<TT>stat()</TT>, but if the file is a symbolic link, the statistics

are generated for the symbolic link itself rather than the file

being linked to. Note that, like the <TT>file test</TT> operators,

<TT>lstat()</TT> can take a special argument underscore, which

means that the test is carried out on the same file <TT>handle</TT>

as the last <TT>file test</TT>, <TT>stat()</TT>, or <TT>lstat()</TT>

call.

<H3><A NAME="Example105">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

($device,$inode,$mode,$nlink,$uid,$gid,$rdev,$size,

$atime,$mtime,$ctime,$blksize,$blocks) = lstat(&quot;/tmp/link&quot;);

print(&quot;lstat() $device, $inode, $ctime \n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="m"><FONT SIZE=5 COLOR=#FF0000>

m//</FONT></A></H2>

<H3><A NAME="Compliance123">

Compliance</A></H3>

<H3><A NAME="Syntax123">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (pattern)

Arguments&nbsp;&nbsp;m/&lt;pattern&gt;/&lt;optionlist&gt;

Arguments&nbsp;&nbsp;/&lt;pattern&gt;/&lt;optionlist&gt;

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition123">

Definition</A></H3>

<P>

This function searches the default string for the pattern using

regular expression pattern matching. It returns <TT>1</TT> if

a match is found. Otherwise, <TT>''</TT> is returned. The default

string can be assigned to the match using either the <TT>=~</TT>

or <TT>!~</TT> operators; otherwise, it is <TT>$_</TT>.

<H3><A NAME="Example106">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

$_ = &quot;Happy MaN&quot;;

print &quot;m// &quot;,/n$/i,&quot;\n&quot;;

</PRE>

</BLOCKQUOTE>

<H2><A NAME="map"><FONT SIZE=5 COLOR=#FF0000>

map</FONT></A></H2>

<H3><A NAME="Compliance124">

Compliance</A></H3>

<H3><A NAME="Syntax124">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (list)

Arguments&nbsp;&nbsp;block list

Arguments&nbsp;&nbsp;expression, list

Return Value&nbsp;&nbsp;list

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition124">

Definition</A></H3>

<P>

This function evaluates the specified expression (or block) for

each individual member of the specified list. This is done by

assigning <TT>$_</TT> to each member of the list and evaluating

the <TT>expression</TT> (or <TT>block</TT>). The value returned

is the <TT>list</TT> of all these results (not necessarily one

Perl element of the list).

<H3><A NAME="Example107">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

@result = map($_+1,(0,1,2));

print(&quot;map() &quot;,@result,.&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="mkdir"><FONT SIZE=5 COLOR=#FF0000>

mkdir</FONT></A></H2>

<H3><A NAME="Compliance125">

Compliance</A></H3>

<H3><A NAME="Syntax125">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (files)

Arguments&nbsp;&nbsp;filename, mode

Return Value&nbsp;&nbsp;1 or 0

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition125">

Definition</A></H3>

<P>

The <TT>mkdir</TT> function creates a directory with a name specified

by the <TT>filename</TT>, with the <TT>mode</TT> specified by

the octal mode. If it fails, <TT>$OS_ERROR</TT> (<TT>$!</TT>)

is set to operating system error.

<H3><A NAME="Example108">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;mkdir() &quot;,mkdir(&quot;/tmp/testdir&quot;,0777), &quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="msgctl"><FONT SIZE=5 COLOR=#FF0000>

msgctl</FONT></A></H2>

<H3><A NAME="Compliance126">

Compliance</A></H3>

<H3><A NAME="Syntax126">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (System V)

Arguments&nbsp;&nbsp;id, cmd, arg

Return Value&nbsp;&nbsp;special

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition126">

Definition</A></H3>

<P>

This function is equivalent to the UNIX system call <TT>msgctl()</TT>,

if supported, and provides a variety of message control operations

as specified by CMD.

<H2><A NAME="msgget"><FONT SIZE=5 COLOR=#FF0000>

msgget</FONT></A></H2>

<H3><A NAME="Compliance127">

Compliance</A></H3>

<H3><A NAME="Syntax127">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (System V)

Arguments&nbsp;&nbsp;key, flags

Return Value&nbsp;&nbsp;special

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition127">

Definition</A></H3>

<P>

This function is equivalent to the UNIX system call <TT>msgget()</TT>,

if supported, and <FONT COLOR=#00FF00> </FONT><FONT COLOR=#000000>returns

the message queue identifier associated with key.</FONT>

<H2><A NAME="msgrcv"><FONT SIZE=5 COLOR=#FF0000>

msgrcv</FONT></A></H2>

<H3><A NAME="Compliance128">

Compliance</A></H3>

<H3><A NAME="Syntax128">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (System V)

Arguments&nbsp;&nbsp;id, var.size, type, flags

Return Value&nbsp;&nbsp;special

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition128">

Definition</A></H3>

<P>

This is equivalent to the UNIX system call <TT>msgrcv()</TT>,

if supported. This function reads a message from the queue associated

with the message queue identifier, specified by <TT>msqid</TT>,

and places it in the structure pointed to by <TT>msgp</TT>.

<H2><A NAME="msgsnd"><FONT SIZE=5 COLOR=#FF0000>

msgsnd</FONT></A></H2>

<H3><A NAME="Compliance129">

Compliance</A></H3>

<H3><A NAME="Syntax129">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (System V)

Arguments&nbsp;&nbsp;id, msg, flags

Return Value&nbsp;&nbsp;special

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition129">

Definition</A></H3>

<P>

The <TT>msgsnd</TT> function is equivalent to the UNIX system

call <TT>msgsnd()</TT>, if supported, and sends a message to the

queue associated with the message queue identifier.

<H2><A NAME="my"><FONT SIZE=5 COLOR=#FF0000>

my</FONT></A></H2>

<H3><A NAME="Compliance130">

Compliance</A></H3>

<H3><A NAME="Syntax130">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (scope)

Arguments&nbsp;&nbsp;expression

Return Value&nbsp;&nbsp;N/A

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition130">

Definition</A></H3>

<P>

This function declares each of the variables listed to be <TT>local()</TT>

to the <TT>block</TT>. If more than one variable is specified,

parentheses are required. The <TT>my()</TT> specification is stronger

than the the <TT>local()</TT> specification because it not only

stops pollution of the global namespace but also creates a stack

frame for subroutine calls so that recursive calls will behave

as one would expect with local variables.

<H2><A NAME="next"><FONT SIZE=5 COLOR=#FF0000>

next</FONT></A></H2>

<H3><A NAME="Compliance131">

Compliance</A></H3>

<H3><A NAME="Syntax131">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (flow)

Arguments&nbsp;&nbsp;label

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;N/A

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition131">

Definition</A></H3>

<P>

This operator allows branching within a loop so that the execution

skips onto the next instance of the loop.

<H3><A NAME="Example109">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;next &quot;);

@array = (&quot;a&quot;,&quot;b&quot;,&quot;c&quot;);

loop: foreach $elem (@array) {

	next if $elem =~ /^a/;

	print $elem;

}

print &quot;\n&quot;;

</PRE>

</BLOCKQUOTE>

<H2><A NAME="no"><FONT SIZE=5 COLOR=#FF0000>

no</FONT></A></H2>

<H3><A NAME="Compliance132">

Compliance</A></H3>

<H3><A NAME="Syntax132">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (module)

Arguments&nbsp;&nbsp;module, list

Return Value&nbsp;&nbsp;N/A

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition132">

Definition</A></H3>

<P>

Using this function, particularly useful when using pragmas, is

the reverse of <TT>use()</TT>.

<H3><A NAME="Example110">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

use integer;

# code using integer arithmetic here

no integer;

# back to floating point arithmetic

</PRE>

</BLOCKQUOTE>

<H2><A NAME="oct"><FONT SIZE=5 COLOR=#FF0000>

oct</FONT></A></H2>

<H3><A NAME="Compliance133">

Compliance</A></H3>

<H3><A NAME="Syntax133">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (numeric)

Arguments&nbsp;&nbsp;expression

Return Value&nbsp;&nbsp;numeric

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition133">

Definition</A></H3>

<P>

This function evaluates the expression as an octal string and

returns the decimal value.

<H3><A NAME="Example111">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;oct() &quot;,oct(&quot;88&quot;), &quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="open"><FONT SIZE=5 COLOR=#FF0000>

open</FONT></A></H2>

<H3><A NAME="Compliance134">

Compliance</A></H3>

<H3><A NAME="Syntax134">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category:&nbsp;&nbsp;list operator (files)

Arguments:&nbsp;&nbsp;handle, filename

Arguments:&nbsp;&nbsp;handle

Return Value&nbsp;&nbsp;TRUE (non zero) or FALSE (undefined)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition134">

Definition</A></H3>

<P>

This function opens a file using the specified file <TT>handle</TT>.

The file <TT>handle</TT> may be an expression; the resulting value

is used as the <TT>handle</TT>. If no <TT>filename</TT> is specified,

a variable with the same name as the file <TT>handle</TT> is used

(this should be a scalar variable with a string value referring

to the <TT>filename</TT>).

<P>

The <TT>filename</TT> string may be prefixed with the following

values to indicate the mode:

<UL>

<LI><TT>&lt;</TT>&nbsp;&nbsp;Read, this is the default.

<LI><TT>&gt;</TT>&nbsp;&nbsp;Write.

<LI><TT>+&gt;</TT>&nbsp;&nbsp;Read/write-starting with new file.

<LI><TT>+&lt;</TT>&nbsp;&nbsp;Read/write using existing file.

<LI><TT>&gt;&gt;</TT>&nbsp;&nbsp;Append.

<LI><TT>&lt;command&gt; |</TT>&nbsp;&nbsp;Input pipe; the file

name is actually a subshell command from which the file handle

is piped.

<LI><TT>| &lt;command&gt;</TT>&nbsp;&nbsp;Output pipe; the file

name is actually a subshell command to which the output of the

file handle is piped. 

</UL>

<P>

The special file name <TT>-</TT> can refer to either <TT>STDIN</TT>

(<TT>-</TT>) when reading, or <TT>STDOUT</TT> (<TT>&gt;-</TT>),

when writing.

<H3><A NAME="Example112">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

open(FIL,&quot;/tmp/notexist&quot;) || 

	print(&quot;open() failed as file did not exist.\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="opendir"><FONT SIZE=5 COLOR=#FF0000>

opendir</FONT></A></H2>

<H3><A NAME="Compliance135">

Compliance</A></H3>

<H3><A NAME="Syntax135">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (files)

Arguments&nbsp;&nbsp;handle, dirname

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition135">

Definition</A></H3>

<P>

Opens a directory <TT>handle</TT> for the directory name specified.

If the <TT>dirname</TT> is an expression this can be evaluated

to return a name.

<H3><A NAME="Example113">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

opendir (DIR, &quot;/tmp/notexist&quot;) || 

	print(&quot;opendir() dialed as directory does not exist.\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="ord"><FONT SIZE=5 COLOR=#FF0000>

ord</FONT></A></H2>

<H3><A NAME="Compliance136">

Compliance</A></H3>

<H3><A NAME="Syntax136">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (string)

Arguments&nbsp;&nbsp;expression

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;numeric

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition136">

Definition</A></H3>

<P>

This function returns the numeric ASCII code of the first character

in the expression (or <TT>$_</TT> if none specified).

<H3><A NAME="Example114">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;ord() &quot;,ord(&quot;A&quot;), &quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="pack"><FONT SIZE=5 COLOR=#FF0000>

pack</FONT></A></H2>

<H3><A NAME="Compliance137">

Compliance</A></H3>

<H3><A NAME="Syntax137">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (records)

Arguments&nbsp;&nbsp;template, list

Return Value&nbsp;&nbsp;string

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition137">

Definition</A></H3>

<P>

This function returns a packed version of the data in the list

using the template to determine how it is coded. The template

comprises a sequence of characters, each specifying the data type

of the matching data item in the list.<BR>



<P>

<CENTER>

<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=60%>

<TR VALIGN=TOP><TD WIDTH=96><CENTER><B>Character</B></CENTER></TD><TD WIDTH=384><B>Description</B>

</TD></TR>

<TR VALIGN=TOP><TD WIDTH=96><CENTER><TT>@</TT></CENTER></TD><TD WIDTH=384>Null fill to absolute position

</TD></TR>

<TR VALIGN=TOP><TD WIDTH=96><CENTER><TT>A</TT></CENTER></TD><TD WIDTH=384>ASCII string with spaces to pad

</TD></TR>

<TR VALIGN=TOP><TD WIDTH=96><CENTER><TT>a</TT></CENTER></TD><TD WIDTH=384>ASCII string with nulls to pad

</TD></TR>

<TR VALIGN=TOP><TD WIDTH=96><CENTER><TT>b</TT></CENTER></TD><TD WIDTH=384>Bit string (ascending bit order)

</TD></TR>

<TR VALIGN=TOP><TD WIDTH=96><CENTER><TT>B</TT></CENTER></TD><TD WIDTH=384>Bit string (descending bit order)

</TD></TR>

<TR VALIGN=TOP><TD WIDTH=96><CENTER><TT>c</TT></CENTER></TD><TD WIDTH=384>Signed char value

</TD></TR>

<TR VALIGN=TOP><TD WIDTH=96><CENTER><TT>C</TT></CENTER></TD><TD WIDTH=384>Unsigned char value

</TD></TR>

<TR VALIGN=TOP><TD WIDTH=96><CENTER><TT>d</TT></CENTER></TD><TD WIDTH=384>Double-precision float in the native format

</TD></TR>

<TR VALIGN=TOP><TD WIDTH=96><CENTER><TT>f</TT></CENTER></TD><TD WIDTH=384>Single-precision float in the native format

</TD></TR>

<TR VALIGN=TOP><TD WIDTH=96><CENTER><TT>h</TT></CENTER></TD><TD WIDTH=384>Hex string (low nybble first)

</TD></TR>

<TR VALIGN=TOP><TD WIDTH=96><CENTER><TT>H</TT></CENTER></TD><TD WIDTH=384>Hex string (high nybble first)

</TD></TR>

<TR VALIGN=TOP><TD WIDTH=96><CENTER><TT>i</TT></CENTER></TD><TD WIDTH=384>Signed integer value

</TD></TR>

<TR VALIGN=TOP><TD WIDTH=96><CENTER><TT>I</TT></CENTER></TD><TD WIDTH=384>Unsigned integer value

</TD></TR>

<TR VALIGN=TOP><TD WIDTH=96><CENTER><TT>l</TT></CENTER></TD><TD WIDTH=384>Signed long integer value

</TD></TR>

<TR VALIGN=TOP><TD WIDTH=96><CENTER><TT>L</TT></CENTER></TD><TD WIDTH=384>Unsigned long integer value

</TD></TR>

<TR VALIGN=TOP><TD WIDTH=96><CENTER><TT>n</TT></CENTER></TD><TD WIDTH=384>Short integer &quot;network&quot; order

</TD></TR>

<TR VALIGN=TOP><TD WIDTH=96><CENTER><TT>N</TT></CENTER></TD><TD WIDTH=384>Long integer &quot;network&quot; order

</TD></TR>

<TR VALIGN=TOP><TD WIDTH=96><CENTER><TT>p</TT></CENTER></TD><TD WIDTH=384>Pointer to a null-terminated string

</TD></TR>

<TR VALIGN=TOP><TD WIDTH=96><CENTER><TT>P</TT></CENTER></TD><TD WIDTH=384>Pointer to a structure (fixed-length string)

</TD></TR>

<TR VALIGN=TOP><TD WIDTH=96><CENTER><TT>s</TT></CENTER></TD><TD WIDTH=384>Signed short integer value

</TD></TR>

<TR VALIGN=TOP><TD WIDTH=96><CENTER><TT>S</TT></CENTER></TD><TD WIDTH=384>Unsigned short integer value

</TD></TR>

<TR VALIGN=TOP><TD WIDTH=96><CENTER><TT>u</TT></CENTER></TD><TD WIDTH=384>UUencoded string

</TD></TR>

<TR VALIGN=TOP><TD WIDTH=96><CENTER><TT>v</TT></CENTER></TD><TD WIDTH=384>Short integer &quot;VAX&quot; (little-endian) order

</TD></TR>

<TR VALIGN=TOP><TD WIDTH=96><CENTER><TT>V</TT></CENTER></TD><TD WIDTH=384>Long integer &quot;VAX&quot; (little-endian) order

</TD></TR>

<TR VALIGN=TOP><TD WIDTH=96><CENTER><TT>x</TT></CENTER></TD><TD WIDTH=384>Null byte

</TD></TR>

<TR VALIGN=TOP><TD WIDTH=96><CENTER><TT>X</TT></CENTER></TD><TD WIDTH=384>Back up a byte

</TD></TR>

</TABLE></CENTER>

<P>

<P>

A concise form of template can be used by appending a number after

any letter to repeat that format specifier. For <TT>aA</TT>, the

number uses one value and pads the rest. For <TT>bB</TT>, the

number indicates the number of bits. For <TT>hH</TT>, the number

indicates the number of nybbles. For <TT>P</TT>, the number indicates

the size of the pointer structure. Using an asterisk in place

of a number means to repeat the format specifier as necessary

to use up all list values. Note that some packed structures may

not be portable across machines (in particular, network and floating

point formats). It should be possible to unpack the data using

the same format specification with an <TT>unpack()</TT> call.

<H3><A NAME="Example115">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

Use Socketl

@a=(140,203,7,103);

$addr=pack('C4',@a);

($name,$alias,$adrtype,$length,@address)=gethostbyaddr($addr,AF_INET);

print(&quot;pack() &quot;,@a, &quot;packed as: $addr&quot;.\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="package"><FONT SIZE=5 COLOR=#FF0000>

package</FONT></A></H2>

<H3><A NAME="Compliance138">

Compliance</A></H3>

<H3><A NAME="Syntax138">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (class)

Arguments&nbsp;&nbsp;name

Return Value&nbsp;&nbsp;N/A

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition138">

Definition</A></H3>

<P>

Calling this function declares that all unqualified dynamic variables

in the current block are in the scope of the specified package

name. This is normally done in the header of a file to be included

as a package or a module in other programs that <TT>require()</TT>

or <TT>use()</TT>. Note that this does apply to variables declared

as <TT>local()</TT> but not to variables declared as <TT>my()</TT>.

<H2><A NAME="pipe"><FONT SIZE=5 COLOR=#FF0000>

pipe</FONT></A></H2>

<H3><A NAME="Compliance139">

Compliance</A></H3>

<H3><A NAME="Syntax139">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (process)

Arguments&nbsp;&nbsp;readhandle, writehandle

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition139">

Definition</A></H3>

<P>

Links named pipes like the UNIX function <TT>pipe()</TT>.

<H2><A NAME="pop"><FONT SIZE=5 COLOR=#FF0000>

pop</FONT></A></H2>

<H3><A NAME="Compliance140">

Compliance</A></H3>

<H3><A NAME="Syntax140">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;name unary operator (array)

Arguments&nbsp;&nbsp;variable

Return Value&nbsp;&nbsp;value

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition140">

Definition</A></H3>

<P>

This function removes the top item from the array specified and

returns that element.

<H3><A NAME="Example116">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

@a = (1,2,3,4);

print(&quot;pop() &quot;,pop(@a), &quot;leaves &quot;,@a,&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="pos"><FONT SIZE=5 COLOR=#FF0000>

pos</FONT></A></H2>

<H3><A NAME="Compliance141">

Compliance</A></H3>

<H3><A NAME="Syntax141">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (pattern)

Arguments&nbsp;&nbsp;variable

Return Value&nbsp;&nbsp;numeric

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition141">

Definition</A></H3>

<P>

Returns the offset that the last pattern match (<TT>m//g</TT>)

reached when searching the scalar variable specified as an argument.

It can be assigned to alter the bahavior of the next match.

<H3><A NAME="Example117">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

$name = &quot;alpha1 alpha2 alpha3 alpha4&quot;;

$name =~ m/alpha/g;

print(&quot;pos() &quot;, pos($name), &quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="print"><FONT SIZE=5 COLOR=#FF0000>

print</FONT></A></H2>

<H3><A NAME="Compliance142">

Compliance</A></H3>

<H3><A NAME="Syntax142">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (i/o)

Arguments&nbsp;&nbsp;handle, list

Arguments&nbsp;&nbsp;list

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition142">

Definition</A></H3>

<P>

Prints the list to the file represented by the file <TT>handle</TT>.

If no file <TT>handle</TT> is specified the default file <TT>handle</TT>

is <TT>STDOUT</TT>. This default file handle may be altered using

the <TT>select()</TT> operator. If no list argument is specified,

<TT>$_</TT> is printed.

<H3><A NAME="Example118">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

$return = print &quot;print() &quot;;

print &quot;returns $return on success.\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="printf"><FONT SIZE=5 COLOR=#FF0000>

printf</FONT></A></H2>

<H3><A NAME="Compliance143">

Compliance</A></H3>

<H3><A NAME="Syntax143">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (i/o)

Arguments&nbsp;&nbsp;filehandle list

Arguments&nbsp;&nbsp;list

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition143">

Definition</A></H3>

<P>

This function uses the C <TT>printf</TT> format specifiers to

control the printed output. It is equivalent to

<BLOCKQUOTE>

<PRE>

print filehandle, sprintf(list);

</PRE>

</BLOCKQUOTE>

<P>

As with <TT>print()</TT> the default file handle is <TT>STDOUT</TT>.

<H3><A NAME="Example119">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

printf(&quot;printf() An integer printed with leading zeroes %05d.\n&quot;,9);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="push"><FONT SIZE=5 COLOR=#FF0000>

push</FONT></A></H2>

<H3><A NAME="Compliance144">

Compliance</A></H3>

<H3><A NAME="Syntax144">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (array)

Arguments&nbsp;&nbsp;array, list

Return Value&nbsp;&nbsp;numeric

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition144">

Definition</A></H3>

<P>

This appends the elements in the specified <TT>list</TT> on the

end of the specified <TT>array</TT> and returns the new number

of elements in the list.

<H3><A NAME="Example120">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

@a = (1);

$num = push(@a,2,3,4,5);

print(&quot;push() Added &quot;,$num-1,&quot; elements to array: &quot;,@a,&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="qSTRING"><FONT SIZE=5 COLOR=#FF0000>

q/STRING/</FONT></A></H2>

<H3><A NAME="Compliance145">

Compliance</A></H3>

<H3><A NAME="Syntax145">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;(string)

Arguments&nbsp;&nbsp;q/string/

Return Value&nbsp;&nbsp;value

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition145">

Definition</A></H3>

<P>

This is a standard quote used to surpress special interpretation

of characters giving a literal string. You can use single quotes

<TT>'string'</TT> or the letter <TT>q</TT> with delimiters. Any

delimiter will do as long as it is not used in the string. The

backslash character can be used to escape any reference to the

delimiting character itself in the string.

<H3><A NAME="Example121">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(q!q// The only special character is the delimiter itself \!!, &quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="qqSTRING"><FONT SIZE=5 COLOR=#FF0000>

qq/STRING/</FONT></A></H2>

<H3><A NAME="Compliance146">

Compliance</A></H3>

<H3><A NAME="Syntax146">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;(string)

Arguments&nbsp;&nbsp;qq/string/

Return Value&nbsp;&nbsp;value

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition146">

Definition</A></H3>

<P>

This is a double quote, used to allow interpolation of special

characters within the string as required. You can use double quote

<TT>&quot;string&quot;</TT> or the double <TT>qq</TT> with delimiters.

The backslash character can be used to disable the special meaning

of interpolated characters, including the delimiter itself.

<H3><A NAME="Example122">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

$newline = &quot;\n&quot;;

print(qq!qq// double quoted with interpolation! $newline!);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="quotemeta"><FONT SIZE=5 COLOR=#FF0000>

quotemeta</FONT></A></H2>

<H3><A NAME="Compliance147">

Compliance</A></H3>

<H3><A NAME="Syntax147">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (pattern)

Arguments&nbsp;&nbsp;expression

Return Value&nbsp;&nbsp;string

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition147">

Definition</A></H3>

<P>

<TT>quotemeta</TT> returns the value of the expression with all

the metacharacters backslashed.

<H3><A NAME="Example123">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(quotemeta(&quot;quotameta() I can use any metcharacter $ \ &quot;),&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="qwSTRING"><FONT SIZE=5 COLOR=#FF0000>

qw/STRING/</FONT></A></H2>

<H3><A NAME="Compliance148">

Compliance</A></H3>

<H3><A NAME="Syntax148">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;(list)

Arguments&nbsp;&nbsp;qw/string/

Return Value&nbsp;&nbsp;list

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition148">

Definition</A></H3>

<P>

This function returns a list of words in string. Spaces are used

as delimiters in the string to produce this list.

<H3><A NAME="Example124">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;qw// &quot;,qw(&quot;1 2 3 4 5&quot;),&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="qxSTRING"><FONT SIZE=5 COLOR=#FF0000>

qx/STRING/</FONT></A></H2>

<H3><A NAME="Compliance149">

Compliance</A></H3>

<H3><A NAME="Syntax149">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;(process)

Arguments&nbsp;&nbsp;qx/string/

Return Value&nbsp;&nbsp;special

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition149">

Definition</A></H3>

<P>

This is a back quote, used to allow interpolation of special characters

within the string as required and then execute the resulting command

as a system command. You can use back quotes <TT>'string'</TT>

or the letters <TT>qx</TT> with delimiters. The backslash character

can be used to disable the special meaning of interpolated characters,

including the delimiter itself. The return value is the return

value of the <TT>system()</TT> call.

<H3><A NAME="Example125">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;qx// &quot;,qx!du -s /tmp!);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="rand"><FONT SIZE=5 COLOR=#FF0000>

rand</FONT></A></H2>

<H3><A NAME="Compliance150">

Compliance</A></H3>

<H3><A NAME="Syntax150">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (numeric)

Arguments&nbsp;&nbsp;expression

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;numeric

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition150">

Definition</A></H3>

<P>

This function returns a real number between <TT>0</TT> and the

number evaluated as expression (the upper limit is <TT>1</TT>

if no expression is specified). The upper limit must be positive.

As the function calls a pseudorandom generator, it should be possible

to generate the same sequence of numbers repeatedly unless the

initial seed value is altered with <TT>srand()</TT>.

<H3><A NAME="Example126">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;rand(), &quot;,rand,&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="read"><FONT SIZE=5 COLOR=#FF0000>

read</FONT></A></H2>

<H3><A NAME="Compliance151">

Compliance</A></H3>

<H3><A NAME="Syntax151">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (i/o)

Arguments&nbsp;&nbsp;handle, variable, length, offset

Arguments&nbsp;&nbsp;handle, variable, length

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition151">

Definition</A></H3>

<P>

Reads length bytes from file <TT>handle</TT> into variable (starting

at offset if specified). It returns the number of bytes actually

read.

<H3><A NAME="Example127">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

open(INF,&quot;/etc/services&quot;) || die &quot;Error reading file, stopped&quot;;

read(INF,$result,10);

print(&quot;read() $result \n&quot;);

close(INF)

</PRE>

</BLOCKQUOTE>

<H2><A NAME="readdir"><FONT SIZE=5 COLOR=#FF0000>

readdir</FONT></A></H2>

<H3><A NAME="Compliance152">

Compliance</A></H3>

<H3><A NAME="Syntax152">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (i/o)

Arguments&nbsp;&nbsp;dirhandle

Return Value&nbsp;&nbsp;lname

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition152">

Definition</A></H3>

<P>

In a list context, this function returns a list of the files in

the directory specified by the directory <TT>handle</TT>. In a

scalar context, it returns the next file name in the directory.

<H3><A NAME="Example128">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

opendir(DIR,&quot;/tmp&quot;);

@file = readdir(DIR);

print(&quot;readdir() &quot;,@files, &quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="readlink"><FONT SIZE=5 COLOR=#FF0000>

readlink</FONT></A></H2>

<H3><A NAME="Compliance153">

Compliance</A></H3>

<H3><A NAME="Syntax153">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (files)

Arguments&nbsp;&nbsp;expression

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;value

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition153">

Definition</A></H3>

<P>

This function returns the value of the symbolic link specified

by <TT>expression</TT> (or <TT>$_</TT> if none specified). If

symbolic links are not implemented, it gives a fatal error. If

symbolic links are supported, but there is some system error,

the error is returned in <TT>$OS_ERROR</TT> (<TT>$!</TT>).

<H2><A NAME="recv"><FONT SIZE=5 COLOR=#FF0000>

recv</FONT></A></H2>

<H3><A NAME="Compliance154">

Compliance</A></H3>

<H3><A NAME="Syntax154">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (socket)

Arguments&nbsp;&nbsp;socket, variale, length, flags

Return Value&nbsp;&nbsp;address

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition154">

Definition</A></H3>

<P>

The <TT>recv</TT> function is equivalent to UNIX system call <TT>recv()</TT>

and receives a message on a socket.

<H2><A NAME="redo"><FONT SIZE=5 COLOR=#FF0000>

redo</FONT></A></H2>

<H3><A NAME="Compliance155">

Compliance</A></H3>

<H3><A NAME="Syntax155">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;(flow)

Arguments&nbsp;&nbsp;label

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;N/A

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition155">

Definition</A></H3>

<P>

This function passes control directly to the <TT>label</TT> without

executing any contine block. If no <TT>label</TT> is specified,

the innermost loop is used.

<H2><A NAME="ref"><FONT SIZE=5 COLOR=#FF0000>

ref</FONT></A></H2>

<H3><A NAME="Compliance156">

Compliance</A></H3>

<H3><A NAME="Syntax156">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (class)

Arguments&nbsp;&nbsp;expression

Return Value&nbsp;&nbsp;package

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition156">

Definition</A></H3>

<P>

This function returns the package of a <TT>bless()ed</TT> variable,

<TT>TRUE</TT> if the variable is a reference, or <TT>FALSE</TT>.

The return value for <TT>TRUE</TT> is actually the type of the

variable (for example <TT>ARRAY</TT>, <TT>HASH</TT>, <TT>REF</TT>,

<TT>SCALAR</TT>).

<H3><A NAME="Example129">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

$tmp = {};

bless $tmp, ATMPCLASS;

print &quot;ref() \$tmp is now in class &quot;,ref($tmp),&quot;\n&quot;;

</PRE>

</BLOCKQUOTE>

<H2><A NAME="rename"><FONT SIZE=5 COLOR=#FF0000>

rename</FONT></A></H2>

<H3><A NAME="Compliance157">

Compliance</A></H3>

<H3><A NAME="Syntax157">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (files)

Arguments&nbsp;&nbsp;oldname, newname

Return Value&nbsp;&nbsp;1 (true) 0 (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition157">

Definition</A></H3>

<P>

This function renames files on the same file system from <TT>oldname</TT>

to <TT>newname</TT>.

<H3><A NAME="Example130">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

$returned = rename(&quot;/tmp/test&quot;,&quot;/tmp/test2&quot;);

print(&quot;rename() returned $returned \n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="require"><FONT SIZE=5 COLOR=#FF0000>

require</FONT></A></H2>

<H3><A NAME="Compliance158">

Compliance</A></H3>

<H3><A NAME="Syntax158">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (module)

Arguments&nbsp;&nbsp;expression

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition158">

Definition</A></H3>

<P>

If the expression is a scalar, the library specified by the <TT>filename</TT>

is included (if it has not already been).

<P>

In Perl 5, if the expression is numeric this requires that the

version of Perl being used (in <TT>$PERL_VERSION</TT> or <TT>$[</TT>)

is greater than or equal to the version specified.

<P>

Note that Perl 5 also has the <TT>use()</TT> mechanism for including

modules; <TT>use()</TT> is more robust than <TT>require</TT>.

<H3><A NAME="Example131">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

require &quot;cgilib.pl&quot;;

</PRE>

</BLOCKQUOTE>

<H2><A NAME="reset"><FONT SIZE=5 COLOR=#FF0000>

reset</FONT></A></H2>

<H3><A NAME="Compliance159">

Compliance</A></H3>

<H3><A NAME="Syntax159">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (misc)

Arguments&nbsp;&nbsp;expression

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition159">

Definition</A></H3>

<P>

This function provides a way of resetting variables in the current

package (especially pattern match variables). The expression is

interpreted as a list of single characters. All variables starting

with those characters are reset. The letters are case sensitive

(as Perl variables are). Hyphens may be used to specify ranges

of variables to reset. If called without any argument, <TT>reset</TT>

simply resets all search matches.<BR>

<P>

<CENTER>

<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>

<TR VALIGN=TOP><TD><B>CAUTION</B></TD></TR>

<TR VALIGN=TOP><TD>

<BLOCKQUOTE>

Use of this operator can reset system variables you may not want to alter. For example, be very careful with the following:</BLOCKQUOTE>



</TD></TR>

</TABLE></CENTER>

<P>

<BLOCKQUOTE>

<PRE>

reset A-Z;

</PRE>

</BLOCKQUOTE>

<H2><A NAME="return"><FONT SIZE=5 COLOR=#FF0000>

return</FONT></A></H2>

<H3><A NAME="Compliance160">

Compliance</A></H3>

<H3><A NAME="Syntax160">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (flow)

Arguments&nbsp;&nbsp;list

Return Value&nbsp;&nbsp;list

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition160">

Definition</A></H3>

<P>

This function returns from a subroutine (or an <TT>eval()</TT>)

with the value specified.

<H3><A NAME="Example132">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

sub test {

	return 1;

}

$test = &amp;test;

print(&quot;return() Returned $test \n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="reverse"><FONT SIZE=5 COLOR=#FF0000>

reverse</FONT></A></H2>

<H3><A NAME="Compliance161">

Compliance</A></H3>

<H3><A NAME="Syntax161">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (list)

Arguments&nbsp;&nbsp;list

Return Value&nbsp;&nbsp;list

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition161">

Definition</A></H3>

<P>

The <TT>reverse</TT> function returns the list given as an argument

in reverse order. In a scalar context it reverses the letters

of its first argument.

<H3><A NAME="Example133">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

@a = (1,2,3);

print(&quot;reverse() &quot;,reverse(@a),&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="rewinddir"><FONT SIZE=5 COLOR=#FF0000>

rewinddir</FONT></A></H2>

<H3><A NAME="Compliance162">

Compliance</A></H3>

<H3><A NAME="Syntax162">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (i/o)

Arguments&nbsp;&nbsp;dirhandle

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition162">

Definition</A></H3>

<P>

When reading a directory using <TT>readdir()</TT>, it is possible

to reset the directory to the first file name.

<H3><A NAME="Example134">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

opendir(DIR,&quot;/tmp&quot;);

print(&quot;rewinddir() (a): &quot;

file: while ($file=readdir(DIR) {

	print $file, &quot; &quot;;

}

rewinddir();

print(&quot; (b): &quot;

file: while ($file=readdir(DIR) {

	print $file, &quot; &quot;;

}

print(&quot;\n&quot;);

closedir(DIR);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="rindex"><FONT SIZE=5 COLOR=#FF0000>

rindex</FONT></A></H2>

<H3><A NAME="Compliance163">

Compliance</A></H3>

<H3><A NAME="Syntax163">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (string)

Arguments&nbsp;&nbsp;string, substring, position

Arguments&nbsp;&nbsp;string, substring

Return Value&nbsp;&nbsp;position

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition163">

Definition</A></H3>

<P>

This function is very similar to <TT>index()</TT> except that,

instead of scanning for the <TT>substring</TT> from the first

character in the string, it scans backwards from the last character.

So it returns the starting position of the last occurrence of

<TT>substring</TT> in <TT>string</TT> (scanning backwards from

the specified position or from the end if no position is specified).

<H3><A NAME="Example135">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

$ans1 = rindex(&quot;abcdefghijiklmdef:-)&quot;,&quot;def&quot;);

$ans2 = rindex(&quot;abcdefghijiklmdef&quot;,&quot;def&quot;,$ans1+3);

print(&quot;rindex() def is at $ans1 and next at $ans2\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="rmdir"><FONT SIZE=5 COLOR=#FF0000>

rmdir</FONT></A></H2>

<H3><A NAME="Compliance164">

Compliance</A></H3>

<H3><A NAME="Syntax164">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (files)

Arguments&nbsp;&nbsp;filename

Return Value&nbsp;&nbsp;1 or 0

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition164">

Definition</A></H3>

<P>

This function deletes the directory specified (or <TT>$_</TT>)

if it is empty and sets <TT>$OS_ERROR</TT> (<TT>$!</TT>) to the

error value if there is a system error.

<H2><A NAME="s2"><FONT SIZE=5 COLOR=#FF0000>

s///</FONT></A></H2>

<H3><A NAME="Compliance165">

Compliance</A></H3>

<H3><A NAME="Syntax165">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;(pattern)

Arguments&nbsp;&nbsp;s/pattern/replacement/options

Return Value&nbsp;&nbsp;numeric

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition165">

Definition</A></H3>

<P>

This function searches the default string for <TT>pattern</TT>

(a regular expression) and replaces this with the <TT>replacement</TT>

string (the actual replacemnt behavior depends on the <TT>options</TT>).

It returns the number of replacements made. The default string

is set using either of the pattern binding operators (<TT>=~</TT>

or <TT>&Acirc;~</TT> ) or <TT>$_</TT> is used if none have been

bound. The valid options are<BR>



<P>

<CENTER>

<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=50%>

<TR VALIGN=TOP><TD WIDTH=96><CENTER><B>Option</B></CENTER></TD><TD WIDTH=384><B>Description</B>

</TD></TR>

<TR VALIGN=TOP><TD WIDTH=96><CENTER><TT>e</TT></CENTER></TD><TD WIDTH=384>Evaluate the right side as an expression

</TD></TR>

<TR VALIGN=TOP><TD WIDTH=96><CENTER><TT>g</TT></CENTER></TD><TD WIDTH=384>Global (replace all occurrences)

</TD></TR>

<TR VALIGN=TOP><TD WIDTH=96><CENTER><TT>i</TT></CENTER></TD><TD WIDTH=384>Case-insensitive pattern matching

</TD></TR>

<TR VALIGN=TOP><TD WIDTH=96><CENTER><TT>m</TT></CENTER></TD><TD WIDTH=384>Ignore \n in string (multiple lines)

</TD></TR>

<TR VALIGN=TOP><TD WIDTH=96><CENTER><TT>o</TT></CENTER></TD><TD WIDTH=384>Optimize (compile pattern once)

</TD></TR>

<TR VALIGN=TOP><TD WIDTH=96><CENTER><TT>s</TT></CENTER></TD><TD WIDTH=384>Treat string as single line

</TD></TR>

<TR VALIGN=TOP><TD WIDTH=96><CENTER><TT>x</TT></CENTER></TD><TD WIDTH=384>Extended regular expressions

</TD></TR>

</TABLE></CENTER>

<P>

<H3><A NAME="Example136">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

$oldstr = &quot;abcdefABCDEFabcdefABCDEF&quot;;

$newstr= $oldstr;

$str =~ s/abc/zzz/ig;

print(&quot;s/// $oldstr became $newstr \n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="scalar"><FONT SIZE=5 COLOR=#FF0000>

scalar</FONT></A></H2>

<H3><A NAME="Compliance166">

Compliance</A></H3>

<H3><A NAME="Syntax166">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (misc)

Arguments&nbsp;&nbsp;expression

Return Value&nbsp;&nbsp;value

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition166">

Definition</A></H3>

<P>

This operator forces the argument to be interpreted in a scalar

context, rather than as a list, so that it can override the default

context if necessary.

<H2><A NAME="seek"><FONT SIZE=5 COLOR=#FF0000>

seek</FONT></A></H2>

<H3><A NAME="Compliance167">

Compliance</A></H3>

<H3><A NAME="Syntax167">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (i/o)

Arguments&nbsp;&nbsp;handle, position, start

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition167">

Definition</A></H3>

<P>

This function sets the file pointer to a specified offset <TT>position</TT>

in a file. The offset is relative to the <TT>start</TT> that can

have three values: <TT>0</TT> (start of file), <TT>1</TT> (current

position), <TT>2</TT> (end of file). This allows the use of random

access files, and the implentation of fast-read algorithms (for

example binary search techniques) on file <TT>handles</TT>, especially

with fixed-length data where the offsets are easier to calculate.

<H2><A NAME="seekdir"><FONT SIZE=5 COLOR=#FF0000>

seekdir</FONT></A></H2>

<H3><A NAME="Compliance168">

Compliance</A></H3>

<H3><A NAME="Syntax168">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (i/o)

Arguments&nbsp;&nbsp;dirhandle. position

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition168">

Definition</A></H3>

<P>

This function allows the position in a directory to be reset to

a position saved with <TT>telldir()</TT>. This is useful when

processing directories with <TT>readdir()</TT>.

<H2><A NAME="select"><FONT SIZE=5 COLOR=#FF0000>

select</FONT></A></H2>

<H3><A NAME="Compliance169">

Compliance</A></H3>

<H3><A NAME="Syntax169">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (i/o)

Arguments&nbsp;&nbsp;handle

Arguments&nbsp;&nbsp;rbits, wbits, ebits, timeout

Return Value&nbsp;&nbsp;handle

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition169">

Definition</A></H3>

<P>

This operator selects the default file <TT>handle</TT> used for

I/O operations such as <TT>print()</TT> and <TT>write()</TT>.

By default <TT>STDOUT</TT> is selected, but this function can

select any other file handle to be the default instead. The return

value is the currently selected file <TT>handle</TT> (before any

change) so it is useful to assign this to a variable in order

to be able to restore the original <TT>handle</TT> as the default

at a later stage.

<P>

The second form calls the UNIX system <TT>select()</TT> function.

<H3><A NAME="Example137">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

open(OUT,&quot;/tmp/t.out&quot;);

$return = select(OUT);

print(&quot;This goes in /tmp/t.out.\n&quot;);

select($return);

print(&quot;select() restored to STDOUT.\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="semctl"><FONT SIZE=5 COLOR=#FF0000>

semctl</FONT></A></H2>

<H3><A NAME="Compliance170">

Compliance</A></H3>

<H3><A NAME="Syntax170">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (System V)

Arguments&nbsp;&nbsp;id, semnum, command, arg

Return Value&nbsp;&nbsp;value

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition170">

Definition</A></H3>

<P>

This function is equivalent to the UNIX <TT>semctl()</TT> function.

This is a semaphore control operation with several variables.

<H2><A NAME="semget"><FONT SIZE=5 COLOR=#FF0000>

semget</FONT></A></H2>

<H3><A NAME="Compliance171">

Compliance</A></H3>

<H3><A NAME="Syntax171">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (System V)

Arguments&nbsp;&nbsp;key, nsems, flags

Return Value&nbsp;&nbsp;value

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition171">

Definition</A></H3>

<P>

This function is equivalent to the UNIX <TT>semget()</TT> function

and returns the semaphore ID.

<H2><A NAME="semop"><FONT SIZE=5 COLOR=#FF0000>

semop</FONT></A></H2>

<H3><A NAME="Compliance172">

Compliance</A></H3>

<H3><A NAME="Syntax172">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (System V)

Arguments&nbsp;&nbsp;key, opstring

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition172">

Definition</A></H3>

<P>

The <TT>semop</TT> function is equivalent to the UNIX <TT>semop()</TT>

function call and performs semaphore signalling and waiting functions.

<H2><A NAME="send"><FONT SIZE=5 COLOR=#FF0000>

send</FONT></A></H2>

<H3><A NAME="Compliance173">

Compliance</A></H3>

<H3><A NAME="Syntax173">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (socket)

Arguments&nbsp;&nbsp;socket, message, flags, to

Arguments&nbsp;&nbsp;socket, message, flags

Return Value&nbsp;&nbsp;numeric

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition173">

Definition</A></H3>

<P>

This function is equivalent to the UNIX system <TT>send()</TT>

function and sends a message socket.

<H2><A NAME="setgrent"><FONT SIZE=5 COLOR=#FF0000>

setgrent</FONT></A></H2>

<H3><A NAME="Compliance174">

Compliance</A></H3>

<H3><A NAME="Syntax174">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;(system files)

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;n/a

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition174">

Definition</A></H3>

<P>

This function rewinds the <TT>/etc/group</TT> file to the start

of the file for subsequent accesses using <TT>getgrent()</TT>.

<H3><A NAME="Example138">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;setgrent() &quot;,setgrent(), &quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="sethostent"><FONT SIZE=5 COLOR=#FF0000>

sethostent</FONT></A></H2>

<H3><A NAME="Compliance175">

Compliance</A></H3>

<H3><A NAME="Syntax175">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (system files)

Arguments&nbsp;&nbsp;flag

Return Value&nbsp;&nbsp;N/A

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition175">

Definition</A></H3>

<P>

If called with an argument of <TT>1</TT>, this function tells

the system to keep a TCP socket open for name server queries such

as <TT>gethostbyname()</TT>. If this is not, then the name server

queries use UDP datagrams.

<H3><A NAME="Example139">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;sethostent() &quot;,sethostent(1), &quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="setnetent"><FONT SIZE=5 COLOR=#FF0000>

setnetent</FONT></A></H2>

<H3><A NAME="Compliance176">

Compliance</A></H3>

<H3><A NAME="Syntax176">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (system files)

Arguments&nbsp;&nbsp;flag

Return Value&nbsp;&nbsp;N/A

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition176">

Definition</A></H3>

<P>

This function rewinds the <TT>/etc/networks</TT> file used by

<TT>getnetent()</TT> and other network-related functions. If the

flag has a value of <TT>1</TT>, then the file is kept open between

calls to <TT>getnetbyname()</TT> and <TT>getnetbyaddr()</TT>.

<H3><A NAME="Example140">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;setnetent() &quot;,setnetent(1), &quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="setpgrp"><FONT SIZE=5 COLOR=#FF0000>

setpgrp</FONT></A></H2>

<H3><A NAME="Compliance177">

Compliance</A></H3>

<H3><A NAME="Syntax177">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (process)

Arguments&nbsp;&nbsp;pid, pgrp

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition177">

Definition</A></H3>

<P>

This function sets the current process group for the specified

process (<TT>pid</TT>); if this is zero, the current process is

set.

<H2><A NAME="setpriority"><FONT SIZE=5 COLOR=#FF0000>

setpriority</FONT></A></H2>

<H3><A NAME="Compliance178">

Compliance</A></H3>

<H3><A NAME="Syntax178">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (proxess)

Arguments&nbsp;&nbsp;type, id, priority

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition178">

Definition</A></H3>

<P>

This function calls the UNIX <TT>setprority()</TT> function. The

<TT>type</TT> is one of <TT>PRIO_PROCESS</TT>, <TT>PRIO_PGGRP</TT>,

or<TT> PRIO_USER</TT>. The <TT>id</TT> is the relevent ID for

this (<TT>pid</TT>, a <TT>pid</TT> for a group of processes, or

<TT>uid</TT>). If <TT>0</TT> is used as the <TT>id</TT>, the current

process, process group, or user is used. The <TT>priority</TT>

is a number representing the level of priority (normally in the

range <TT>120</TT> to <TT>20</TT>) where the lower the priority,

the more favorable the scheduling of the process by the operating

system.

<H3><A NAME="Example141">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;setpriority() &quot;,setpriority(0,0,-20),&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="setprotoent"><FONT SIZE=5 COLOR=#FF0000>

setprotoent</FONT></A></H2>

<H3><A NAME="Compliance179">

Compliance</A></H3>

<H3><A NAME="Syntax179">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (system files)

Arguments&nbsp;&nbsp;flag

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition179">

Definition</A></H3>

<P>

This function rewinds the <TT>/etc/protocols</TT> file used by

<TT>getprotoent()</TT> and other protocol- related functions.

If the <TT>flag</TT> has a value of <TT>1</TT>, then the file

is kept open between calls to <TT>getprotobyname()</TT> and <TT>getnetbynumber()</TT>.

<H3><A NAME="Example142">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;setprotoent() &quot;,setprotoent(1), &quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="setpwent"><FONT SIZE=5 COLOR=#FF0000>

setpwent</FONT></A></H2>

<H3><A NAME="Compliance180">

Compliance</A></H3>

<H3><A NAME="Syntax180">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;(system files)

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition180">

Definition</A></H3>

<P>

This function rewinds the <TT>/etc/passwd</TT> file used by <TT>getpwent()</TT>

and other password-related functions.

<H3><A NAME="Example143">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;setpwent() &quot;,setpwent(), &quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="setservent"><FONT SIZE=5 COLOR=#FF0000>

setservent</FONT></A></H2>

<H3><A NAME="Compliance181">

Compliance</A></H3>

<H3><A NAME="Syntax181">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named uanry operator (system files)

Arguments&nbsp;&nbsp;flag

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition181">

Definition</A></H3>

<P>

This function rewinds the <TT>/etc/services</TT> file used by

<TT>getservent()</TT> and other service related functions. If

the <TT>flag</TT> has a value of <TT>1</TT>, then the file is

kept open between calls to <TT>getservbyname()</TT> and <TT>getnetbyport()</TT>.

<H3><A NAME="Example144">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;setservent() &quot;,setservent(1), &quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="setsockopt"><FONT SIZE=5 COLOR=#FF0000>

setsockopt</FONT></A></H2>

<H3><A NAME="Compliance182">

Compliance</A></H3>

<H3><A NAME="Syntax182">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (socket)

Arguments&nbsp;&nbsp;socket, level, optname, optval

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition182">

Definition</A></H3>

<P>

This function is equivalent to UNIX system call <TT>setsockopt()</TT>

and sets the socket options.

<H2><A NAME="shift"><FONT SIZE=5 COLOR=#FF0000>

shift</FONT></A></H2>

<H3><A NAME="Compliance183">

Compliance</A></H3>

<H3><A NAME="Syntax183">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (array)

Arguments&nbsp;&nbsp;array

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;value

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition183">

Definition</A></H3>

<P>

This function takes the leftmost element from the <TT>array</TT>

specified and returns it, reducing the array by one element. When

no <TT>array</TT> is specified, the array of arguments passed

to the Perl script, <TT>$ARGV</TT>, is used if the context is

not in a subroutine; otherwise, the array of arguments passed

to the subroutine, <TT>@_</TT>, is used.

<P>

The return value is undefined if the array is empty.

<H3><A NAME="Example145">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;shift() &quot;);

while ($arg = shift) {

	print($arg,' ');

}

print(&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="shmctl"><FONT SIZE=5 COLOR=#FF0000>

shmctl</FONT></A></H2>

<H3><A NAME="Compliance184">

Compliance</A></H3>

<H3><A NAME="Syntax184">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (System V)

Arguments&nbsp;&nbsp;id, cmd, arg

Return Value&nbsp;&nbsp;value

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition184">

Definition</A></H3>

<P>

This function is equivalent to the UNIX <TT>shmctl()</TT> function,

and performs shared memory control operations.

<H2><A NAME="shmget"><FONT SIZE=5 COLOR=#FF0000>

shmget</FONT></A></H2>

<H3><A NAME="Compliance185">

Compliance</A></H3>

<H3><A NAME="Syntax185">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (System V)

Arguments&nbsp;&nbsp;key.size, flags

Return Value&nbsp;&nbsp;value

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition185">

Definition</A></H3>

<P>

This function is equivalent to the UNIX <TT>shmget()</TT> function

and returns shared memory segment ID.

<H2><A NAME="shmread"><FONT SIZE=5 COLOR=#FF0000>

shmread</FONT></A></H2>

<H3><A NAME="Compliance186">

Compliance</A></H3>

<H3><A NAME="Syntax186">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (System V)

Arguments&nbsp;&nbsp;id, var. pos, size

Return Value&nbsp;&nbsp;value

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition186">

Definition</A></H3>

<P>

This function is equivalent to the UNIX <TT>shmread()</TT> function

and reads from the shared memory segment ID.

<H2><A NAME="shmwrite"><FONT SIZE=5 COLOR=#FF0000>

shmwrite</FONT></A></H2>

<H3><A NAME="Compliance187">

Compliance</A></H3>

<H3><A NAME="Syntax187">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (System V)

Arguments&nbsp;&nbsp;id, string, pos, size

Return Value&nbsp;&nbsp;value

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition187">

Definition</A></H3>

<P>

This function is equivalent to the UNIX <TT>shmwrite()</TT> function

and writes to the shared memory segment ID.

<H2><A NAME="shutdown"><FONT SIZE=5 COLOR=#FF0000>

shutdown</FONT></A></H2>

<H3><A NAME="Compliance188">

Compliance</A></H3>

<H3><A NAME="Syntax188">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (socket)

Arguments&nbsp;&nbsp;socket, how

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition188">

Definition</A></H3>

<P>

This function is equivalent to the UNIX <TT>shutdown()</TT> function

and shuts down a socket.

<H2><A NAME="sin"><FONT SIZE=5 COLOR=#FF0000>

sin</FONT></A></H2>

<H3><A NAME="Compliance189">

Compliance</A></H3>

<H3><A NAME="Syntax189">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (numeric)

Arguments&nbsp;&nbsp;expression

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;numeric

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition189">

Definition</A></H3>

<P>

This function returns the sine of the expression in radians. If

there is no explicit argument, <TT>$_</TT> is used.

<H3><A NAME="Example146">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;sin() &quot;,sin(4), &quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="sleep"><FONT SIZE=5 COLOR=#FF0000>

sleep</FONT></A></H2>

<H3><A NAME="Compliance190">

Compliance</A></H3>

<H3><A NAME="Syntax190">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (process)

Arguments&nbsp;&nbsp;expression

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;numeric

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition190">

Definition</A></H3>

<P>

This function causes the current process to <TT>sleep</TT> for

the number of seconds specified in <TT>expression</TT> (if none

is specified, it sleeps forever, but may be woken up by a signal

if this has been programmed).

<H3><A NAME="Example147">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;sleep() &quot;,sleep(5),&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="socket"><FONT SIZE=5 COLOR=#FF0000>

socket</FONT></A></H2>

<H3><A NAME="Compliance191">

Compliance</A></H3>

<H3><A NAME="Syntax191">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (socket)

Arguments&nbsp;&nbsp;socket, domain, type, protocol

Return Value&nbsp;&nbsp;value

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition191">

Definition</A></H3>

<P>

This function is equivalent to the UNIX socket(&nbsp;) system

call and opens a specified type of socket and attaches it to a

file handle.

<H2><A NAME="socketpair"><FONT SIZE=5 COLOR=#FF0000>

socketpair</FONT></A></H2>

<H3><A NAME="Compliance192">

Compliance</A></H3>

<H3><A NAME="Syntax192">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (socket)

Arguments&nbsp;&nbsp;socket1, socket2, domain, type, protocol

Return Value&nbsp;&nbsp;value

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition192">

Definition</A></H3>

<P>

This function is equivalent to the UNIX <TT>socketpair()</TT>

system call and creates a pair of sockets, which are unnamed,

in the specified <TT>domain</TT>.

<H2><A NAME="sort"><FONT SIZE=5 COLOR=#FF0000>

sort</FONT></A></H2>

<H3><A NAME="Compliance193">

Compliance</A></H3>

<H3><A NAME="Syntax193">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (list)

Arguments&nbsp;&nbsp;subname list

Arguments&nbsp;&nbsp;block list

Arguments&nbsp;&nbsp;list

Return Value&nbsp;&nbsp;list

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition193">

Definition</A></H3>

<P>

This function sorts the list specified and returns the sorted

list. The sort method can be specified with the optional subroutine

or block argument. A subroutine may be specified that takes two

arguments (passed as global package variables, <TT>$a $b</TT>)

and returns <TT>TRUE</TT> if the first is less than or equal to

the second by any criteria used. Similarly, a block can be specified

(effectively an anonymous subroutine) to perform this function.

The default sort order is based on the standard string comparison

order.

<H3><A NAME="Example148">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

@a = (&quot;z&quot;,&quot;w&quot;,&quot;r&quot;,&quot;i&quot;,&quot;b&quot;,&quot;a&quot;);

print(&quot;sort() &quot;,sort(@a),&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="splice"><FONT SIZE=5 COLOR=#FF0000>

splice</FONT></A></H2>

<H3><A NAME="Compliance194">

Compliance</A></H3>

<H3><A NAME="Syntax194">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (array)

Arguments&nbsp;&nbsp;array, offset, length, list

Arguments&nbsp;&nbsp;array, offset, length

Arguments&nbsp;&nbsp;array, offset

Return Value&nbsp;&nbsp;list

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition194">

Definition</A></H3>

<P>

This function removes the elements specified by <TT>offset</TT>

and <TT>length</TT> from the array and replaces them with the

elements in the list supplied as the last argument. A list of

those elements removed is returned. If no <TT>length</TT> is specified,

all the items from <TT>offset</TT> to the end of the array are

removed.

<H3><A NAME="Example149">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

@a = (&quot;a&quot;,&quot;e&quot;,&quot;i&quot;,&quot;o&quot;,&quot;u&quot;);

print(&quot;splice() &quot;,splice(@a,0,3,&quot;A&quot;,&quot;E&quot;,&quot;I&quot;),&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="split"><FONT SIZE=5 COLOR=#FF0000>

split</FONT></A></H2>

<H3><A NAME="Compliance195">

Compliance</A></H3>

<H3><A NAME="Syntax195">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (pattern)

Arguments&nbsp;&nbsp;/pattern/,expression,limit

Arguments&nbsp;&nbsp;/pattern/,expression

Arguments&nbsp;&nbsp;/pattern/

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;list

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition195">

Definition</A></H3>

<P>

This function manipulates a string, splitting the string denoted

by the expression (or the <TT>$_</TT> if none is specified) into

an array of strings based on some separator string specified by

the pattern (if the pattern has no specified whitespace as the

default). An optional limit restricts the number of elements returned.

A negative limit has no effect.

<P>

If not in a list context, the number of elements found is returned.

In an scalar context, it returns the number of elements and puts

the resulting array into the <TT>@_</TT> array (the use of the

<TT>@_</TT> as the result is depreciated).

<H3><A NAME="Examples">

Examples</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;spilt() &quot;,split(/:/,&quot;1:2:3:4:5&quot;),&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="sprintf"><FONT SIZE=5 COLOR=#FF0000>

sprintf</FONT></A></H2>

<H3><A NAME="Compliance196">

Compliance</A></H3>

<H3><A NAME="Syntax196">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (string)

Arguments&nbsp;&nbsp;format, list

Return Value&nbsp;&nbsp;string

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition196">

Definition</A></H3>

<P>

This is equivalent to the C <TT>sprintf()</TT> call. The format

is a string with special metacharacters to specify how may values/variables

follow and how to represent each of these in the resulting string.

This enables the explicit formatting of floating point and integer

numbers (also enabling binary, hexidecimal, and octal formats).

<H3><A NAME="Example150">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;strintf() &quot;,sprintf(&quot;%0d \n&quot;,9),&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="sqrt"><FONT SIZE=5 COLOR=#FF0000>

sqrt</FONT></A></H2>

<H3><A NAME="Compliance197">

Compliance</A></H3>

<H3><A NAME="Syntax197">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (numeric)

Arguments&nbsp;&nbsp;expression

Return Value&nbsp;&nbsp;numeric

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition197">

Definition</A></H3>

<P>

This function returns the result of evaluating the expression

and finding its square root.

<H3><A NAME="Example151">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;sqrt() &quot;,sqrt(4),&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="srand"><FONT SIZE=5 COLOR=#FF0000>

srand</FONT></A></H2>

<H3><A NAME="Compliance198">

Compliance</A></H3>

<H3><A NAME="Syntax198">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (numeric)

Arguments&nbsp;&nbsp;expression

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition198">

Definition</A></H3>

<P>

This function sets the seed used by the pseudorandom number generation

algorithm when generating <TT>rand()</TT> numbers. In order to

randomize the possible sequences, the seed should be set to a

different value each time the script is called. The default behavior,

when no expression is supplied, is to use the result of a call

to <TT>time()</TT>. This is not a secure method of randomizing

for scripts that need to be secure because it is possible to predict

what sequence the script will return.

<P>

Note that, when using a set of pseudorandom data generated using

<TT>rand()</TT>, it is possible to generate exactly the same data

repeatedly (without having to save the entire sequence) simply

by stetting and saving the seed. Restoring the seed and calling

<TT>rand()</TT> will then produce the same sequence again.

<H3><A NAME="Example152">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

srand(26);

print(&quot;rand() &quot;,rand(),&quot;, &quot;);

srand(26);

print(rand(),&quot; (should produce the same \&quot;random\&quot; number twice) \n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="stat"><FONT SIZE=5 COLOR=#FF0000>

stat</FONT></A></H2>

<H3><A NAME="Compliance199">

Compliance</A></H3>

<H3><A NAME="Syntax199">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (files)

Arguments&nbsp;&nbsp;handle

Arguments&nbsp;&nbsp;expression

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;list

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition199">

Definition</A></H3>

<P>

This function returns the file statistics of the file pointed

to by the file <TT>handle</TT> (or a file <TT>handle</TT> produced

by evaluating the expression). Note that, like the file test operators,

<TT>stat()</TT> can take a special argument underscore; this means

that the test is carried out on the same file <TT>handle</TT>

as the last <TT>file test</TT>, <TT>stat()</TT>, or <TT>lstat()</TT>

call.

<H3><A NAME="Example153">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

($device,$inode,$mode,$nlink,$uid,$gid,$rdev,$size,$atime,

	$mtime,$ctime,$blksize,$blocks) = stat(&quot;/etc/passwd&quot;);

print(&quot;stat() $device, $inode, $ctime \n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="study"><FONT SIZE=5 COLOR=#FF0000>

study</FONT></A></H2>

<H3><A NAME="Compliance200">

Compliance</A></H3>

<H3><A NAME="Syntax200">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (pattern)

Arguments&nbsp;&nbsp;scalar

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition200">

Definition</A></H3>

<P>

When many pattern match operations are being performed on the

same string, the efficiency of these patterns can be improved

with the <TT>study()</TT> function. If no string is sepcified,

the <TT>$_</TT> is studied by default. The call sets up internal

lookup tables based on the string studied so that pattern-matching

operations can use this information to processs the pattern match

more quickly. Only one string at a time can be studied (subsequent

calls effectively &quot;unstudy&quot; any previous <TT>study()</TT>

removing the lookup tables). The function <TT>study()</TT> is

often used in a loop processing lines of a text file where each

line is studied before being processed with various pattern matches.

<H2><A NAME="sub"><FONT SIZE=5 COLOR=#FF0000>

sub</FONT></A></H2>

<H3><A NAME="Compliance201">

Compliance</A></H3>

<H3><A NAME="Syntax201">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;(flow)

Arguments&nbsp;&nbsp;name block

Arguments&nbsp;&nbsp;name

Arguments&nbsp;&nbsp;name

Return Value&nbsp;&nbsp;value

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition201">

Definition</A></H3>

<P>

This is the syntax for a subroutine declaration. The full form

defines a subroutine with the <TT>name</TT> and associates this

with the statements in block. When evoked, it will return the

result of the last statement executed in the block (often a <TT>return()</TT>

statement). If no name is supplied, it is an anonymous subroutine

(certain functions such as <TT>sort()</TT> allow anonymous subroutines

as arguments). With only a name as an argument, the statement

is a forward reference to a subroutine which is fully declared

later in the script.

<H2><A NAME="substr"><FONT SIZE=5 COLOR=#FF0000>

substr</FONT></A></H2>

<H3><A NAME="Compliance202">

Compliance</A></H3>

<H3><A NAME="Syntax202">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (string)

Arguments&nbsp;&nbsp;expression, offset, length

Arguments&nbsp;&nbsp;expression, offset

Return Value&nbsp;&nbsp;string

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition202">

Definition</A></H3>

<P>

This function returns a substring of a string specified by expression.

The substring starts at the specified <TT>offset</TT> and has

the specified <TT>length</TT>. If the offset is negative, it starts

from the right- hand side of the string instead of the left-hand

side. If the length is negative, it means to trim the string by

that number of characters.

<H3><A NAME="Example154">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;substr() &quot;,substring(&quot;okay&quot;,0,2),&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="symlink"><FONT SIZE=5 COLOR=#FF0000>

symlink</FONT></A></H2>

<H3><A NAME="Compliance203">

Compliance</A></H3>

<H3><A NAME="Syntax203">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator ((files)

Arguments&nbsp;&nbsp;oldfile, newfile

Return Value&nbsp;&nbsp;1 or 0

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition203">

Definition</A></H3>

<P>

This function creates a symbolic link from the existing file specified

by <TT>oldfile</TT> to the specified <TT>newfile</TT> and returns

<TT>1</TT> on success and <TT>0</TT> on failure. If symbolic links

are not supported by the operating system, this will return a

fatal error.

<H3><A NAME="Example155">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;symlink() &quot;,symlink(&quot;/usr/local&quot;,&quot;/tmp/symlinktousrlocal&quot;),&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="syscall"><FONT SIZE=5 COLOR=#FF0000>

syscall</FONT></A></H2>

<H3><A NAME="Compliance204">

Compliance</A></H3>

<H3><A NAME="Syntax204">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (i/o)

Arguments&nbsp;&nbsp;list

Return Value&nbsp;&nbsp;varies

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition204">

Definition</A></H3>

<P>

This mechanism allows Perl to call corresponding UNIX C system

calls directly. It relies on the existence of the set of Perl

header files Syscall.ph which declares all of these calls. The

script <TT>h2ph</TT> that is normally executed when Perl is installed,

sets up the Syscall.ph files. Each call has the same name as the

equivalent UNIX system call with the <TT>SYS_</TT> prefix. As

these calls actually pass control to the relevant C system function,

care must be taken with passing parameters.

<P>

The first element in the list used as an argument to <TT>syscall()</TT>

itself, is the name corresponding to the UNIX system call (that

is, with the <TT>SYS_</TT> prefix). The next elements in the list

are interpreted as parameters to this call. Numeric values are

passed as the C type <TT>int</TT>. String values are passed as

pointers to arrays. The length of these strings must be able to

cope with any value assigned to that parameter in the call.

<H3><A NAME="Example156">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

require &quot;syscall.ph&quot;;

print(&quot;syscall() &quot;,syscall(&amp;SYS_getpid),&quot; equivalent to $PID\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="sysopen"><FONT SIZE=5 COLOR=#FF0000>

sysopen</FONT></A></H2>

<H3><A NAME="Compliance205">

Compliance</A></H3>

<H3><A NAME="Syntax205">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (i/o)

Arguments&nbsp;&nbsp;handle, name, mode, permissions

Arguments&nbsp;&nbsp;handle, name, mode

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition205">

Definition</A></H3>

<P>

This function calls the UNIX C <TT>open()</TT> function directly

from the Perl script, which opens a file for reading or writing.

<H2><A NAME="sysread"><FONT SIZE=5 COLOR=#FF0000>

sysread</FONT></A></H2>

<H3><A NAME="Compliance206">

Compliance</A></H3>

<H3><A NAME="Syntax206">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (i/o)

Arguments&nbsp;&nbsp;handle, scalar, length, offset

Arguments&nbsp;&nbsp;handle, scalar, length

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition206">

Definition</A></H3>

<P>

This function calls the UNIX C <TT>read()</TT> function directly

from the Perl script, which reads a line from the standard input

source.

<H2><A NAME="system"><FONT SIZE=5 COLOR=#FF0000>

system</FONT></A></H2>

<H3><A NAME="Compliance207">

Compliance</A></H3>

<H3><A NAME="Syntax207">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (process)

Arguments&nbsp;&nbsp;list

Return Value&nbsp;&nbsp;status

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition207">

Definition</A></H3>

<P>

This call is executes the specified list as an operating system

call. The process to execute this command is forked and the script

waits for the child process to return. The return value is the

exit status of the child process.<BR>

<P>

<CENTER>

<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>

<TR VALIGN=TOP><TD><B>TIP</B></TD></TR>

<TR VALIGN=TOP><TD>

<BLOCKQUOTE>

To capture the output from a system call, use the <TT>qx//</TT> (back quote mechanism) rather than <TT>system()</TT>.

</BLOCKQUOTE>



</TD></TR>

</TABLE></CENTER>

<P>

<H3><A NAME="Example157">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;system() &quot;,system(&quot;ls -F /var &gt; /tmp/t.tmp&quot;),&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="syswrite"><FONT SIZE=5 COLOR=#FF0000>

syswrite</FONT></A></H2>

<H3><A NAME="Compliance208">

Compliance</A></H3>

<H3><A NAME="Syntax208">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (i/o)

Arguments&nbsp;&nbsp;handle, scalar, length, offset

Arguments&nbsp;&nbsp;handle, scalar, length

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition208">

Definition</A></H3>

<P>

This function calls the UNIX C <TT>write()</TT> function directly

from the Perl script, which is an interactive write to another

user process.

<H2><A NAME="tell"><FONT SIZE=5 COLOR=#FF0000>

tell</FONT></A></H2>

<H3><A NAME="Compliance209">

Compliance</A></H3>

<H3><A NAME="Syntax209">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (i/o)

Arguments&nbsp;&nbsp;expression

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;position

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition209">

Definition</A></H3>

<P>

This function returns the current position in the file specified

by the expression (which should evaluate to a file <TT>handle</TT>).

If no <TT>handle</TT> is specified, the last file accessed is

used. This value can be used by <TT>seek()</TT> to return to this

position if appropriate.

<H3><A NAME="Example158">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;tell() &quot;,tell(STDOUT),&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="telldir"><FONT SIZE=5 COLOR=#FF0000>

telldir</FONT></A></H2>

<H3><A NAME="Compliance210">

Compliance</A></H3>

<H3><A NAME="Syntax210">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (i/o)

Arguments&nbsp;&nbsp;dirhandle

Return Value&nbsp;&nbsp;position

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition210">

Definition</A></H3>

<P>

This function returns the current position in the directory <TT>handle</TT>

specified. This value can be used by <TT>seekdir()</TT> to return

to this position if appropriate.

<H3><A NAME="Example159">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

opendir(DIR,&quot;/tmp&quot;);

readdir(DIR);

print(&quot;telldir() &quot;,telldir(DIR),&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="tie"><FONT SIZE=5 COLOR=#FF0000>

tie</FONT></A></H2>

<H3><A NAME="Compliance211">

Compliance</A></H3>

<H3><A NAME="Syntax211">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (class)

Arguments&nbsp;&nbsp;variable, classname, list

Return Value&nbsp;&nbsp;object

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition211">

Definition</A></H3>

<P>

This function binds a variable to a package class. It creates

an instance of this class by running the <TT>new()</TT> method

associated with that class. Any parameters for the <TT>new()</TT>

method may be specified in the list.

<P>

The behavior depends on the way the package class is written,

and on the type of variable. Most common are package classes written

to support associative arrays. In particular, package classes

exist to bind associative arrays to various databases.

<P>

The <TT>tie()</TT> mechanism hides all the complexities of implemention

behind a simple interface so that, for example, the records in

a database can be accessed by looking at the associative array

bound to the database though an appropriate package class.

<P>

The example here uses the Configure.pm module. This module gives

access to information about the machine on which Perl was installed.

It is possible to bind an associative array to this class and

examine it to find out the value of any of the configuration parameters.

<H3><A NAME="Example160">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

use Configure;

$return = tie %c, Configure;

print(&quot;tie() returned \&quot;$return\&quot; and &quot;,

	&quot;a sample value is $c{installbin}\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="tied"><FONT SIZE=5 COLOR=#FF0000>

tied</FONT></A></H2>

<H3><A NAME="Compliance212">

Compliance</A></H3>

<H3><A NAME="Syntax212">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator

Arguments&nbsp;&nbsp;variable

Return Value&nbsp;&nbsp;object

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition212">

Definition</A></H3>

<P>

This function was first implemented in Perl 5.002 and returns

a reference to the object that the variable is an instance of.

This is same as is returned by the original call to <TT>tie()</TT>

when it is bound.

<H2><A NAME="time"><FONT SIZE=5 COLOR=#FF0000>

time</FONT></A></H2>

<H3><A NAME="Compliance213">

Compliance</A></H3>

<H3><A NAME="Syntax213">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;(time)

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;time

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition213">

Definition</A></H3>

<P>

This function returns the time, in seconds, since 1 January 1970.

The format can be converted into more useful parts using <TT>gmtime()</TT>

or <TT>localtime()</TT>.

<H2><A NAME="times"><FONT SIZE=5 COLOR=#FF0000>

times</FONT></A></H2>

<H3><A NAME="Compliance214">

Compliance</A></H3>

<H3><A NAME="Syntax214">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;(process)

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;list

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition214">

Definition</A></H3>

<P>

This function returns a list of four elements representing the

time, in seconds, used. The four elements represent the system

time and the user time used by the current process and child processes.

<H3><A NAME="Example161">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

($usertime,$systemtime,$childsystem,$childuser) = times();

print(&quot;times() $usertime $systemtime $childsystem $childuser\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="tr"><FONT SIZE=5 COLOR=#FF0000>

tr///</FONT></A></H2>

<H3><A NAME="Compliance215">

Compliance</A></H3>

<H3><A NAME="Syntax215">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;(string)

Arguments&nbsp;&nbsp;tr/searchlist/replacelist/&lt;options&gt;

Return Value&nbsp;&nbsp;numeric

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition215">

Definition</A></H3>

<P>

This function translates all occurrences of items in the search

list with the equivalent items in the replacement list. The string

searched is the default search string bound by <TT>=~</TT> or

<TT>!=</TT>, or if no string is bound to the pattern match, the

<TT>$_</TT> string is used. The return value is the number of

characters translated or deleted.

<P>

The valid options are<BR>



<P>

<CENTER>

<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>

<TR VALIGN=TOP><TD WIDTH=96><CENTER><B>Option</B></CENTER></TD><TD WIDTH=384><B>Description</B>

</TD></TR>

<TR VALIGN=TOP><TD WIDTH=96><CENTER>c</CENTER></TD><TD WIDTH=384>Complement (non-matching characters in search list are used)

</TD></TR>

<TR VALIGN=TOP><TD WIDTH=96><CENTER>d</CENTER></TD><TD WIDTH=384>Delete (delete any characters not in search list, as well as trans-lating)

</TD></TR>

<TR VALIGN=TOP><TD WIDTH=96><CENTER>s</CENTER></TD><TD WIDTH=384>Squash (if the trasnslation results in a sequence of repeated characters from the replace list, then reduce this to one occurance of the character)

</TD></TR>

</TABLE></CENTER>

<P>

<P>

The <TT>searchlist</TT> and the <TT>replacelist</TT> may contain

the character to indicate a range of characters.

<H3><A NAME="Examples">

Examples</A></H3>

<BLOCKQUOTE>

<PRE>

tr/AEIOU/aeiou/	     # Make all vowels lowercase

tr/[A-M]/[a-m]/	     # Make first half of alphabet lowercase

tr/aeiou/ /c	     # Replace all non-vowles with space

tr/aeiou/AEIOU/d     # Make all vowels uppercase and remove 

	             # all other characters

tr/aeiou/-/s	     # Replace all vowels with -, 

	             # but only one - for adjacent vowels

</PRE>

</BLOCKQUOTE>

<H2><A NAME="truncate"><FONT SIZE=5 COLOR=#FF0000>

truncate</FONT></A></H2>

<H3><A NAME="Compliance216">

Compliance</A></H3>

<H3><A NAME="Syntax216">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (i/o)

Arguments&nbsp;&nbsp;handle, length

Arguments&nbsp;&nbsp;expression, length

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition216">

Definition</A></H3>

<P>

This function truncates the file referenced by the file <TT>handle</TT>

to <TT>length</TT>. An expression can be used that evaluates to

the file <TT>handle,</TT> if the operating system does not implement

this feature.

<H2><A NAME="uc"><FONT SIZE=5 COLOR=#FF0000>

uc</FONT></A></H2>

<H3><A NAME="Compliance217">

Compliance</A></H3>

<H3><A NAME="Syntax217">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (string)

Arguments&nbsp;&nbsp;expression

Return Value&nbsp;&nbsp;string

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition217">

Definition</A></H3>

<P>

This function returns an uppercase version of the specified <TT>expression</TT>.

<H3><A NAME="Example162">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;uc() &quot;,uc(&quot;This is All Caps&quot;), &quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="ucfirst"><FONT SIZE=5 COLOR=#FF0000>

ucfirst</FONT></A></H2>

<H3><A NAME="Compliance218">

Compliance</A></H3>

<H3><A NAME="Syntax218">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (string)

Arguments&nbsp;&nbsp;expression

Return Value&nbsp;&nbsp;string

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition218">

Definition</A></H3>

<P>

This function returns a <TT>string</TT> with the first character

of the <TT>expression</TT> in uppercase.

<H3><A NAME="Example163">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;ucfirst() &quot;,ucfirst(&quot;this is Capitalized&quot;), &quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="umask"><FONT SIZE=5 COLOR=#FF0000>

umask</FONT></A></H2>

<H3><A NAME="Compliance219">

Compliance</A></H3>

<H3><A NAME="Syntax219">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (files)

Arguments&nbsp;&nbsp;newumask

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;oldumask

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition219">

Definition</A></H3>

<P>

This function sets the file mask using the specified <TT>newumask</TT>.

It returns the <TT>oldumask</TT> so that it can be stored and

restored later if required. If called without any arguments, it

returns the current umask. This is the mechanism UNIX uses to

modify the permissions of any files created.

<H3><A NAME="Example164">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

print(&quot;umask() The current umask is: &quot;,umask,&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="undef"><FONT SIZE=5 COLOR=#FF0000>

undef</FONT></A></H2>

<H3><A NAME="Compliance220">

Compliance</A></H3>

<H3><A NAME="Syntax220">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (misc)

Arguments&nbsp;&nbsp;expression

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;value

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition220">

Definition</A></H3>

<P>

This function undefines the value of the expression. The expression

may be a scalar value, and array, or a subroutine (specified with

a <TT>&amp;</TT> prefix). When called without an expression, this

function returns an undefined value.

<H2><A NAME="unlink"><FONT SIZE=5 COLOR=#FF0000>

unlink</FONT></A></H2>

<H3><A NAME="Compliance221">

Compliance</A></H3>

<H3><A NAME="Syntax221">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (files)

Arguments&nbsp;&nbsp;list

Return Value&nbsp;&nbsp;numeric

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition221">

Definition</A></H3>

<P>

This function deletes the files in the <TT>list</TT> and returns

the number of files deleted.

<H3><A NAME="Example165">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

system(&quot;touch /tmp/t.tst&quot;);

print(&quot;unlink() &quot;,unlink(&quot;/tmp/t.tst&quot;),&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="unpack"><FONT SIZE=5 COLOR=#FF0000>

unpack</FONT></A></H2>

<H3><A NAME="Compliance222">

Compliance</A></H3>

<H3><A NAME="Syntax222">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (data)

Arguments&nbsp;&nbsp;template, expression

Return Value&nbsp;&nbsp;list

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition222">

Definition</A></H3>

<P>

This function unpacks data that are packed with <TT>pack()</TT>.

It uses the same template mechanism to specify the format of the

data in the packed string. In a scalar context, the first value

in the list is returned.

<H2><A NAME="unshift"><FONT SIZE=5 COLOR=#FF0000>

unshift</FONT></A></H2>

<H3><A NAME="Compliance223">

Compliance</A></H3>

<H3><A NAME="Syntax223">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (array)

Arguments&nbsp;&nbsp;array, list

Return Value&nbsp;&nbsp;numeric

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition223">

Definition</A></H3>

<P>

This function prepends the list to the front of the specified

<TT>array</TT> and returns the new number of elements in <TT>array</TT>.

<H3><A NAME="Example166">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

@a = (a, b, c);

$ret = unshift(@a, 1, 2, 3);

print(&quot;unshift() Array has $ret elements:&quot;,@a,&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="untie"><FONT SIZE=5 COLOR=#FF0000>

untie</FONT></A></H2>

<H3><A NAME="Compliance224">

Compliance</A></H3>

<H3><A NAME="Syntax224">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (class)

Arguments&nbsp;&nbsp;variable

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition224">

Definition</A></H3>

<P>

This function undoes the bining between a variable and a <TT>package</TT>

class that was created using <TT>tie()</TT>.

<H2><A NAME="use"><FONT SIZE=5 COLOR=#FF0000>

use</FONT></A></H2>

<H3><A NAME="Compliance225">

Compliance</A></H3>

<H3><A NAME="Syntax225">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (module)

Arguments&nbsp;&nbsp;module, list

Return Value&nbsp;&nbsp;N/A

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition225">

Definition</A></H3>

<P>

This function imports the specified module into the current block.

The <TT>import()</TT> method defined for the package class represented

by the module is evaluated. The specified list is passed as optional

arguments to this <TT>import()</TT> method. If you do not specify

a list argument, then the default methods for that module will

be those imported. You can specify the empty <TT>list()</TT> in

order to avoid adding any items to the local namespace.

<H3><A NAME="Example167">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

use English;

</PRE>

</BLOCKQUOTE>

<P>

Note that this is the mechanism for implementing compiler directives

known as pragmas.You can for example force all arithmetic to be

integer-based by

<BLOCKQUOTE>

<PRE>

use integer; 

</PRE>

</BLOCKQUOTE>

<P>

And then this can be turned off again with

<BLOCKQUOTE>

<PRE>

no integer;

</PRE>

</BLOCKQUOTE>

<H2><A NAME="utime"><FONT SIZE=5 COLOR=#FF0000>

utime</FONT></A></H2>

<H3><A NAME="Compliance226">

Compliance</A></H3>

<H3><A NAME="Syntax226">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (files)

Arguments&nbsp;&nbsp;list

Return Value&nbsp;&nbsp;numeric

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition226">

Definition</A></H3>

<P>

This function sets the access and modification time of all the

files in the <TT>list</TT> to the time specified in the first

two items in the list. The time must be in the numeric format

(that is, seconds since 1 Januray 1970) as returned by the <TT>time()</TT>

function.

<H3><A NAME="Example168">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

$time = now;

print(&quot;utime() &quot;,utime($time,$time,&quot;/tmp/t.tst&quot;),&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="values"><FONT SIZE=5 COLOR=#FF0000>

values</FONT></A></H2>

<H3><A NAME="Compliance227">

Compliance</A></H3>

<H3><A NAME="Syntax227">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;named unary operator (hash)

Arguments&nbsp;&nbsp;variable

Return Value&nbsp;&nbsp;list

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition227">

Definition</A></H3>

<P>

This function returns the array comprising all the values in the

associate array specified. In a scalar context, it returns the

number of values in the array.

<H3><A NAME="Example169">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

%a = (1, &quot;one&quot;, 2, &quot;two&quot;, 3, &quot;three&quot;);

print(&quot;vaules() &quot;,values(%a),&quot;\n);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="vec"><FONT SIZE=5 COLOR=#FF0000>

vec</FONT></A></H2>

<H3><A NAME="Compliance228">

Compliance</A></H3>

<H3><A NAME="Syntax228">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (fixed)

Arguments&nbsp;&nbsp;expression, offset, bits

Return Value&nbsp;&nbsp;value

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition228">

Definition</A></H3>

<P>

This function uses the string specified by <TT>expression</TT>

as a vector of unsigned integers. The return value is the value

of the bitfield specified by <TT>offset</TT>. The specified bits

are the number of bits that are reserved for each entry in the

bit vector. This must be a power of 2 from 1 to 32. Note that

the <TT>offset</TT> is the marker for the end of the vector, and

it counts back the number of bits specified to find the start.

<P>

Vectors can be manipulated with the logical bitwise operators

<TT>|</TT>, <TT>&amp;</TT>, and <TT>^</TT>.

<H3><A NAME="Example170">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

$vec = '';

vec($vec,3,4) = 1;	# bits 0 to 3

vec($vec,7,4) = 10;	# bits 4 to 7

vec($vec,11,4) = 3;	# bits 8 to 11

vec($vec,15,4) = 15;	# bits 12 to 15

# As there are 4 bits per number this can be decoded by 

# unpack() as a hex number

print(&quot;vec() Has created a string of nybbles, in hex: &quot;,

	unpack(&quot;h*&quot;,$vec),&quot;\n&quot;);

</PRE>

</BLOCKQUOTE>

<H2><A NAME="wait"><FONT SIZE=5 COLOR=#FF0000>

wait</FONT></A></H2>

<H3><A NAME="Compliance229">

Compliance</A></H3>

<H3><A NAME="Syntax229">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;(process)

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;pid

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition229">

Definition</A></H3>

<P>

This function waits for a child process to exit. It returns the

process ID (<TT>pid</TT>) of the terminated process and <TT>-1</TT>

if there are no child processes.

<H2><A NAME="waitpid"><FONT SIZE=5 COLOR=#FF0000>

waitpid</FONT></A></H2>

<H3><A NAME="Compliance230">

Compliance</A></H3>

<H3><A NAME="Syntax230">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (process)

Arguments&nbsp;&nbsp;pid, flags

Return Value&nbsp;&nbsp;pid

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition230">

Definition</A></H3>

<P>

This function waits for a specified child process to exit and

returns <TT>pid</TT> of the terminated process and <TT>-1</TT>

if there is no child process matching the <TT>pid</TT> specified.

The <TT>flags</TT> can be set to various values that are equivalent

to the <TT>waitpid()</TT> UNIX system call (if the operating system

supports this), a <TT>flags</TT> value of <TT>0</TT> should work

on all operating systems supporting processes.

<H2><A NAME="wantarray"><FONT SIZE=5 COLOR=#FF0000>

wantarray</FONT></A></H2>

<H3><A NAME="Compliance231">

Compliance</A></H3>

<H3><A NAME="Syntax231">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;(flow)

Arguments&nbsp;&nbsp;none

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition231">

Definition</A></H3>

<P>

This function returns <TT>1</TT> if the current context is an

array context; otherwise, it returns <TT>''</TT>. This construct

is most often used to return two alternatives from a subroutine,

depending on the calling context.

<H3><A NAME="Example171">

Example</A></H3>

<BLOCKQUOTE>

<PRE>

return wantarray ? (8, 4, 33) : 3;

</PRE>

</BLOCKQUOTE>

<H2><A NAME="warn"><FONT SIZE=5 COLOR=#FF0000>

warn</FONT></A></H2>

<H3><A NAME="Compliance232">

Compliance</A></H3>

<H3><A NAME="Syntax232">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (i/o)

Arguments&nbsp;&nbsp;list

Return Value&nbsp;&nbsp;1 (true) '' (false)

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition232">

Definition</A></H3>

<P>

This function prints the supplied list to <TT>STDERR</TT>, like

<TT>die()</TT>. If there is no newline in the list, <TT>warn()</TT>

appends the text <TT>at line &lt;line number&gt;\n</TT> to the

message. However, the script will continue after a <TT>warn()</TT>.

<H2><A NAME="write"><FONT SIZE=5 COLOR=#FF0000>

write</FONT></A></H2>

<H3><A NAME="Compliance233">

Compliance</A></H3>

<H3><A NAME="Syntax233">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;list operator (i/o)

Arguments&nbsp;&nbsp;expression

Arguments&nbsp;&nbsp;handle

Arguments&nbsp;&nbsp;none

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition233">

Definition</A></H3>

<P>

This function writes a formatted record to the file <TT>handle</TT>

(or the file <TT>handle</TT> that the expression evaluates to).

If no file <TT>handle</TT> is specified, the default is <TT>STDOUT</TT>;

this can be altered using <TT>select()</TT> if necessary.

<P>

A format for use by that file <TT>handle</TT> must have been declared

using the <TT>format()</TT> function. This defaults to the name

of the file <TT>handle</TT> being used, but other format names

can be associated with the current <TT>write()</TT> operation

using the <TT>$FORMAT_NAME</TT> (<TT>$~</TT>) special variable.

<H2><A NAME="y"><FONT SIZE=5 COLOR=#FF0000>

y///</FONT></A></H2>

<H3><A NAME="Compliance234">

Compliance</A></H3>

<H3><A NAME="Syntax234">

Syntax</A></H3>

<BLOCKQUOTE>

<PRE>

Category&nbsp;&nbsp;(string)

Arguments&nbsp;&nbsp;y/searchlist/replacelist/&lt;options&gt;

Return Value&nbsp;&nbsp;numeric

</PRE>

</BLOCKQUOTE>

<H3><A NAME="Definition234">

Definition</A></H3>

<P>

The <TT>y///</TT> operator is a synonym for the translation operator

<TT>tr///</TT>.

<HR>



<CENTER><P><A HREF="ch14.htm" tppabs="http://www.mcp.com/818726400/0-7897/0-7897-0659-8/ch14.htm"><IMG SRC="pc.gif" tppabs="http://www.mcp.com/818726400/0-7897/0-7897-0659-8/pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>

<A HREF="#CONTENTS"><IMG SRC="cc.gif" tppabs="http://www.mcp.com/818726400/0-7897/0-7897-0659-8/cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>

<A HREF="index.htm" tppabs="http://www.mcp.com/818726400/0-7897/0-7897-0659-8/index.htm"><IMG SRC="hb.gif" tppabs="http://www.mcp.com/818726400/0-7897/0-7897-0659-8/hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>

<A HREF="ch16.htm" tppabs="http://www.mcp.com/818726400/0-7897/0-7897-0659-8/ch16.htm"><IMG SRC="nc.gif" tppabs="http://www.mcp.com/818726400/0-7897/0-7897-0659-8/nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>

<HR WIDTH="100%"></P></CENTER>

</BODY>

</HTML>



