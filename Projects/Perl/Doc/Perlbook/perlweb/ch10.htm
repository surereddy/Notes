<HTML>

<HEAD>

<TITLE>Chapter 10 -- Site Administration</TITLE>



<META>

</HEAD>

<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">

<H1><FONT SIZE=6 COLOR=#FF0000>Chapter&nbsp;10</FONT></H1>

<H1><FONT SIZE=6 COLOR=#FF0000>Site Administration</FONT></H1>

<P>

<I><B>by Shelley Powers</B></I>

<HR>

<P>

<CENTER><B><FONT SIZE=5><A NAME="CONTENTS">CONTENTS</A></FONT></B></CENTER>

<UL>

<LI><A HREF="#WorkingwithWebServerLogFiles">

Working with Web Server Log Files</A>

<UL>

<LI><A HREF="#GeneratingHTMLOutputfromaLogFile">

Generating HTML Output from a Log File</A>

<LI><A HREF="#ReviewingtheAccessWatchLogAnalyzer">

Reviewing the AccessWatch Log Analyzer</A>

</UL>

<LI><A HREF="#UnderstandingFileMaintenance">

Understanding File Maintenance</A>

<LI><A HREF="#UnderstandingRobotsandtheRobotExclusionStandard">

Understanding Robots and the Robot-Exclusion Standard</A>

<LI><A HREF="#ConfiguringSomeCommonWebServers">

Configuring Some Common Web Servers</A>

<UL>

<LI><A HREF="#OReillysWebSite">

O'Reilly's WebSite</A>

<LI><A HREF="#NCSAhttpd">

NCSA httpd</A>

<LI><A HREF="#Apache">

Apache</A>

</UL>

<LI><A HREF="#ExaminingSomeOtherFileandSiteAdministrationIssues">

Examining Some Other File- and Site-Administration Issues

</A>

<LI><A HREF="#FromHere">

From Here   </A>

</UL>



<HR>

<P>

Previous chapters discussed creating both static and dynamic content

as well as security. Two facts arise from this file creation:

Files are generated, and maintenance must be maintained on your

site if it is to perform at peak efficiency.

<P>

Depending on your Web server, you need to perform some configuration

when you install the server, and you need to perform periodic

maintenance. A detailed description of what is involved is beyond

the scope of this book, but some maintenance tasks can be performed

by Perl programs. This chapter discusses configuring the Apache

Web server (from the Apache Group) and NCSA's httpd Web server.

<P>

The most useful tool for understanding how and when your Web site

pages and applications are being accessed is the log file that

your Web server generates. This log file can show, among other

things, which pages are being accessed, by whom (usually, in a

generic sense), and when.

<P>

Additionally, if your site runs Common Gateway Interface (CGI)

or other applications, you most likely need applications that

remove orphaned files from processes that the Web page reader

began but never finished.

<P>

Your site may be visited by something other than humans. Web robots-also

known as Web bots, spiders, and wanderers-may visit your site.

This technique is how search engines, such as WebCrawler <B>(<A HREF="tppmsgs/msgs0.htm#9" tppabs="http://www.webcrawler.com/">http://www.webcrawler.com</A>)</B>,

search for sites to add to their collections. Sometimes, these

visitors take a quick peek around and leave quietly, and sometimes,

they don't.

<H2><A NAME="WorkingwithWebServerLogFiles"><FONT SIZE=5 COLOR=#FF0000>

Working with Web Server Log Files</FONT></A></H2>

<P>

Each Web server provides some form of log file that records who

and what accesses a specific HTML page or graphic. A terrific

site called WebCompare (<B><A HREF="tppmsgs/msgs0.htm#10" tppabs="http://www.webcompare.com/">http://www.webcompare.com/</A></B>) provides

an overall comparison of the major Web servers. From this site,

you can see which Web servers follow the CERN/NCSA common log

format, which is detailed next. In addition, you can find out

which sites can customize log files or write to multiple log files.

You may be surprised by the number of Web servers that are on

the market.

<P>

Most major Web servers provide certain information in their access

log files. You can find the format for this information at <B><A HREF="tppmsgs/msgs0.htm#11" tppabs="http://www.w3.org/pub/WWW/Daemon/User/Config/Logging.html#common-logfile-format">http://www.w3.org/pub/WWW/Daemon/User/Config/Logging.html#common-logfile-format</A></B>.

That site contains the following line:

<BLOCKQUOTE>

<PRE>

remotehost rfc931 authuser [date] &quot;request&quot; status bytes

</PRE>

</BLOCKQUOTE>

<P>

The items listed in the preceding line are:

<UL>

<LI><TT>remotehost</TT>: host name or IP address of remote host

<LI><TT>rfc931</TT>: remote log name of the user

<LI><TT>authuser</TT>: user name (if authentication occurs)

<LI><TT>date</TT>: date and time of request

<LI><TT>request</TT>: full HTTP request, including any data associated

with the request

<LI><TT>status</TT>: HTTP status code

<LI><TT>bytes</TT>: content length of requested document

</UL>

<P>

Following is an example of a log-file listing from a log file

generated by O'Reilly's WebSite Web server in Windows NT:

<BLOCKQUOTE>

<PRE>

204.31.113.138 www.yasd.com - [03/Jul/1996:06:56:12 -0800] 

&quot;GET /PowerBuilder/Compny3.htm HTTP/1.0&quot; 200 5593

</PRE>

</BLOCKQUOTE>

<P>

Figure 10.1 shows an example of a log file generated by the Apache

Web server.

<P>

<A HREF="f10-1.gif" tppabs="http://www.mcp.com/818726400/0-7897/0-7897-0659-8/f10-1.gif"><B> Figure 10.1 : </B><I>This log file was created by the NCSA Apache Web server.



</I></A><P>

<P>

Both Web servers provide the date and time when the HTTP request

was made, the HTTP request, and the status. The first example

does not have access to DNSLookup, which would pull up the DNS

alias for the IP address, if available. The second example shows

the DNS alias. In addition, the first example displays the site

that is accessed (in this case, <B>www.yasd.com</B>). The second

example would display the remote log name if the Web server could

access it; because it cannot, it displays <TT>unknown</TT>. Finally,

because none of the HTTP requests were made to a secure site,

there is no authorized user name that would have displayed where

the dash (-) is.

<P>

Each HTTP request is logged. The first request is for an HTML

document, and the second is for a JPEG-format graphic. If a site

has several graphics and pages, the log file can get rather large.

In addition, pulling useful information from the log file is difficult

if you try to read the file as it is.

<P>

To pull useful information out of log files, most people use one

of the existing log-file analyzers or create their own. These

utilities can generate a text-file analysis based in HTML and

even display results in graphic form. A good place to look for

existing freeware, shareware, or commercial log-analysis tools

is the Yahoo subdirectory <B><A HREF="tppmsgs/msgs0.htm#12" tppabs="http://www.yahoo.com/Computers_and_Internet/Internet/World_Wide_Web/HTTP/Servers/Log_Analysis_Tools/">http://www.yahoo.com/Computers_and_Internet/Internet/World_Wide_Web/HTTP/Servers/Log_Analysis_Tools/</A></B>.

<P>

The following two sections provide samples of Perl code that can

access a log file and generate two types of output: an HTML document

and a VRML (Virtual Reality Modeling Language) document.

<H3><A NAME="GeneratingHTMLOutputfromaLogFile">

Generating HTML Output from a Log File</A></H3>

<P>

Regardless of the type of output, you must open a log file and

read in the entries. You can read an entry into one variable for

processing, or you can split the entry into its components. To

read an entry as-is in Perl, you use the following code sample:

<BLOCKQUOTE>

<PRE>

open(LOG_FILE, &quot;&lt; &quot; . $file_name) || die &quot;Could not open log file.&quot;;

foreach $line(&lt;LOG_FILE&gt;) {

     // do some processing

  .

  .

  .

}

</PRE>

</BLOCKQUOTE>

<P>

This code opens the log file for reading and accesses the file

one line at a time, loading the line into the variable <TT>$line</TT>.

To split the contents of the line, use the following code, which

is the same as the preceding code sample except for the addition

of a <TT>split</TT> command:

<BLOCKQUOTE>

<PRE>

open(LOG_FILE, &quot;&lt; &quot; . $file_name) || die &quot;Could not open log file.&quot;;

foreach $line(&lt;LOG_FILE&gt;) {

     // do some processing

     ($dns, $rfcuser,$authuser,$dt1,$dt2,$commethod,$comnd,$stat,$lnth) = split(' ',$line);

  .

  .

}

</PRE>

</BLOCKQUOTE>

<P>

The preceding code splits the access log entry in either of the

log-file examples shown in &quot;Working with Web Server Log Files&quot;

earlier in this chapter. You can also load the entry elements

directly into an array, as follows:

<BLOCKQUOTE>

<PRE>

open(LOG_FILE, &quot;&lt; &quot; . $file_name) || die &quot;Could not open log file.&quot;;

foreach $line(&lt;LOG_FILE&gt;) {

     // do some processing

     ($dns, $rfcuser,$authuser,$dt1,$dt2,$commethod,$comnd,$stat,$lnth) = split(' ',$line);

  .

  .

}

</PRE>

</BLOCKQUOTE>

<P>

When you have access to the log entries, you can use the values

to generate HTML, based on several factors. If you want to generate

an HTML file that lists the number of accesses by document, you

can code something like the following:

<BLOCKQUOTE>

<PRE>

#!/usr/local/bin/perl

.

.

use CGI;

$query = new CGI;

.

.

open(LOG_FILE, &quot;&lt; &quot; . $file_name) || die &quot;Could not open log file.&quot;;

foreach $line(&lt;LOG_FILE&gt;) {

     // do some processing

     ($dns, $rfcuser,$authuser,$dt1,$dt2,$commethod,$comnd,$stat,$lnth) = split(' ',$line);

  .

  .

     if (index($comnd, &quot;somedoc.html&quot;) &gt;= 0) {

          $counter++;

       .

       .

     }

}

</PRE>

</BLOCKQUOTE>

<P>

Then you can output the variables by using standard HTML output

procedures, as follows:

<BLOCKQUOTE>

<PRE>

print $query-&gt;header;

print $query-&gt;start_html('The Access Page');

print $query-&gt;h1(&quot;Accesses Per Page&quot;);

.

.

print &quot;&lt;p&gt; Page somedoc.html was accessed &quot; . $counter .&quot; times&quot;;

</PRE>

</BLOCKQUOTE>

<P>

An alternative method that can provide some graphics output is

to print an asterisk (<TT>*</TT>) for each access. This method

provides output similar to that shown in figure 10.2.

<P>

<A HREF="f10-2.gif" tppabs="http://www.mcp.com/818726400/0-7897/0-7897-0659-8/f10-2.gif"><B> Figure 10.2 : </B><I>This figure shows the log-file analysis results.



</I></A><P>

<P>

To do something like creating a text-based graphic, you should

modify the code to output the results by using an HTML table,

as in the following example:

<BLOCKQUOTE>

<PRE>

print $query-&gt;header;

print $query-&gt;start_html('The Access Page');

print $query-&gt;h1(&quot;Accesses Per Page&quot;);

.

.

print &quot;&lt;table cellpadding=5&gt;&quot;;

print &quot;&lt;tr&gt;&lt;td&gt; somedoc.html &lt;/td&gt;&lt;td&gt;&quot;;

for (i = 1; I &lt;= $counter; i++) {

     print &quot;*&quot;;

     }

print &quot;&lt;/td&gt;&lt;/tr&gt;&quot;;

.

.

print &quot;&lt;/table&gt;&quot;;

</PRE>

</BLOCKQUOTE>

<H3><A NAME="ReviewingtheAccessWatchLogAnalyzer">

Reviewing the AccessWatch Log Analyzer</A></H3>

<P>

Several excellent log-analysis tools, written in a variety of

programming languages, are available free or for a small fee.

A particular favorite of mine is AccessWatch, by Dave Maher. Access

Watch-a simple-to-use, easy-to-understand Perl application that

provides sophisticated output with minimal complex, convoluted

coding-is accessible on the CD-ROM that comes with this book.

This tool is a favorite of mine not only because of its unusual

and colorful output (see figs. 10.3, 10.4, and 10.5), but also

because of how well the author documented the installation and

configuration procedures.

<P>

<A HREF="f10-3.gif" tppabs="http://www.mcp.com/818726400/0-7897/0-7897-0659-8/f10-3.gif"><B> Figure 10.3 : </B><I>This figure shows AccessWatch's summary statistics.



</I></A><P>

<P>

<A HREF="f10-4.gif" tppabs="http://www.mcp.com/818726400/0-7897/0-7897-0659-8/f10-4.gif"><B> Figure 10.4 : </B><I>This figure shows AccessWatch's hourly statistics.



</I></A><P>

<P>

<A HREF="f10-5.gif" tppabs="http://www.mcp.com/818726400/0-7897/0-7897-0659-8/f10-5.gif"><B> Figure 10.5 : </B><I>This figure shows AccessWatch's page demand.



</I></A><P>

<P>

AccessWatch is not a CGI application; it is meant to be run manually

or set to run as a <TT>cron</TT> job (more on <TT>cron</TT> later

in this chapter). The application generates an HTML document called

<TT>index.html</TT>, which can then be accessed with a Web browsing

tool. AccessWatch analyzes the current day's accesses and provides

statistics such as the number of accesses by hour and a projection

of the total count for the day based on previous access patterns.

In addition, the application displays a graphic representing the

number of accesses for each target file; you can display the detailed

access information, if you want.

<P>

One innovative aspect of AccessWatch is the graphics. Other applications

use one technique or another to generate a graphics-based log

analysis. The program 3DStats, written in C, generates VRML commands

to create a 3-D model of log accesses. You can access this application

at <B><A HREF="tppmsgs/msgs0.htm#13" tppabs="http://www.netstore.de/Supply/3Dstats/">http://www.netstore.de/Supply/3Dstats/</A></B>.<B> </B>Another

program, Getgraph, is a Perl application that uses tools such

as GIFTrans and gnuplot to create GIF files for display. You can

find Getgraph at <B><A HREF="tppmsgs/msgs0.htm#14" tppabs="http://www.tcp.chem.tue.nl/stats/script/">http://www.tcp.chem.tue.nl/stats/script/</A></B>.<B>

</B>Other log-analysis tools that provide graphical output are

gwstat (<B><A HREF="tppmsgs/msgs0.htm#15" tppabs="http://dis.cs.umass.edu/stats/gwstat.html">http://dis.cs.umass.edu/stats/gwstat.html</A></B>),<B>

</B>which uses Xmgr; and Raytraced Access Stats (<B><A HREF="tppmsgs/msgs0.htm#16" tppabs="http://web.sau.edu/~mkruse/www/scripts/access3.html">http://web.sau.edu/</B>~<B>mkruse/www/scripts/access3.html</A></B>),

which uses the POV-Ray raytracer<B>.</B>

<P>

AccessWatch creates small GIF files that form the bars of the

display. The application includes a subroutine that generates

the HTML to display the appropriate GIF file as a vertical bar

(see Listing 10.1) or as a horizontal bar (see Listing 10.2).

<HR>

<BLOCKQUOTE>

<B>Listing 10.1&nbsp;&nbsp;Displaying a GIF File as a Vertical

Bar (accesswatch.pl: PrintVertBar)<BR>

</B>

</BLOCKQUOTE>

<BLOCKQUOTE>

<PRE>

#----------------------------------------------------------------------------#

#  AccessWatch function - PrintBarVert

#    Purpose  : Prints a vertical bar with height as specified by argument.

#----------------------------------------------------------------------------#

sub PrintBarVert {

    local($pct) = $_[0];

    local($colorbar) = $vertbar{$_[1]};



    local($scale) = 0;

    $scale = $pct/$stat{'maxhouraccess'} * 200 if ($stat{'maxhouraccess'});



    print OUT &quot;&lt;IMG SRC=\&quot;$colorbar\&quot; &quot;;

    printf OUT (&quot;HEIGHT=%d WIDTH=10 BORDER=1 ALT=\&quot;\&quot;&gt;&quot;, $scale);

}

</PRE>

</BLOCKQUOTE>

<HR>

<HR>

<BLOCKQUOTE>

<B>Listing 10.2&nbsp;&nbsp;Displaying a GIF File as a Horizontal

Bar (accesswatch.pl: PrintBarHoriz)<BR>

</B>

</BLOCKQUOTE>

<BLOCKQUOTE>

<PRE>

#----------------------------------------------------------------------------#

#  AccessWatch function - PrintBarHoriz

#    Purpose  : Prints a horizontal bar with width as specified by argument.

#----------------------------------------------------------------------------#

sub PrintBarHoriz {

    local($pct) = $_[0];

    local($colorbar) = $horizbar{$_[1]};

    local($scale) = 1;



    $scale = ($pct*8)/log $pct + 1 if ($pct &gt; 0);

    print OUT &quot;&lt;IMG SRC=\&quot;$colorbar\&quot; ALT=\&quot;&quot;;

    print OUT &quot;*&quot; x ($pct/3 + 1) . &quot;\&quot; &quot;;

    printf OUT (&quot;HEIGHT=15 WIDTH=%d BORDER=1&gt;&quot;, $scale);

}

</PRE>

</BLOCKQUOTE>

<HR>

<P>

To use the <TT>PrintBarVert</TT> subroutine, the height is calculated

and passed as an argument. This process is demonstrated in the

subroutine <TT>PrintTableHourlyStats</TT> (see Listing 10.3),

which prints the hourly statistics.

<HR>

<BLOCKQUOTE>

<B>Listing 10.3&nbsp;&nbsp;HTML Generating the Hourly Access Statistics

(accesswatch.pl: PrintTableHourlyStats)<BR>

</B>

</BLOCKQUOTE>

<BLOCKQUOTE>

<PRE>

#----------------------------------------------------------------------------#

#  AccessWatch function - PrintTableHourlyStats

#    Purpose  : Prints bar graph of accesses over the course of the current

#                   day. Thanks very much to Paul Blackman for his work on

#                   this function.

#----------------------------------------------------------------------------#

sub PrintTableHourlyStats {



local($hourBar) = &quot;img/hourbar.gif&quot;;

local($hour, $pct);



    print OUT &lt;&lt;EOM;

&lt;TABLE BORDER=1 WIDTH=100%&gt;

&lt;TR&gt;&lt;TH COLSPAN=3&gt;&lt;HR SIZE=5&gt;Hourly Statistics&lt;HR SIZE=5&gt;&lt;/TH&gt;&lt;/TR&gt;

&lt;TR&gt;

EOM

    print OUT &quot;&lt;TD ROWSPAN=11&gt;&quot;;

    foreach $hour ('00'..'23') {

     if ($stat{'hr'.$hour} &gt; 0.9*$stat{'maxhouraccess'}) {

         &amp;PrintBarVert($stat{'hr'.$hour}, 9);

     }

     elsif ($stat{'hr'.$hour} &gt; 0.8*$stat{'maxhouraccess'}) {

         &amp;PrintBarVert($stat{'hr'.$hour}, 8);

     }

     elsif ($stat{'hr'.$hour} &gt; 0.7*$stat{'maxhouraccess'}) {

         &amp;PrintBarVert($stat{'hr'.$hour}, 7);

     }

     elsif ($stat{'hr'.$hour} &gt; 0.6*$stat{'maxhouraccess'}) {

         &amp;PrintBarVert($stat{'hr'.$hour}, 6);

     }

     elsif ($stat{'hr'.$hour} &gt; 0.5*$stat{'maxhouraccess'}) {

         &amp;PrintBarVert($stat{'hr'.$hour}, 5);

     }

     elsif ($stat{'hr'.$hour} &gt; 0.4*$stat{'maxhouraccess'}) {

         &amp;PrintBarVert($stat{'hr'.$hour}, 4);

     }

     elsif ($stat{'hr'.$hour} &gt; 0.3*$stat{'maxhouraccess'}) {

         &amp;PrintBarVert($stat{'hr'.$hour}, 3);

     }

     elsif ($stat{'hr'.$hour} &gt; 0.2*$stat{'maxhouraccess'}) {

         &amp;PrintBarVert($stat{'hr'.$hour}, 2);

     }

     elsif ($stat{'hr'.$hour} &gt; 0.1*$stat{'maxhouraccess'}) {

         &amp;PrintBarVert($stat{'hr'.$hour}, 1);

     }

     elsif ($stat{'hr'.$hour} &gt; 0) {

         &amp;PrintBarVert($stat{'hr'.$hour}, 0);

     }

     else {

         &amp;PrintBarVert(0, -1);

     }

    }



    print OUT &lt;&lt;EOM;

&lt;BR&gt;

&lt;IMG SRC=&quot;$hourBar&quot; WIDTH=288 HEIGHT=22 BORDER=0 HSPACE=0 VSPACE=0 ALT=&quot;&quot;&gt;

&lt;/TD&gt;

&lt;TD COLSPAN=2&gt;&lt;TABLE BORDER=1 WIDTH=100%&gt;

&lt;TR&gt;&lt;TH ALIGN=RIGHT&gt;Avg Accesses/Hour&lt;/TH&gt;&lt;TD ALIGN=RIGHT&gt;$stat{'accessesPerHour'}&lt;/TD&gt;&lt;/TR&gt;

&lt;TR&gt;&lt;TH ALIGN=RIGHT&gt;Max Accesses/Hour&lt;/TH&gt;&lt;TD ALIGN=RIGHT&gt;$stat{'maxhouraccess'}&lt;/TD&gt;&lt;/TR&gt;

&lt;TR&gt;&lt;TH ALIGN=RIGHT&gt;Min Accesses/Hour&lt;/TH&gt;&lt;TD ALIGN=RIGHT&gt;$stat{'minhouraccess'}&lt;/TD&gt;&lt;/TR&gt;

&lt;TR&gt;&lt;TH ALIGN=RIGHT&gt;Accesses/Day&lt;/TH&gt;&lt;TD ALIGN=RIGHT&gt;$stat{'accessesPerDay'}&lt;/TD&gt;&lt;/TR&gt;

&lt;/TABLE&gt;&lt;/TD&gt;&lt;/TR&gt;

EOM



foreach $pct (0..9) {

     $img = 9 - $pct;

     print OUT &quot;&lt;TR&gt;&lt;TD ALIGN=LEFT&gt;&lt;IMG SRC=\&quot;$vertbar{$img}\&quot; 

           HEIGHT=8 WIDTH=10 BORDER=1 ALT=\&quot;\&quot;&gt; &amp;gt &quot;;

     printf OUT (&quot;%d%%&lt;/TD&gt;&quot;, (9 - $pct)*10);

     printf OUT (&quot;&lt;TD ALIGN=RIGHT&gt;%d accesses&lt;/TD&gt;&lt;/TR&gt;\n&quot;, 

           (1 - $pct/10) * $stat{'maxhouraccess'});

    }



    print OUT &lt;&lt;EOM;

&lt;/TABLE&gt;&lt;P&gt;

EOM



}

</PRE>

</BLOCKQUOTE>

<HR>

<P>

The value of <TT>$hour</TT> that is passed to the <TT>PrintBarVert</TT>

subroutine is captured in the <TT>RecordStats</TT> subroutine,

shown in Listing 10.4.

<HR>

<BLOCKQUOTE>

<B>Listing 10.4&nbsp;&nbsp;RecordStats Stores from One Log Input

Line (accesswatch.pl)<BR>

</B>

</BLOCKQUOTE>

<BLOCKQUOTE>

<PRE>

#----------------------------------------------------------------------------#

#  AccessWatch function - RecordStats

#    Purpose  : Takes a single access as input, and updates the appropriate

#                   counters and arrays.

#----------------------------------------------------------------------------#

sub RecordStats {

    #tally server information, such as domain extensions, total accesses,

    # and page information



    local($hour, $minute, $second, $remote, $page) = @_;



    $remote =~ tr/[A-Z]/[a-z]/;



    if ($remote !~ /\./) { $remote .= &quot;.$orgdomain&quot;; }

      #takes care of those internal accesses that do not get fully

      # qualified in the log name -&gt; name.orgname.ext

    local($domainExt) = &amp;GetDomainExtension($remote, 1);



    $stat{'accesses'}++;

    $domains{$domainExt}++;

    $hosts{$remote}++;

    $pages{$page}++;

    $stat{&quot;hr&quot;.$hour}++;



    push (@accesses, &quot;$hour $min $sec $remote $page&quot;) if $details;



}

</PRE>

</BLOCKQUOTE>

<HR>

<P>

The rest of the code for this application is on the CD-ROM that

comes with this book, in the zipped file ACCESSWATCH_TAR.GZ. You

can open the file in UNIX and use WinZip in Windows 95 and NT.

<H2><A NAME="UnderstandingFileMaintenance"><FONT SIZE=5 COLOR=#FF0000>

Understanding File Maintenance</FONT></A></H2>

<P>

Unless a Web site is very simple, containing only one level of

HTML documents and no CGI or other applications, you need to establish

procedures and probably create code for file maintenance. The

preceding section demonstrated some techniques for analyzing the

log files that are appended by the Web server. If an application

has CGI applications that generate file output, you also need

to manage those files, in addition to any database files with

which the site may interact.

<P>

In <A HREF="ch7.htm" tppabs="http://www.mcp.com/818726400/0-7897/0-7897-0659-8/ch7.htm" >Chapter 7</A> &quot;Dynamic and Interactive HTML Content in Perl

and CGI,&quot; you learned how to create a simplified version

of a shopping-cart application. One side effect of this application

is the creation of a temporary file to hold the contents of the

shopping cart while the cart user is accessing items. When the

user finishes the shopping process, the file is deleted. What

happens if the shopping-cart user exits the site before reaching

the finishing stage? The way that the application is written,

it would leave this file on the system, which will eventually

fill any free space allocated for the file.

<P>

Additionally, a CGI application may create a file that needs to

be moved to a protected subsite for other forms of processing.

The CGI application cannot move the file, because it could be

running under the standard user name nobody-the user that most

Web servers assign for Web-page access. This &quot;user&quot;

does not have permission to move a file to a restricted area.

<P>

The most popular way to handle these types of file-management

issues is to use a scheduler that performs maintenance activities

at predefined times. In the UNIX  environment, this daemon is

<TT>cron</TT>. (A version of <TT>cron</TT> also is available for

the Macintosh.) In Windows NT, you can use <TT>at</TT>. Alternatively,

you can use NTCRND21, which is available at <B><A HREF="tppmsgs/msgs0.htm#17" tppabs="http://www.omen.com.au/Files/disk12/a04fa.html">http://www.omen.com.au/Files/disk12/a04fa.html</A></B>.

<P>

Using the UNIX version as an example, the site administrator can

access or create a shell script that will access the date and

time when a file was last accessed. (If the file is older than

a specified age, the script removes it.) In the case in which

the file is being moved, the script could access a particular

subdirectory; move its contents (or only the files that have a

certain extension); and kick off another application that will

process them when they have been moved.

<P>

After you create the script, you need to set it up as a <TT>cron</TT>

job. In UNIX, you accomplish this task by using the <TT>crontab,

batch</TT>, or <TT>at</TT> command. The <TT>crontab</TT> command

schedules a job to be run at a regular time for every specified

period-such as once a day, week, month, or year. The <TT>at</TT>

and <TT>batch</TT> commands are for batch jobs and are not used

as commonly as <TT>crontab</TT> is.

<P>

For more information on schedulers, check your operating-system

documentation, and check with the system administrators at your

site.

<H2><A NAME="UnderstandingRobotsandtheRobotExclusionStandard"><FONT SIZE=5 COLOR=#FF0000>

Understanding Robots and the Robot-Exclusion Standard</FONT></A></H2>

<P>

A Web robot (also known as a wanderer or spider) is an automated

application that moves about the Web, either on your local site

or in a broader domain, by accessing a document and then following

any URLs that the document contains. A well-known example of this

type of robot is WebCrawler, which traverses the Web to add documents

to its search engine.

<P>

Robots can be handy little beasties; they can perform functions

such as testing the links in all the HTML documents on a specific

Web site and printing a report of the links that are no longer

valid. As a Web page reader, you can understand how frustrating

it can be to access a link from a site, only to get the usual

<TT>HTTP/1.0 404 Object Not Found</TT> error.

<P>

Robots also can be little nightmares if you have one that is not

well written or intentionally not well-behaved. A robot can access

a site faster than the site can handle the access and overwhelm

the system. Or a robot can get into a recursive loop and gradually

overwhelm a system's resources or slow the system until it is

virtually unusable.

<P>

In 1994, the participants in the robots mailing list (<B>robots-request@nexor.co.uk</B>)

reached a consensus to create a standard robot-exclusion policy.

This policy allows for a file called ROBOTS.TXT, which is placed

at the local URL <B>/robots.txt</B>. The file lists a user agent

(which is a particular robot) and then lists the agent's disallowed

URLs. The following forbids all robot entry to any site whose

URL begins with <B>/main/</B>:

<BLOCKQUOTE>

<PRE>

# robots.txt for http://www.somesite.com/



User-agent: *

Disallow: /main/

</PRE>

</BLOCKQUOTE>

<P>

When the preceding format is used, any robot that honors the robot-exclusion

standard knows that it cannot traverse any site whose URL begins

with <B>/main/</B>.

<P>

Following is an example that excludes all robots except a particular

robot with the user agent <TT>someagent</TT>:

<BLOCKQUOTE>

<PRE>

# robots.txt for http://www.somesite.com/



User-agent: *

Disallow: /main/



# someagent

User-agent: someagent

Disallow:

</PRE>

</BLOCKQUOTE>

<P>

The preceding code forbids entry to <B>/main/</B> to any robot

that honors the robot-exclusion standard except <TT>someagent</TT>.

Using the term <TT>disallow</TT> with no URL would remove any

previous <TT>disallow</TT> statements.

<P>

Finally, to forbid access to any robot that honors the robot-exclusion

standard, you would use the following:

<BLOCKQUOTE>

<PRE>

# go away

User-agent: *

Disallow: /

</PRE>

</BLOCKQUOTE>

<P>

You can see when a robot that honors the robot-exclusion standard

accesses your site, because you will have a recorded HTTP entry

similar to the following:

<BLOCKQUOTE>

<PRE>

204.162.99.205 www.yasd.com - [04/Jul/1996:15:30:43 -0800] &quot;GET /robots.txt HTTP/1.0&quot; 404 0

</PRE>

</BLOCKQUOTE>

<P>

This entry is from an actual log file. Using the Windows Sockets

Ping client application (which you can download from <B><A HREF="tppmsgs/msgs0.htm#18" tppabs="http://www.vietinfo.com/resource/html/networks.html">http://www.vietinfo.com/resource/html/networks.html</A></B>),

I found that the robot was from the DNS alias <TT>backfire.ultraseek.com</TT>.

From my browser, I accessed <B><A HREF="tppmsgs/msgs0.htm#19" tppabs="http://www.ultraseek.com/">http://www.ultraseek.com/</A></B> and

found that the company maintains the search engine of InfoSeek,

which is available at <B><A HREF="tppmsgs/msgs0.htm#20" tppabs="http://www.infoseek.com/">http://www.infoseek.com/</A></B>.<B> </B>The

fact that the robot attempted to access the ROBOTS.TXT file shows

that this robot program is complying with the no-robots exclusion

standard, and because my site performance has never degraded when

this robot visits, I can also assume that it is a well-behaved

robot.

<P>

Following is another entry in the log file for the same month:

<BLOCKQUOTE>

<PRE>

204.62.245.168 www.yasd.com - [11/Jul/1996:19:33:47 -0800] &quot;GET /robots.txt HTTP/1.0&quot; 404 0

</PRE>

</BLOCKQUOTE>

<P>

Again using the Ping program, I found that the IP address had

the DNS alias <TT>crawl3.atext.com</TT>. Using this alias as a

URL, I accessed <B><A HREF="tppmsgs/msgs0.htm#21" tppabs="http://www.atext.com/">http://www.atext.com</A></B> and found that the

robot belongs to the people who bring us the Excite search engine

(<B><A HREF="tppmsgs/msgs0.htm#22" tppabs="http://www.excite.com/">http://www.excite.com/</A></B>).<B> </B>The people at Excite also

have a nice, clean, and easy-to-traverse Web site and maintain

city.net, a knowledge base of information about communities around

the world (<B><A HREF="tppmsgs/msgs0.htm#23" tppabs="http://www.city.net/">http://www.city.net/</A></B>).

<P>

In the past few paragraphs, I have mentioned those robots that

comply with the robot-exclusion standard. This standard is not

enforced. A robot does not have to access this ROBOTS.TXT<TT>

</TT>file.

<P>

Following are some of the well-known robots that support the exclusion

standard:

<UL>

<LI>The Ahoy Homepage Finder (<B><A HREF="tppmsgs/msgs0.htm#24" tppabs="http://metacrawler.cs.washington.edu:6060/doc/home.html">http://metacrawler.cs.washington.edu:6060/doc/home.html</A></B>)

searches out personal home pages on the Web.

<LI>The FunnelWeb Search Agent (<B><A HREF="tppmsgs/msgs0.htm#25" tppabs="http://funnelweb.net.au/">http://funnelweb.net.au/</A></B>)

provides searches in the South Pacific, including Australia and

New Zealand.

<LI>The ht://Dig application (<B><A HREF="tppmsgs/msgs0.htm#26" tppabs="http://htdig.sdsu.edu/">http://htdig.sdsu.edu/</A></B>) provides

search capabilities and an index for intranet use only.

<LI>The Hyper-Decontextualizer tool (<B><A HREF="tppmsgs/msgs0.htm#27" tppabs="http://www.tricon.net/Comm/synapse/spider/">http://www.tricon.net/Comm/synapse/spider/</A></B>)

takes the words that you enter and links them to some random site.

The tool is fun to play with, and the site is worth a visit.

<LI>The InfoSeek robot (<B><A HREF="tppmsgs/msgs0.htm#20" tppabs="http://www.infoseek.com/">http://www.infoseek.com</A></B>), mentioned

previously in this section, is a general Web-search service tool.

<LI>The Inktomi Slurp (<B><A HREF="tppmsgs/msgs0.htm#28" tppabs="http://inktomi.berkeley.edu/">http://inktomi.berkeley.edu/</A></B>) has

an irresistible name and is a well-known search engine.

</UL>

<P>

The list could go on and on. You can see these and other sites

listed in the Web Robots Database (<B><A HREF="tppmsgs/msgs0.htm#29" tppabs="http://info.webcrawler.com/mak/projects/robots/active.html">http://info.webcrawler.com/mak/projects/robots/active.html</A></B>),

which is maintained by WebCrawler<B>.</B>

<H2><A NAME="ConfiguringSomeCommonWebServers"><FONT SIZE=5 COLOR=#FF0000>

Configuring Some Common Web Servers</FONT></A></H2>

<P>

Other site-administration and site-maintenance tasks have to do

with the configuration of the Web server. You may need to create

permissions for users, start servers running, kill processes that

are causing problems, and perform other administrative tasks.

Additionally, you need to perform upgrades not only on the Web

server software, but probably also on all the supporting software

(compilers, databases, and so on).

<P>

The following sections discuss some of the installation and configuration

tasks involved in creating Web applications (particularly with

Perl) for some common Web servers.

<H3><A NAME="OReillysWebSite">

O'Reilly's WebSite</A></H3>

<P>

WebSite (<B><A HREF="tppmsgs/msgs0.htm#30" tppabs="http://website.ora.com/">http://website.ora.com/</A></B>) is a popular Windows

NT and Windows 95 32-bit Web server, due to its features and price.

After you install this application, a tabbed property sheet allows

you to configure such aspects as CGI access, user access, mapping,

and logging. The details on setting up the site for CGI applications

are provided in a book that comes with the installation software.

<H3><A NAME="NCSAhttpd">

NCSA httpd</A></H3>

<P>

NCSA httpd is a popular UNIX-based Web server; you can download

it for free from <B><A HREF="tppmsgs/msgs0.htm#31" tppabs="http://hoohoo.ncsa.uiuc.edu/">http://hoohoo.ncsa.uiuc.edu/</A></B>.<B> </B>After

installation, a subdirectory called CONF contains the configuration

file HTTPD.CONF, which you access and change to customize the

installation.

<P>

The configuration file contains several directives, including

the following:

<UL>

<LI><TT>AccessConfig</TT>: global access configuration file. The

access configuration file establishes what server-side includes

(SSI) are allowed and which directive controls can be overridden

by a subdirectory-based access control file.

<LI><TT>ErrorLog</TT>: file in which the Web server will log errors.

<LI><TT>AuthUserFile</TT>: file that contains users and passwords.

<LI><TT>AuthName</TT>: file that sets the authorization realm.

<LI><TT>AuthType</TT>: authorization type.

<LI><TT>AuthGroupFile</TT>: user groups for authentication.

<LI><TT>VirtualHost</TT>: multiple responses for multiple IP addresses.

</UL>

<P>

Several other directives are allowable for the configuration file;

you can review them at <B><A HREF="tppmsgs/msgs0.htm#32" tppabs="http://hoohoo.ncsa.uiuc.edu/docs/setup/httpd/Overview.html">http://hoohoo.ncsa.uiuc.edu/docs/setup/httpd/Overview.html</A></B>.

<P>

In addition to the server-configuration file, you'll find a file

for configuring the server resources (SRM.CONF). This file contains

the <TT>AddType</TT> directive, which adds MIME types for the

server. Without this directive, the server does not know how to

process a file that has a certain extension. Another important

directive is the <TT>AddEncoding</TT> directive, which allows

you to add file-encoding types, such as x-gzip encoding for the

.GZ file extension.

<P>

Access for the Web server is maintained in the global access configuration

file and in individual access files that are created for specific

directories.

<P>

Setting up CGI for a NCSA httpd Web server is a simple process.

First, you define which subdirectory contains scripts that will

be executed by means of the <TT>ScriptAlias</TT> server directive.

As documented by NCSA, the disadvantage of using this technique

is that everyone would need to access and use the same subdirectory.

In a virtual-host situation, this situation is highly unlikely.

<P>

Another technique for defining CGI executables is to define the

MIME types for the CGI applications as executable by using the

<TT>AddType</TT> resource directive and the extension, as in the

following example:

<BLOCKQUOTE>

<PRE>

AddType application/x-httpd-cgi .cgi

</PRE>

</BLOCKQUOTE>

<P>

This code instructs the Web server to execute the file instead

of attempting to read it when a Web page reader accesses a file

that has this extension. My UNIX-based virtual Web site uses this

technique.

<P>

To learn more about installing and configuring an NCSA httpd Web

server, go to <B><A HREF="tppmsgs/msgs0.htm#33" tppabs="http://hoohoo.ncsa.uiuc.edu/docs/Overview.html">http://hoohoo.ncsa.uiuc.edu/docs/Overview.html</A></B>.

<H3><A NAME="Apache">

Apache</A></H3>

<P>

The Apache Group's Web server, Apache, is available at <B><A HREF="tppmsgs/msgs0.htm#34" tppabs="http://www.apache.org/">http://www.apache.org/</A></B>.<B>

</B>Apache has a configuration setup that is very similar to that

of NCSA httpd. Three files are used to configure the Apache Web

server: SRM.CONF, ACCESS.CONF, and HTTPD.CONF.

<P>

The directives that Apache supports are listed in Table 10.1.

Reading the directives in the table (and accessing more information

about them at <B><A HREF="tppmsgs/msgs0.htm#35" tppabs="http://www.apache.org/docs/directives.html">http://www.apache.org/docs/directives.html</A></B>)

is a demystifying experience. If you are a Web-application developer

but not necessarily a Webmaster, the information in this table

allows you to communicate with your Webmaster in a more meaningful

manner. If NCSA httpd has a corresponding directive, Y appears

in the NCSA httpd column; if not, N appears in that column; if

unclear, ? appears in the column.<BR>

<P>

<CENTER><B>Table 10.1&nbsp;&nbsp;Apache Web Server Configuration

Directives</B></CENTER>

<P>

<CENTER>

<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>

<TR VALIGN=TOP><TD WIDTH=161><B>Directive</B></TD><TD WIDTH=348><B>Purpose</B>

</TD><TD WIDTH=91><CENTER><B>NCSA httpd?</B></CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>AccessConfig</TT></TD><TD WIDTH=348>Access configuration file name

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>AccessFileName</TT></TD><TD WIDTH=348>Local access file name

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>Action</TT></TD><TD WIDTH=348>Action to activate CGI script for a specific MIME type

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>AddDescription</TT></TD><TD WIDTH=348>Description of file if <TT>FancyIndexing </TT>is set

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>AddEncoding</TT></TD><TD WIDTH=348>Allows the Webmaster to add file encoding types, such as x-gzip encoding

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>AddHandler</TT></TD><TD WIDTH=348>Maps handler to file extension

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>AddIcon</TT></TD><TD WIDTH=348>Icon to display if <TT>FancyIndexing </TT>is set

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>AddIconByEncoding</TT></TD><TD WIDTH=348>Icon to display next to encoded files with <TT>FancyIndexing</TT>

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>AddIconByType</TT></TD><TD WIDTH=348>Icon for MIME type files if <TT>FancyIndexing</TT> is set

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>AddLanguage</TT></TD><TD WIDTH=348>Adds file extension to describe the language content

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>AddType</TT></TD><TD WIDTH=348>Adds MIME-type extension

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>AgentLog</TT></TD><TD WIDTH=348>File in which <TT>UserAgent</TT> requests are logged

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>Alias</TT></TD><TD WIDTH=348>Allows alias path

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>allow</TT></TD><TD WIDTH=348>Which hosts can access what directories

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>AllowOverride</TT></TD><TD WIDTH=348>Indicates whether local access file can override previous access file information

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>Anonymous</TT></TD><TD WIDTH=348>User name that is allowed access without password verification

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>Anonymous_ Authorative</TT></TD><TD WIDTH=348>Must match <TT>Anonymous</TT> directive, or access will be forbidden

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>Anonymous_LogEmail</TT></TD><TD WIDTH=348>Indicates whether anonymous password is logged

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>Anonymous_NoUserID</TT></TD><TD WIDTH=348>Can leave out user name and password

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>Anonymous_ VerifyEmain</TT></TD><TD WIDTH=348>Indicates whether verification of anonymous password occurs

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>AuthDBMGroupFile</TT></TD><TD WIDTH=348>DBM file containing user groups for authentication

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>AuthDBMUserFile</TT></TD><TD WIDTH=348>DBM file containing users and passwords

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>AuthDigestFile</TT></TD><TD WIDTH=348>Digest authentication file containing users and passwords

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>AuthGroup</TT></TD><TD WIDTH=348>File containing user groups for user authentication

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>AuthName</TT></TD><TD WIDTH=348>Authorization realm name

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>AuthType</TT></TD><TD WIDTH=348>Authorization type (basic only)

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>AuthUserFile</TT></TD><TD WIDTH=348>File containing names and passwords for user authentication

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>BindAddress</TT></TD><TD WIDTH=348><TT>* </TT>for all IP addresses or a specific IP address

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>CacheDefaultExpire</TT></TD><TD WIDTH=348>Expire time default if document is fetched via protocol that does not support expire times

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>CacheGcInterval</TT></TD><TD WIDTH=348>Time factor for determining whether files need to be deleted due to space constraints

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>CacheLastModified Factor</TT></TD><TD WIDTH=348>Factor for expiration calculation

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>CacheMaxExpire</TT></TD><TD WIDTH=348>Maximum time that cached documents will be retained

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>CacheNegotiatedDocs</TT></TD><TD WIDTH=348>Allows content-negotiated documents to be cached by proxy servers

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>CacheRoot</TT></TD><TD WIDTH=348>Directory for cached files

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>CacheSize</TT></TD><TD WIDTH=348>Space use for cache

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>CookieLog</TT></TD><TD WIDTH=348>Allows for Netscape cookies

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>DefaultIcon</TT></TD><TD WIDTH=348>Icon to display by default when <TT>FancyIndexing</TT> is set

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>DefaultType</TT></TD><TD WIDTH=348>For handling unknown MIME types

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>deny</TT></TD><TD WIDTH=348>Indicates which host is denied access to specific directories

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>&lt;directory&gt;</TT></TD><TD WIDTH=348>Encloses a group of directives

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>DirectoryIndex</TT></TD><TD WIDTH=348>Indicates which documents to look for when requester does not specify a document

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>DocumentRoot</TT></TD><TD WIDTH=348>Directory where httpd will serve files

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>ErrorDocument</TT></TD><TD WIDTH=348>Document to display when a specific error occurs

</TD><TD WIDTH=91><CENTER>N</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>ErrorLog</TT></TD><TD WIDTH=348>Log in which server will log errors

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>FancyIndexing</TT></TD><TD WIDTH=348>Indicates whether fancy indexing is set for a directory

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>Group</TT></TD><TD WIDTH=348>Group where server will answer requests

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>HeaderName</TT></TD><TD WIDTH=348>File inserted at top of listing

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>IdentityCheck</TT></TD><TD WIDTH=348>Enables logging of remote user name

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>ImapBase</TT></TD><TD WIDTH=348>Default base for image-map files

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>ImapDefault</TT></TD><TD WIDTH=348>Sets default used in image maps if coordinates have no match

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>ImapMenu</TT></TD><TD WIDTH=348>Action if no valid coordinates are in image map

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>IndexIgnore</TT></TD><TD WIDTH=348>Files to ignore when listing a directory

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>IndexOptions</TT></TD><TD WIDTH=348>Options for directory indexing

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>KeepAlive</TT></TD><TD WIDTH=348>Number of requests to maintain persistent connection from one TCP connection

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>KeepAliveTimeout</TT></TD><TD WIDTH=348>Seconds to wait for additional request

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>LanguagePriority</TT></TD><TD WIDTH=348>Precedence of languages

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>Limit</TT></TD><TD WIDTH=348>Enclosing directive for HTTP method

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>Listen</TT></TD><TD WIDTH=348>Indicates whether to listen to more than one port or IP address

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>LoadFile</TT></TD><TD WIDTH=348>Links in files or libraries on load

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>LoadModule</TT></TD><TD WIDTH=348>Links to library and adds module

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>Location</TT></TD><TD WIDTH=348>Provides for access control by URL

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>LogFormat</TT></TD><TD WIDTH=348>Indicates format of log file

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>MaxClients</TT></TD><TD WIDTH=348>Number of simultaneous client accesses

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>MaxRequestsPerChild</TT></TD><TD WIDTH=348>Number of requests for child server

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>MaxSpareServers</TT></TD><TD WIDTH=348>Number of idle child processes

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>MetaDir</TT></TD><TD WIDTH=348>Directory containing meta information

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>MetaSuffix</TT></TD><TD WIDTH=348>File suffix of file containing meta information

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>MinSpareServers</TT></TD><TD WIDTH=348>Minimum number of idle child processes

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>NoCache</TT></TD><TD WIDTH=348>List of hosts and domains that are not cached by proxy servers

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>Options</TT></TD><TD WIDTH=348>Indicates which server features are available in which directory

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>order</TT></TD><TD WIDTH=348>Order of <TT>allow</TT> and <TT>deny</TT> directives

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>PassEnv</TT></TD><TD WIDTH=348>Passes CGI environment variable to scripts

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>PidFile</TT></TD><TD WIDTH=348>File in which the server records the process ID of the daemon

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>Port</TT></TD><TD WIDTH=348>Network port to which the server listens

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>ProxyPass</TT></TD><TD WIDTH=348>Maps remote proxy servers into local address space

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>ProxyRemote</TT></TD><TD WIDTH=348>Defines remote proxies to proxy

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>ProxyRequests</TT></TD><TD WIDTH=348>Indicates whether the server functions as a proxy server

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>ReadmeName</TT></TD><TD WIDTH=348>Name of file appended to end of listing

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>Redirect</TT></TD><TD WIDTH=348>Maps old URL to new one

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>RefererIgnore</TT></TD><TD WIDTH=348>Adds to strings to ignore in the headings of <I>referers</I> (sites that contain your site as a link and refer a Web page reader to your site)

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>RefererLog</TT></TD><TD WIDTH=348>Name of file in which the server will log referer headings

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>Require</TT></TD><TD WIDTH=348>Indicates which users can access a directory

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>ResourceConfig</TT></TD><TD WIDTH=348>Name of file to read after HTTPD.CONF file

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>Script</TT></TD><TD WIDTH=348>Action that activates <TT>cgi-script </TT>after specific method

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>ScriptAlias</TT></TD><TD WIDTH=348>Same as <TT>Alias</TT>; marks directory as <TT>cgi-script</TT>

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>ServerAdmin</TT></TD><TD WIDTH=348>Sets the e-mail that the server includes in any error message

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>ServerAlias</TT></TD><TD WIDTH=348>Alternative names for the host

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>ServerName</TT></TD><TD WIDTH=348>Host name of the server

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>ServerRoot</TT></TD><TD WIDTH=348>Directory in which the server lives

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>ServerType</TT></TD><TD WIDTH=348>Value of <TT>inetd</TT> or <TT>standalone</TT>

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>SetEnv</TT></TD><TD WIDTH=348>Sets environment variable passed to CGI scripts

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>SetHandler</TT></TD><TD WIDTH=348>Forces matching files to be passed through a handler

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>StartServers</TT></TD><TD WIDTH=348>Number of child server processes started at startup

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>TimeOut</TT></TD><TD WIDTH=348>Maximum that time server will wait for completion and receipt of a request

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>TransferLog</TT></TD><TD WIDTH=348>File in which incoming requests are logged

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>TypesConfig</TT></TD><TD WIDTH=348>Location of MIME-type configuration file

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>User</TT></TD><TD WIDTH=348>User ID for which the server will answer requests

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>UserDir</TT></TD><TD WIDTH=348>Sets real directory to use when processing a document for a user

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>VirtualHost</TT></TD><TD WIDTH=348>Groups directives for a specific virtual host

</TD><TD WIDTH=91><CENTER>Y</CENTER></TD></TR>

<TR VALIGN=TOP><TD WIDTH=161><TT>XBitHack</TT></TD><TD WIDTH=348>Controls parsing of HTML documents

</TD><TD WIDTH=91><CENTER>?</CENTER></TD></TR>

</TABLE></CENTER>

<P>

<P>

Reading through this table, a Web-application developer can see

several directives that affect what she or he can do, as well

as what actions result in what behavior.

<H2><A NAME="ExaminingSomeOtherFileandSiteAdministrationIssues"><FONT SIZE=5 COLOR=#FF0000>

Examining Some Other File- and Site-Administration Issues

</FONT></A></H2>

<P>

In addition to the files that are created and maintained by the

Web server, the site needs to have access to the tools required

for running the Web applications. On a UNIX site, this requirement

could mean having access to C and C++ compilers and to any run-time

libraries that your code may access, if you use either of those

languages. If your site does not have a C++ compiler, you can

access a GNU C++ compiler, g++, at <B><A HREF="tppmsgs/msgs0.htm#36" tppabs="ftp://ftp.cygnus.com/pub/g++/">ftp://ftp.cygnus.com/pub/g++/</A></B>.<B>

</B>To find out more about the GNU CC compiler, go to <B><A HREF="tppmsgs/msgs0.htm#37" tppabs="http://www.cl.cam.ac.uk/texinfodoc/gcc_1.html">http://www.cl.cam.ac.uk:80/texinfodoc/gcc_1.html</A></B>.

<P>

If you are using Perl (and I assume that you are, or this book

would not have much appeal to you), you need to have access to

the Perl executable, as well as to any Perl support files, such

as <TT>CGI.pm</TT>. Appendix A, &quot;Perl Acquisition and Installation,&quot;

provides instructions on accessing Perl, and Appendix B, &quot;Perl

Web Reference,&quot; lists several sites from which you can access

support files.

<P>

If you are working with any database access, you need to have

the files and permissions to make this type of access. If your

site does not contain a database, and you want to have access

to a relational database access, visit the Hughes Technologies

site at <A HREF="tppmsgs/msgs0.htm#38" tppabs="http://hughes.com.au/">http://Hughes.com.au/.</A> This site has a relational database

engine, called mSQL or Mini SQL, that is very inexpensive and

that has a large amount of support and utilities for the UNIX

environment.

<P>

For Windows NT or Windows 95, you may need run-time files, such

as those required by Microsoft's Visual Basic.

<P>

If you are using Java, you need to have the Java tools in the

environment in which you will compile your application into byte

code, but you do not need to have the Java development environment

on your server. The byte code will be interpreted by a Java-compatible

browser (such as Netscape's Navigator 2.0 and later, and Microsoft's

Internet Explorer 3.0 and later). To download the Java Developers

Kit, go to <A HREF="tppmsgs/msgs0.htm#39" tppabs="http://java.sun.com/products/JDK/.">http://java.sun.com/products/JDK/.

</A><P>

If you are implementing security, you need to set up password

security in whatever directories need to be secure. For some Web

servers, additional security, installation, and configuration

issues may arise. Check with your Webmaster on those issues.

<H2><A NAME="FromHere"><FONT SIZE=5 COLOR=#FF0000>

From Here...</FONT></A></H2>

<P>

If you are planning to develop Web applications and are not the

Webmaster for your site, you should discuss your options with

the Webmaster before you do any coding. You also should view the

configuration files, if possible, to better understand what options

you have when programming.

<P>

In addition, if you are developing Web applications that create

files, you must provide some mechanism to clean up after the applications,

or your site will quickly get full. Using <TT>cron</TT> to schedule

a job that periodically performs cleanup operations is an effective

solution.

<P>

The log files that your Web server generates are your most useful

tool for understanding which documents are being accessed and

by whom. If you have a page that is rarely accessed, you may want

to drop it or provide access to it from a more prominent location.

<P>

For more information, you can check the following chapters:

<UL>

<LI><A HREF="ch7.htm" tppabs="http://www.mcp.com/818726400/0-7897/0-7897-0659-8/ch7.htm" >Chapter 7</A> &quot;Dynamic and Interactive HTML Content in Perl

and CGI,&quot; discusses source code that creates and accesses

several dynamic files.

<LI><A HREF="ch8.htm" tppabs="http://www.mcp.com/818726400/0-7897/0-7897-0659-8/ch8.htm" >Chapter 8</A> &quot;Understanding Basic User Authentication,&quot;

discusses some of the security issues for users accessing the

site.

<LI><A HREF="ch9.htm" tppabs="http://www.mcp.com/818726400/0-7897/0-7897-0659-8/ch9.htm" >Chapter 9</A> &quot;Understanding CGI Security,&quot; discusses

some of the security issues related to CGI applications.

</UL>

<HR>



<CENTER><P><A HREF="ch9.htm" tppabs="http://www.mcp.com/818726400/0-7897/0-7897-0659-8/ch9.htm"><IMG SRC="pc.gif" tppabs="http://www.mcp.com/818726400/0-7897/0-7897-0659-8/pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>

<A HREF="#CONTENTS"><IMG SRC="cc.gif" tppabs="http://www.mcp.com/818726400/0-7897/0-7897-0659-8/cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>

<A HREF="index.htm" tppabs="http://www.mcp.com/818726400/0-7897/0-7897-0659-8/index.htm"><IMG SRC="hb.gif" tppabs="http://www.mcp.com/818726400/0-7897/0-7897-0659-8/hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>

<A HREF="ch11.htm" tppabs="http://www.mcp.com/818726400/0-7897/0-7897-0659-8/ch11.htm"><IMG SRC="nc.gif" tppabs="http://www.mcp.com/818726400/0-7897/0-7897-0659-8/nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>

<HR WIDTH="100%"></P></CENTER>

</BODY>

</HTML>
